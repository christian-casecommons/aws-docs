<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Infrastructure Accelerator Tutorial</title>
    <link>https://casecommons.github.io/aws-docs/index.xml</link>
    <description>Recent content on Infrastructure Accelerator Tutorial</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the AGPL license</copyright>
    <lastBuildDate>Fri, 24 Feb 2017 22:14:44 +1300</lastBuildDate>
    <atom:link href="https://casecommons.github.io/aws-docs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Local Setup</title>
      <link>https://casecommons.github.io/aws-docs/local-setup/</link>
      <pubDate>Fri, 24 Feb 2017 22:14:44 +1300</pubDate>
      
      <guid>https://casecommons.github.io/aws-docs/local-setup/</guid>
      <description>

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;The instructions in this tutorial assume you are using a newly install macOS environment.  You will need to adapt the instructions accordingly if you are installing in a Linux environment.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;To run the deployment framework from your local machine, you need to install a number of software components including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Homebrew&lt;/li&gt;
&lt;li&gt;Python (Homebrew package)&lt;/li&gt;
&lt;li&gt;git 2.11 or higher (Homebrew package)&lt;/li&gt;
&lt;li&gt;jq 1.5 or higher (Homebrew package)&lt;/li&gt;
&lt;li&gt;Ansible 2.2 or higher (PIP package)&lt;/li&gt;
&lt;li&gt;AWS CLI 1.11 or higher (PIP package)&lt;/li&gt;
&lt;li&gt;netaddr (PIP package)&lt;/li&gt;
&lt;li&gt;ndg-httpsclient (PIP package)&lt;/li&gt;
&lt;li&gt;boto (PIP package installed using macOS system Python)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To run Docker related tasks in this tutorial you need to install the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker 1.12 or higher&lt;/li&gt;
&lt;li&gt;Docker Compose 1.9 or higher&lt;/li&gt;
&lt;li&gt;GNU Make&lt;/li&gt;
&lt;li&gt;Access to a working Docker Engine (e.g. Docker for Mac or Docker Machine)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installation-instructions&#34;&gt;Installation Instructions&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To install Homebrew, browse to &lt;a href=&#34;http://brew.sh&#34;&gt;http://brew.sh&lt;/a&gt; and follow the installation instructions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once Homebrew is installed, you can install Python, git and jq using Homebrew as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install python git jq
...
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To install Ansible, AWS CLI and other required Python packages, it is recommended to use PIP as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip install ansible awscli netaddr ndg-httpsclient
...
...
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To install the &lt;code&gt;boto&lt;/code&gt; package, you need to install both &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;boto&lt;/code&gt; using the macOS system Python installation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo -H /usr/bin/python -m easy_install pip
...
...
$ sudo -H /usr/bin/python -m pip install boto
...
...
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Security Resources</title>
      <link>https://casecommons.github.io/aws-docs/security-resources/</link>
      <pubDate>Sat, 18 Feb 2017 23:54:48 +1300</pubDate>
      
      <guid>https://casecommons.github.io/aws-docs/security-resources/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The initial set of AWS resources that need to be created for any AWS account are security resources, which establish the base IAM roles and groups that are required to create and manage additional AWS resources in each account.&lt;/p&gt;

&lt;p&gt;In this tutorial, we first need to create security resources for the &lt;strong&gt;Demo Users&lt;/strong&gt; account, after which we need to establish create security resources in the &lt;strong&gt;Demo Resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;h2 id=&#34;security-resources-template&#34;&gt;Security Resources Template&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;aws-cloudformation&lt;/code&gt; role includes a security resources template that is designed to define the following security resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IAM roles&lt;/li&gt;
&lt;li&gt;IAM groups&lt;/li&gt;
&lt;li&gt;ACM certificates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, without any custom configuration, the security template creates the following resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;strong&gt;admin&lt;/strong&gt; IAM role that has the AWS &lt;strong&gt;AdministratorAccess&lt;/strong&gt; managed policy attached and trusts your AWS account and an optional list of other AWS accounts to assume the role&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;Administrators&lt;/strong&gt; IAM group that has an IAM policy attached that permits members of this group the ability to assume the &lt;strong&gt;admin&lt;/strong&gt; role.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;Users&lt;/strong&gt; IAM group that has an IAM policy attached that enforces a requirement for multi-factor authentication (MFA) for all AWS operations except for a minimal set of IAM operations that allow a user to register/resync his/her MFA device and change his/her password.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;creating-a-temporary-user&#34;&gt;Creating a Temporary User&lt;/h2&gt;

&lt;p&gt;The security resources stack is the first stack you will create in a given AWS account, and requires a temporary administrative user to be created with an API access key configured to run the security resources playbook.  This temporary user is required to seed an initial administrative IAM role - once established, we can remove the temporary user and configure regular users that can assume the administrative IAM role as required to manage all AWS resources in the account.&lt;/p&gt;

&lt;p&gt;We will first create a temporary user in the &lt;strong&gt;Demo Users&lt;/strong&gt; account - later on you will repeat these instructions to create a temporary user in the &lt;strong&gt;Demo Resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;These instructions assume you are configuring a new account and have logged in to the account using root credentials to perform initial setup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the IAM dashboard, select  &lt;strong&gt;Users&lt;/strong&gt; on the left panel and click &lt;strong&gt;Add User&lt;/strong&gt;.
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-dashboard.png&#34; alt=&#34;IAM Dashboard&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Specify an appropriate user name, select the option to enable &lt;strong&gt;Programmatic access&lt;/strong&gt;, and click &lt;strong&gt;Next: Permissions&lt;/strong&gt;.
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-add-user.png&#34; alt=&#34;Add User&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the &lt;strong&gt;Attach existing policies directly&lt;/strong&gt; option and type &lt;strong&gt;AdministratorAccess&lt;/strong&gt; in the &lt;strong&gt;Filter&lt;/strong&gt; input.  Ensure the &lt;strong&gt;AdministratorAccess&lt;/strong&gt; policy is selected and then click &lt;strong&gt;Next: Review&lt;/strong&gt;.
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-set-permissions.png&#34; alt=&#34;Set Permissions&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the &lt;strong&gt;Create User&lt;/strong&gt; button.
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-create-user.png&#34; alt=&#34;Create User&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the &lt;strong&gt;Show&lt;/strong&gt; link to display the secret access key for the newly created user.
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-access-key.png&#34; alt=&#34;Access Key&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy the &lt;strong&gt;Access key ID&lt;/strong&gt; and &lt;strong&gt;Secret access key&lt;/strong&gt; values which you will need to configure the environment.&lt;br /&gt;
Once you have copied these values, click on the &lt;strong&gt;Close&lt;/strong&gt; button.
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-show-access-key.png&#34; alt=&#34;Show Access Key&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open a new shell prompt and export the access key ID and secret access key values as demonstrated below.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_ACCESS_KEY_ID=AKIAIRJGYMTD252YWCTQ
$ export AWS_SECRET_ACCESS_KEY=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
$ export AWS_DEFAULT_REGION=us-west-2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;creating-the-playbook&#34;&gt;Creating the Playbook&lt;/h2&gt;

&lt;p&gt;We will now establish a security resources playbook which will define security resources for both our &lt;strong&gt;Demo Users&lt;/strong&gt; account and &lt;strong&gt;Demo Resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;1. Clone the &lt;a href=&#34;https://github.com/casecommons/aws-starter&#34;&gt;AWS Starter&lt;/a&gt; to a local folder called &lt;strong&gt;demo-security-resources&lt;/strong&gt; and re-initialise the Git repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:Casecommons/aws-starter.git demo-security-resources
  Cloning into &#39;demo-security&#39;...
  remote: Counting objects: 32, done.
  remote: Total 32 (delta 0), reused 0 (delta 0), pack-reused 32
  Receiving objects: 100% (32/32), 4.78 KiB | 0 bytes/s, done.
  Resolving deltas: 100% (7/7), done.
$ cd demo-security-resources
$ rm -rf .git
$ git init
Initialized empty Git repository in /Users/jmenga/Source/casecommons/demo-security-resources/.git/
$ tree
.
├── README.md
├── ansible.cfg
├── group_vars
│   ├── all
│   │   └── vars.yml
│   └── non-prod
│       └── vars.yml
├── inventory
├── roles
│   └── requirements.yml
└── site.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.  Review the &lt;code&gt;roles/requirements.yml&lt;/code&gt; file, which specifies the location and version of Ansible roles that the playbook relies on.  By default the &lt;code&gt;version&lt;/code&gt; for each role is set to install the latest commit from the &lt;code&gt;master&lt;/code&gt; branch, however it is a good idea to lock each role to a specific version as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# You can specify git tag, commit or branch for the version property&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@github.com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@github.com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.  Install the roles using the &lt;code&gt;ansible-galaxy&lt;/code&gt; command as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ansible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;galaxy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requirements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yml&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;force&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extracting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmenga&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;security&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;installed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extracting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmenga&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;security&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;installed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4. Notice that this installs the roles locally into the &lt;code&gt;roles&lt;/code&gt; folder, as per the &lt;code&gt;roles_path&lt;/code&gt; setting in the local &lt;code&gt;ansible.cfg&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ cat ansible.cfg
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;defaults&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;inventory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; inventory
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;roles_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; roles
&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;retry_files_enabled&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; False

$ tree roles -L &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
roles
├── aws-cloudformation
├── aws-sts
└── requirements.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;You only need to run the &lt;code&gt;ansible-galaxy install&lt;/code&gt; command as demonstrated above in the following scenarios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cloning the repository for the first time&lt;/li&gt;
&lt;li&gt;Updating the locally installed roles to a newer version&lt;/li&gt;
&lt;li&gt;Resetting the locally installed roles to their original state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using the &lt;code&gt;--force&lt;/code&gt; flag ensures the role will be overwritten regardless of whether or not the role is currently present locally.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;5.  Modify the &lt;code&gt;group_vars/all/vars.yml&lt;/code&gt; file, which contains global settings for the playbook.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Stack Settings&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cf_stack_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;security&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;n&#34;&gt;cf_stack_template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;templates/security.yml.j2&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cf_stack_tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;owner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Casecommons&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Security&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;severity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;High&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ env }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pema&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@casecommons.org&lt;/span&gt;
  
&lt;span class=&#34;c1&#34;&gt;# CloudFormation settings&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# This sets a policy that disables updates to existing resources&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# This requires you to explicitly set the cf_disable_stack_policy flag to true when running the playbook&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cf_stack_policy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Effect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Deny&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Update:*&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Principal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Resource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that we set four variables, each prefixed with &lt;code&gt;cf_&lt;/code&gt;, which by convention refers to variables that are input or output by the &lt;code&gt;aws-cloudformation&lt;/code&gt; role:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cf_stack_name&lt;/code&gt; - defines the name of the stack.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cf_stack_template&lt;/code&gt; - defines the CloudFormation template used to create the stack.  Here we reference &lt;code&gt;templates/security.yml.j2&lt;/code&gt;, which is a relative reference to a template included within the &lt;code&gt;aws-cloudformation&lt;/code&gt; role, rather than a template in the local playbook.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cf_stack_tags&lt;/code&gt; - defines tags that will be attached to all resources created within the CloudFormation stack&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cf_stack_policy&lt;/code&gt; - defines a CloudFormation stack policy.  This is a safety mechanism that requires you to temporarily explicity disable the stack policy if you want to make updates to an existing CloudFormation stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6. Remove the local &lt;code&gt;templates&lt;/code&gt; folder, since we are using a template that is embedded within the &lt;code&gt;aws-cloudformation&lt;/code&gt; role:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf templates
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8. Finally review the &lt;code&gt;site.yml&lt;/code&gt; file, which contains the main playbook:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Assume&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Role&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ env }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;gather_facts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;no&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Stack&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Deployment&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ env }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ sts_creds }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Notice the playbook is very simple with two plays defined:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assume Role&lt;/strong&gt; - this calls the &lt;code&gt;aws-sts&lt;/code&gt; role and assumes the role defined by the &lt;code&gt;sts_role_arn&lt;/code&gt; setting for a given environment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stack Deployment&lt;/strong&gt; - this calls the &lt;code&gt;aws-cloudformation&lt;/code&gt; role and creates a CloudFormation stack for a given environment.  Notice that we inject &lt;code&gt;sts_creds&lt;/code&gt; into the environment, which contains the temporary session credentials obtained via the previous Assume Role play.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In both plays, notice that the &lt;code&gt;hosts&lt;/code&gt; variable references the &lt;code&gt;env&lt;/code&gt; variable, which we must always supply at runtime:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ansible-playbook site.yml -e env=&amp;lt;environment-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An interesting aspect of the framework is that you typically don&amp;rsquo;t need to modify the primary &lt;code&gt;site.yml&lt;/code&gt; playbook, unless you want to perform some custom pre-deployment or post-deployment actions.&lt;/p&gt;

&lt;h2 id=&#34;defining-a-new-environment&#34;&gt;Defining a New Environment&lt;/h2&gt;

&lt;p&gt;In this section we will add a new environment called &lt;strong&gt;demo-users&lt;/strong&gt; to the playbook, which will be used to create security resources in our new &lt;strong&gt;demo-users&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;1. Modify the &lt;code&gt;inventory&lt;/code&gt; file so that it defines a single environment called &lt;strong&gt;demo-users&lt;/strong&gt;, ensuring you specify &lt;code&gt;ansible_connection=local&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[demo-users]
demo-users ansible_connection=local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Remove the &lt;code&gt;group_vars/non-prod&lt;/code&gt; environment folder that is included in the starter template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf group_vars/non-prod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3. Create a file called &lt;code&gt;group_vars/demo-users/vars.yml&lt;/code&gt;, which will hold all environment specific configuration for the &lt;strong&gt;demo-users&lt;/strong&gt; environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p group_vars/demo-users
$ touch group_vars/demo-users/vars.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Finally add the &lt;code&gt;sts_role_arn&lt;/code&gt; setting to &lt;code&gt;group_vars/demo-users/vars.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# STS role in the target AWS account to assume
sts_role_arn: &amp;quot;arn:aws:iam::094411466117:role/admin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;sts_role_arn&lt;/code&gt; setting defines the Amazon Resource Name (ARN) of the IAM role the &lt;code&gt;aws-sts&lt;/code&gt; Ansible role (take care not to confuse IAM and Ansible roles) will attempt to assume.  This is a very important setting, as it establishes the target account that the playbook will create a CloudFormation stack and associated resources in, and must be defined for every environment that you create.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ensure you replace the value &lt;code&gt;094411466117&lt;/code&gt; above with the account ID of your own &amp;ldquo;&lt;strong&gt;demo-users&lt;/strong&gt;&amp;rdquo; account.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;running-the-playbook&#34;&gt;Running the Playbook&lt;/h2&gt;

&lt;p&gt;The security template in the &lt;code&gt;aws-cloudformation&lt;/code&gt; role will create the following resources by default:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An IAM role named &lt;strong&gt;admin&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;An IAM group named &lt;strong&gt;Administrators&lt;/strong&gt; that grants members the ability to assume the &lt;strong&gt;admin&lt;/strong&gt; role&lt;/li&gt;
&lt;li&gt;An IAM group named &lt;strong&gt;Users&lt;/strong&gt; that requires users to authenticate using multi-factor authentication (MFA)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s now run the playbook to create these resources.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;These instructions assume you have configured your local environment with the AWS access key and AWS secret access key created earlier in  &lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/#creating-a-temporary-user&#34;&gt;Creating a Temporary User&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First run the Ansible playbook targeting the &lt;code&gt;demo-users&lt;/code&gt; environment as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ ansible-playbook site.yml -e &lt;span class=&#34;nv&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo-users

PLAY &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Assume Role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; *************************************************************

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : set_fact&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ******************************************************
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-users&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : checking &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; sts functions are sts_disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-users&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting empty sts_session_output result&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-users&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting sts_creds &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; legacy AWS credentials are present &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;e.g. &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Ansible Tower&lt;span class=&#34;o&#34;&gt;)]&lt;/span&gt; ***
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-users&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : assume sts role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************************************
&lt;span class=&#34;hll&#34;&gt;fatal: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-users&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: FAILED! &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, &lt;span class=&#34;s2&#34;&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;quot;aws sts assume-role --role-arn=\&amp;quot;arn:aws:iam::625916301437:role/admin\&amp;quot; &lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;--role-session-name=\&amp;quot;adminSession\&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;quot;delta&amp;quot;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;quot;0:00:02.143031&amp;quot;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;quot;end&amp;quot;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;quot;2017-02-19 14:42:24.227270&amp;quot;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;: true, 
&lt;span class=&#34;s2&#34;&gt;&amp;quot;rc&amp;quot;&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;255&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;quot;start&amp;quot;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;quot;2017-02-19 14:42:22.084239&amp;quot;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;quot;stderr&amp;quot;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;quot;\nAn error occurred (AccessDenied) when calling the AssumeRole &lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;operation: Not authorized to perform sts:AssumeRole&amp;quot;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;quot;stdout&amp;quot;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;quot;stdout_lines&amp;quot;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;quot;warnings&amp;quot;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;[]}&lt;/span&gt;

PLAY RECAP *********************************************************************
demo                       : &lt;span class=&#34;nv&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;changed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;unreachable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;failed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that the operation fails, and this is because we have a chicken-in-egg scenario where our the &lt;code&gt;aws-sts&lt;/code&gt; Ansible role in our playbook is attempting to assume the IAM role defined by the &lt;code&gt;sts_role_arn&lt;/code&gt; setting in our &lt;code&gt;groups_vars/demo-users/vars.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# STS role in the target AWS account to assume
sts_role_arn: &amp;quot;arn:aws:iam::094411466117:role/admin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;strong&gt;admin&lt;/strong&gt; role does not exist yet, as it is the job of the security playbook to create the role, creating a chicken-in-egg scenario.&lt;/p&gt;

&lt;p&gt;To overcome this we can set a flag &lt;code&gt;sts_disable&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; when we run the playbook, which disables the &lt;code&gt;aws-sts&lt;/code&gt; role:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ ansible-playbook site.yml -e &lt;span class=&#34;nv&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo-users -e &lt;span class=&#34;nv&#34;&gt;sts_disable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;

PLAY &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Assume Role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; *************************************************************

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : set_fact&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ******************************************************
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-users&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;hll&#34;&gt;TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : checking &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; sts functions are sts_disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ********************
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-users&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;quot;Skipping STS functions as sts_disabled is defined&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;
...
...

&lt;span class=&#34;hll&#34;&gt;TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-cloudformation : configure application stack&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ************************
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;changed: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-users&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;
...
...

PLAY RECAP *********************************************************************
&lt;span class=&#34;hll&#34;&gt;demo-users                  : &lt;span class=&#34;nv&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;19&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;changed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;unreachable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;failed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This time the playbook succeeds, pausing on the &lt;code&gt;configure application stack&lt;/code&gt; task for a couple of minutes whilst the CloudFormation stack is created (notice this task completes with a &lt;code&gt;changed&lt;/code&gt; status), and then completing successfully once the stack is created.&lt;/p&gt;

&lt;p&gt;If you navigate to the CloudFormation dashboard, notice that a new stack called &lt;strong&gt;security-resources&lt;/strong&gt; has been created:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/security-resources-stack.png&#34; alt=&#34;Security Resources Stack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the IAM dashboard we can verify that our &lt;strong&gt;admin&lt;/strong&gt; role has been created:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-admin-role.png&#34; alt=&#34;IAM Admin Role&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Because the &lt;strong&gt;admin&lt;/strong&gt; role has now been created, you should be able to re-run the playbook without the &lt;code&gt;sts_disable&lt;/code&gt; flag:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ansible-playbook site.yml -e env=demo-users

PLAY [Assume Role] *************************************************************

TASK [aws-sts : set_fact] ******************************************************
ok: [demo-users]
...
...

TASK [aws-cloudformation : configure application stack] ************************
ok: [demo-users]

TASK [aws-cloudformation : get stack facts] ************************************
ok: [demo-users]

TASK [aws-cloudformation : set stack facts] ************************************
ok: [demo-users]

TASK [aws-cloudformation : debug] **********************************************
skipping: [demo-users]

TASK [aws-cloudformation : S3 Template URL] ************************************
skipping: [demo-users]

TASK [aws-cloudformation : enable current stack policy] ************************
skipping: [demo-users]

TASK [aws-cloudformation : fail] ***********************************************
skipping: [demo-users]

TASK [aws-cloudformation : delete application stack] ***************************
skipping: [demo-users]

PLAY RECAP *********************************************************************
demo                       : ok=20   changed=0    unreachable=0    failed=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time the playbook can successfully assume the &lt;strong&gt;admin&lt;/strong&gt; role (because our temporary user has administrative credentials and the role trusts the local AWS account), and notice that the &lt;strong&gt;configure application stack&lt;/strong&gt; completes with no change, as the CloudFormation stack already exists and no configuration changes have been made.&lt;/p&gt;

&lt;p&gt;Back in the IAM console, you should also be able to see that an &lt;strong&gt;Administrators&lt;/strong&gt; group and &lt;strong&gt;Users&lt;/strong&gt; group have been created:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-groups.png&#34; alt=&#34;IAM Groups&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;creating-an-administrator&#34;&gt;Creating an Administrator&lt;/h2&gt;

&lt;p&gt;Now that we have established an &lt;strong&gt;admin&lt;/strong&gt; IAM role and an &lt;strong&gt;Administrators&lt;/strong&gt; and &lt;strong&gt;Users&lt;/strong&gt; group, now let&amp;rsquo;s create a new user  called &amp;lsquo;justin.menga&amp;rsquo; and attach this user to &lt;strong&gt;Users&lt;/strong&gt; group to enforce MFA for this user, and the &lt;strong&gt;Administrators&lt;/strong&gt; group to allow the user to administer the &lt;strong&gt;demo-users&lt;/strong&gt; account.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;These instructions assume that you are starting logged in as root to the &lt;strong&gt;demo-users&lt;/strong&gt; account&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1. Navigate to the &lt;strong&gt;Users&lt;/strong&gt; section in the IAM dashboard and click the &lt;strong&gt;Add user&lt;/strong&gt; button:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-add-admin-user.png&#34; alt=&#34;Add User&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2. Configure an appropriate user name and password as shown below and click on the &lt;strong&gt;Next: Permissions&lt;/strong&gt; button:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-set-user-details.png&#34; alt=&#34;Set User Details&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3. Add the user to the &lt;strong&gt;Administrators&lt;/strong&gt; and &lt;strong&gt;Users&lt;/strong&gt; group and click on the &lt;strong&gt;Next: Review&lt;/strong&gt; button:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-set-admin-permissions.png&#34; alt=&#34;Set User Details&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4. Click on &lt;strong&gt;Create User&lt;/strong&gt; to confirm the creation of the user:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-create-admin-user.png&#34; alt=&#34;Create User&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5. Copy the AWS access key ID and secret access key value as you will need these later on when you configure your local AWS environment.  Once done, click on the &lt;strong&gt;Close&lt;/strong&gt; button:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-add-admin-user-success.png&#34; alt=&#34;Create User Success&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6. At this point, you can remove the temporary administrative user &lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/#creating-a-temporary-user&#34;&gt;we created earlier&lt;/a&gt; by selecting the user in the IAM users section, clicking &lt;strong&gt;Delete users&lt;/strong&gt; and confirming the delete operation:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-admin-user-added.png&#34; alt=&#34;Delete User&#34; /&gt;
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-confirm-delete-user.png&#34; alt=&#34;Confirm Delete User&#34; /&gt;&lt;/p&gt;

&lt;p&gt;7. You should also now clear the previous temporary user credentials from your local shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_DEFAULT_REGION
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;setting-up-mfa&#34;&gt;Setting up MFA&lt;/h2&gt;

&lt;p&gt;We have created an administrative account that is assigned to the both the &lt;strong&gt;Administrators&lt;/strong&gt; and  &lt;strong&gt;Users&lt;/strong&gt; groups.  The &lt;strong&gt;Users&lt;/strong&gt; groups enforces a requirement for multi-factor authentication (MFA) except for a few specific IAM actions including resetting your password and setting up/resyncing an MFA device, so now let&amp;rsquo;s setup MFA for our new user.&lt;/p&gt;

&lt;p&gt;1. Logout from the console and login into the AWS console using the URL &lt;code&gt;https://&amp;lt;account-id-or-alias&amp;gt;.signin.aws.amazon.com/console&lt;/code&gt;
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-admin-user-signin.png&#34; alt=&#34;Console Login&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2. Navigate to &lt;strong&gt;IAM &amp;gt; Users&lt;/strong&gt; and select the user account you have just logged in as:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-select-admin-user.png&#34; alt=&#34;Select User&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3. Select the &lt;strong&gt;Security Credentials&lt;/strong&gt; tab and click on the &lt;strong&gt;Edit&lt;/strong&gt; icon next to &lt;strong&gt;Assigned MFA device&lt;/strong&gt;:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-security-credentials.png&#34; alt=&#34;Security Credentials&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4. Select the &lt;strong&gt;A virtual MFA device&lt;/strong&gt; option and click &lt;strong&gt;Next Step&lt;/strong&gt;:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-virtual-mfa.png&#34; alt=&#34;Select MFA Device&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5. Add a new account on your MFA device (e.g. Microsoft or Google Authenticator) and scan the QR code displayed on screen.  Once you have entered two authentication codes, click on the &lt;strong&gt;Activate Virtual MFA&lt;/strong&gt; button:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-sync-mfa.png&#34; alt=&#34;Sync MFA Device&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6. Copy the ARN value of the MFA device as you will need this later when you configure your local AWS environment to assume the &lt;strong&gt;admin&lt;/strong&gt; role.
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-mfa-activated.png&#34; alt=&#34;MFA Activated&#34; /&gt;&lt;/p&gt;

&lt;p&gt;7. At this point, MFA is setup for the administrative user, and if you logout and log back in with the user credentials, this time you should be prompted to enter an MFA code:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-admin-user-signin.png&#34; alt=&#34;Console Login&#34; /&gt;
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-enter-mfa.png&#34; alt=&#34;MFA Login&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After successfully logging in with MFA auth, you will now be able to assume the &lt;strong&gt;admin&lt;/strong&gt; role in the AWS console, as the user is a member of the &lt;strong&gt;Administrators&lt;/strong&gt; group and has satisfied the requirement to authenticate using MFA.&lt;/p&gt;

&lt;p&gt;8. Expand the login dropdown and select the &lt;strong&gt;Switch Role&lt;/strong&gt; option:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-switch-role.png&#34; alt=&#34;Switch Role&#34; /&gt;&lt;/p&gt;

&lt;p&gt;9. Enter the account ID or alias of the &lt;strong&gt;demo-users&lt;/strong&gt; account, specify &lt;strong&gt;admin&lt;/strong&gt; as the role to assume and click &lt;strong&gt;Switch Role&lt;/strong&gt;:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-switch-role-details.png&#34; alt=&#34;Switch Role Details&#34; /&gt;&lt;/p&gt;

&lt;p&gt;10. Notice that the AWS Console reflects you have successfully assumed the admin role:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-assumed-admin-role.png&#34; alt=&#34;Assumed Admin Role&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;configuring-aws-api-access&#34;&gt;Configuring AWS API Access&lt;/h2&gt;

&lt;p&gt;We have established an initial administrative user and have setup MFA access to the AWS Console.&lt;/p&gt;

&lt;p&gt;We now need to setup our local AWS environment to allow us to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authenticate as user using the API key created in Step 5 of &lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/#creating-an-administrator&#34;&gt;Creating an Admnistrator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Automatically assume the &lt;strong&gt;admin&lt;/strong&gt; role and prompt for MFA authentication&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1. Add an entry to the local &lt;code&gt;~/.aws/credentials&lt;/code&gt; file that includes the AWS access key ID and secret access key created in in Step 5 of &lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/#creating-an-administrator&#34;&gt;Creating an Admnistrator&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[demo-users]
aws_access_key_id = xxxxxxxxxxxxxx
aws_secret_access_key = xxxxxxxxxxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Add a profile to the local &lt;code&gt;~/.aws/config&lt;/code&gt; file that references the credentials profile created in Step 1, and is configured to assume the admin role with MFA authentication:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[profile demo-users-admin]
source_profile=demo-users
role_arn=arn:aws:iam::094411466117:role/admin
role_session_name=justin.menga
mfa_serial=arn:aws:iam::094411466117:mfa/justin.menga
region=us-west-2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we create a profile called &lt;code&gt;demo-users-admin&lt;/code&gt; with the following settings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source_profile&lt;/code&gt; - references the credentials profile created in Step 1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;role_arn&lt;/code&gt; - the ARN of the IAM role to assume, which in this case is the &lt;strong&gt;admin&lt;/strong&gt; role in the &lt;strong&gt;demo-users&lt;/strong&gt; account&lt;/li&gt;
&lt;li&gt;&lt;code&gt;role_session_name&lt;/code&gt; - the name to assign to each session created when you assume the role.  Setting this to your user name simplifies tracking of user activity in CloudTrail logs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mfa_serial&lt;/code&gt; - the ARN of the MFA device used for MFA, which we copied in Step 6 of &lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/#setting-up-mfa&#34;&gt;Setting up MFA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;region&lt;/code&gt; - the default AWS region to assume the role in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3. We can now test the profile we have just setup.  We can configure our environment to use the profile by setting the &lt;code&gt;AWS_PROFILE&lt;/code&gt; environment variable and then running a test AWS CLI command as demonstrated below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-users-admin
$ aws sts get-caller-identity
Enter MFA Code: ******
{
    &amp;quot;Account&amp;quot;: &amp;quot;094411466117&amp;quot;,
    &amp;quot;UserId&amp;quot;: &amp;quot;AROAJRQTS5HMX77II3TQE:justin.menga&amp;quot;,
    &amp;quot;Arn&amp;quot;: &amp;quot;arn:aws:sts::094411466117:assumed-role/admin/justin.menga&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that you are prompted for an MFA code, and after entering a valid code, the test AWS CLI command can be run.&lt;/p&gt;

&lt;p&gt;The AWS CLI caches temporary session credentials obtained during the assume role process by default for one hour, meaning if you re-run the test AWS CLI command, you won&amp;rsquo;t be re-prompted for MFA authentication until after one hour has passed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# We are not re-prompted for MFA authentication
$ aws sts get-caller-identity
{
    &amp;quot;Account&amp;quot;: &amp;quot;094411466117&amp;quot;,
    &amp;quot;UserId&amp;quot;: &amp;quot;AROAJRQTS5HMX77II3TQE:justin.menga&amp;quot;,
    &amp;quot;Arn&amp;quot;: &amp;quot;arn:aws:sts::094411466117:assumed-role/admin/justin.menga&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configure-the-resources-account&#34;&gt;Configure the Resources Account&lt;/h2&gt;

&lt;p&gt;We have created security resources in our &lt;strong&gt;demo-users&lt;/strong&gt; account by creating an environment called &lt;strong&gt;demo-users&lt;/strong&gt; in our security resources playbook.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s now create security resources in the &lt;strong&gt;demo-resources&lt;/strong&gt; account by creating a new environment called &lt;strong&gt;demo-resources&lt;/strong&gt; in our security resources playbook.&lt;/p&gt;

&lt;p&gt;1. Ensuring you are logged into the &lt;strong&gt;demo-resources&lt;/strong&gt; account, repeat the instructions &lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/#creating-a-temporary-user&#34;&gt;Creating a Temporary User&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2. Create a new environment called &lt;code&gt;demo-resources&lt;/code&gt; in the &lt;code&gt;inventory&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;[demo-users]&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;demo-users ansible_connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;local&lt;/span&gt;

&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;k&#34;&gt;[demo-resources]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;demo-resources ansible_connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;local&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3. Create a file called &lt;code&gt;group_vars/demo-resources/vars.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p group_vars/demo-resources
$ touch group_vars/demo-resources/vars.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Configure the &lt;code&gt;group_vars/demo-resources/vars.yml&lt;/code&gt; environment settings as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# STS role in the target AWS account to assume
sts_role_arn: &amp;quot;arn:aws:iam::160775127577:role/admin&amp;quot;

# Trusted entities for the IAM admin role
# Here we trust the demo-users account
config_iam_admin_accounts:
  - 094411466117
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we change the &lt;code&gt;sts_role_arn&lt;/code&gt; variable to reference the account ID (160775127577) of the &lt;strong&gt;demo-resources&lt;/strong&gt; account.  Again, this is very important that you target the correct account for each environment that you define.&lt;/p&gt;

&lt;p&gt;We also configure a setting called &lt;code&gt;config_iam_admin_accounts&lt;/code&gt;, which is an optional variable defined in the security template that adds a list of accounts as trusted entities to the IAM admin role that is created by the template.&lt;/p&gt;

&lt;p&gt;Because all of our user accounts will be defined in the &lt;strong&gt;demo-users&lt;/strong&gt; account, we need to delegate access to the admin role to the &lt;strong&gt;demo-users&lt;/strong&gt;, hence we configure the &lt;strong&gt;demo-users&lt;/strong&gt; account (account ID 094411466117) as a trusted entity.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;Adding a remote account as a trusted entity does not automatically allow all users from the remote account to assume the role.&lt;/p&gt;

&lt;p&gt;Users in the remote account must be granted permissions to assume the role - hence we are delegating control of which users can assume the admin role to the trusted account.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;5. Run the playbook, targetting the new &lt;code&gt;demo-resources&lt;/code&gt; environment and setting &lt;code&gt;sts_disable&lt;/code&gt; to true so that we can seed the initial IAM admin role:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ansible-playbook site.yml -e env=demo-resources -e sts_disable=true

PLAY [Assume Role] *************************************************************

TASK [aws-sts : set_fact] ******************************************************
ok: [demo-resources]

TASK [aws-sts : checking if sts functions are sts_disabled] ********************
ok: [demo-resources] =&amp;gt; {
    &amp;quot;msg&amp;quot;: &amp;quot;Skipping STS functions as sts_disabled is defined&amp;quot;
}

...
...

TASK [aws-cloudformation : configure application stack] ************************
changed: [demo-resources]

...
...

PLAY RECAP *********************************************************************
demo-resources              : ok=19   changed=1    unreachable=0    failed=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you navigate to the CloudFormation dashboard, notice that a new stack called &lt;strong&gt;security-resources&lt;/strong&gt; has been created:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/security-resources-stack.png&#34; alt=&#34;Security Resources Stack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the IAM dashboard we can verify that our &lt;strong&gt;admin&lt;/strong&gt; role has been created:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-admin-role.png&#34; alt=&#34;IAM Admin Role&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you click on the &lt;strong&gt;admin&lt;/strong&gt; role and select the &lt;strong&gt;Trust Relationships&lt;/strong&gt; tab, notice that both the local account ID for &lt;strong&gt;demo-resources&lt;/strong&gt; (160775127577) and the account ID for &lt;strong&gt;demo-users&lt;/strong&gt; (094411466117) are trusted:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-admin-role-trusts.png&#34; alt=&#34;IAM Admin Role Trusts&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;create-a-resources-admins-group&#34;&gt;Create a Resources Admins Group&lt;/h2&gt;

&lt;p&gt;In the previous section we created security resources for the &lt;strong&gt;demo-resources&lt;/strong&gt; account and added our &lt;strong&gt;demo-users&lt;/strong&gt; account as a trusted entity that is allowed to assume the &lt;strong&gt;admin&lt;/strong&gt; role.&lt;/p&gt;

&lt;p&gt;Before users in the &lt;strong&gt;&amp;ldquo;users&amp;rdquo;&lt;/strong&gt; account can assume the role, users within that account must be explicitly granted permission to assume the &lt;strong&gt;admin&lt;/strong&gt; role.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s now create a new group called &lt;strong&gt;DemoResourcesAdmins&lt;/strong&gt; in the &lt;strong&gt;demo-users&lt;/strong&gt; account and grant this group the ability to assume the &lt;strong&gt;admin&lt;/strong&gt; role in the &lt;strong&gt;demo-resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;security resources&lt;/strong&gt; template in our playbook includes support for defining IAM groups, so we will define the new group in the &lt;strong&gt;demo-users&lt;/strong&gt; environment.&lt;/p&gt;

&lt;p&gt;1. Open the &lt;code&gt;group_vars/demo-users/vars.yml&lt;/code&gt; file and add the following settings:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# STS role in the target AWS account to assume&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sts_role_arn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;arn:aws:iam::094411466117:role/admin&amp;quot;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# IAM Groups&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;n&#34;&gt;config_iam_groups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;n&#34;&gt;DemoResourcesAdmins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Policies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;      &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PolicyName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;AssumeDemoResourcesAdminRole&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;n&#34;&gt;PolicyDocument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;          &lt;span class=&#34;n&#34;&gt;Version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;2012-10-17&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;          &lt;span class=&#34;n&#34;&gt;Statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;            &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Effect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;              &lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;              &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;sts:AssumeRole&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;              &lt;span class=&#34;n&#34;&gt;Resource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;arn:aws:iam::160775127577:role/admin&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that you can add custom IAM groups using the &lt;code&gt;config_iam_groups&lt;/code&gt; dictionary, where each group is represented by a named key.  In the example above the security template will create a new IAM group called &lt;strong&gt;DemoResourceAdmins&lt;/strong&gt; and attach an IAM policy that allows members of the group to assume the &lt;strong&gt;admin&lt;/strong&gt; role in the &lt;strong&gt;demo-resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;2. To apply the new changes, run the security playbook, targeting the &lt;strong&gt;demo-users&lt;/strong&gt; environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-users-admin
$ ansible-playbook site.yml -e env=demo-users

PLAY [Assume Role] *************************************************************

TASK [aws-sts : set_fact] ******************************************************
ok: [demo-users]

TASK [aws-sts : checking if sts functions are sts_disabled] ********************
skipping: [demo-users]

TASK [aws-sts : setting empty sts_session_output result] ***********************
skipping: [demo-users]

TASK [aws-sts : setting sts_creds if legacy AWS credentials are present (e.g. for Ansible Tower)] ***
skipping: [demo-users]

TASK [aws-sts : assume sts role] ***********************************************
Enter MFA code: ******
ok: [demo-users]
...
...
TASK [aws-cloudformation : configure application stack] ************************
changed: [demo-users]
...
...
PLAY RECAP *********************************************************************
demo-users                 : ok=20   changed=1    unreachable=0    failed=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3. Whilst the playbook is running,  login to the &lt;strong&gt;demo-users&lt;/strong&gt; account, assume the &lt;strong&gt;admin&lt;/strong&gt; role and you should be able to see the &lt;strong&gt;security-resources&lt;/strong&gt; stack is being updated on the CloudFormation dashboard:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-cf-stack-update.png&#34; alt=&#34;Security Resources Stack Update&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4. Once the CloudFormation stack update is complete, navigate to &lt;strong&gt;IAM &amp;gt; Groups&lt;/strong&gt; and notice on the &lt;strong&gt;Permissions&lt;/strong&gt; tab of the new &lt;strong&gt;DemoResourcesAdmins&lt;/strong&gt; group that an inline policy has been attached:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-group-policy-attached.png&#34; alt=&#34;DemoResourcesAdmins Group&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5. Click on the &lt;strong&gt;Users&lt;/strong&gt; tab and click on the &lt;strong&gt;Add Users&lt;/strong&gt; to Group button to add a user to the new group:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-add-users-group.png&#34; alt=&#34;Add User to Group&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6. Select the administrative user we &lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/#creating-an-administrator&#34;&gt;created earlier&lt;/a&gt; and click &lt;strong&gt;Add Users&lt;/strong&gt; to add the user to the group:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-select-users.png&#34; alt=&#34;Confirm Group&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/iam-users-added.png&#34; alt=&#34;Confirm Group&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;administer-the-resource-account&#34;&gt;Administer the Resource Account&lt;/h2&gt;

&lt;p&gt;To wrap up we can now verify that the user account we just added to the &lt;strong&gt;DemoResourcesAdmins&lt;/strong&gt; group in the &lt;strong&gt;demo-users&lt;/strong&gt; account can assume the &lt;strong&gt;demo-resources&lt;/strong&gt; account &lt;strong&gt;admin&lt;/strong&gt; role.&lt;/p&gt;

&lt;p&gt;1. Add a new profile to the local &lt;code&gt;~/.aws/config&lt;/code&gt; file that is configured to assume the &lt;strong&gt;demo-resources&lt;/strong&gt; admin role with MFA authentication:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;[profile demo-users-admin]&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;source_profile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;demo-users&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;role_arn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;arn:aws:iam::094411466117:role/admin&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;role_session_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;justin.menga&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;mfa_serial&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;arn:aws:iam::094411466117:mfa/justin.menga&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;region&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;us-west-2&lt;/span&gt;

&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;k&#34;&gt;[profile demo-resources-admin]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;source_profile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;demo-users&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;role_arn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;arn:aws:iam::160775127577:role/admin&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;role_session_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;justin.menga&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;mfa_serial&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;arn:aws:iam::094411466117:mfa/justin.menga&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;region&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;us-west-2&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we create a new profile called &lt;code&gt;demo-resources-admin&lt;/code&gt; and notice that the only difference compared to the &lt;code&gt;demo-users-admin&lt;/code&gt; profile is the &lt;code&gt;role_arn&lt;/code&gt; value, where the ARN of the &lt;strong&gt;admin&lt;/strong&gt; role in the &lt;strong&gt;demo-resources&lt;/strong&gt; account is referenced in the &lt;code&gt;demo-resources-admin&lt;/code&gt; profile.&lt;/p&gt;

&lt;p&gt;2. With this profile in place, you can now configure the &lt;code&gt;AWS_PROFILE&lt;/code&gt; environment variable and verify role assumption.  As before, you are able to assume the role and the playbook completes successfully with no change, as there has been no change to the security playbook configuration settings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-resources-admin
$ aws sts get-caller-identity
Enter MFA code: ******
{
    &amp;quot;Account&amp;quot;: &amp;quot;160775127577&amp;quot;,
    &amp;quot;UserId&amp;quot;: &amp;quot;AROAIQBVQLVCESGBNTIK2:justin.menga&amp;quot;,
    &amp;quot;Arn&amp;quot;: &amp;quot;arn:aws:sts::160775127577:assumed-role/admin/justin.menga&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;We created security resources in both our &lt;strong&gt;demo-users&lt;/strong&gt; and &lt;strong&gt;demo-resources&lt;/strong&gt; accounts, which provide the foundational IAM resources required to further administer each AWS account.&lt;/p&gt;

&lt;p&gt;We learned how to create a security resources playbook and represent each of our accounts as environments within the playbook, and learned how to configure the &lt;strong&gt;demo-resources&lt;/strong&gt; account to trust the &lt;strong&gt;demo-users&lt;/strong&gt; account for delegated user access control.&lt;/p&gt;

&lt;p&gt;We set up a single administrative user that is able to administer both accounts, and is required to use multi-factor authentication when using both the AWS console and AWS APIs.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;At this point you should commit your changes to the security resources playbook before continuing.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>CloudFormation Resources</title>
      <link>https://casecommons.github.io/aws-docs/cloudformation-resources/</link>
      <pubDate>Mon, 20 Feb 2017 06:39:45 +1300</pubDate>
      
      <guid>https://casecommons.github.io/aws-docs/cloudformation-resources/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation&#34;&gt;aws-cloudformation&lt;/a&gt; role includes a &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation/blob/master/templates/cfn.yml.j2&#34;&gt;CloudFormation resources template&lt;/a&gt; that is designed to define the following AWS resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;S3 bucket for CloudFormation templates&lt;/li&gt;
&lt;li&gt;S3 bucket for Lambda functions used to support CloudFormation custom resources&lt;/li&gt;
&lt;li&gt;Key Management Service (KMS) Key used for secrets management in CloudFormation stacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, without any custom configuration, the CloudFormation resources template will create each of the above resources.&lt;/p&gt;

&lt;p&gt;The template currently includes some optional configuration parameters as described below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config_cfn_lambda_remote_accounts&lt;/code&gt; - optional list of accounts that the S3 bucket for Lambda functions will be shared with.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_cfn_kms_admins&lt;/code&gt; - optional list of IAM roles that have administration level access to manage the KMS key.&lt;br /&gt;
By default the &lt;strong&gt;admin&lt;/strong&gt; role created by the &lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/&#34;&gt;security resources playbook&lt;/a&gt; is granted this access.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_cfn_kms_encrypters&lt;/code&gt; - optional list of IAM roles that have permission to encrypt ciphertext using the KMS key.&lt;br /&gt;
By default the &lt;strong&gt;admin&lt;/strong&gt; role created by the &lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/&#34;&gt;security resources playbook&lt;/a&gt; is granted this access.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_cfn_kms_decrypters&lt;/code&gt; - optional list of IAM roles that have permission to decrypt ciphertext using the KMS key.&lt;br /&gt;
By default the &lt;strong&gt;admin&lt;/strong&gt; role created by the &lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/&#34;&gt;security resources playbook&lt;/a&gt; is granted this access.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;Before commencing the tasks below, ensure you have successfully completed all tasks in &lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/&#34;&gt;Security Resources&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;creating-the-playbook&#34;&gt;Creating the Playbook&lt;/h2&gt;

&lt;p&gt;We will get started by establishing a CloudFormation resources playbook that defines CloudFormation resources for &lt;strong&gt;Demo Resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;1. Clone the &lt;a href=&#34;https://github.com/casecommons/aws-starter&#34;&gt;AWS Starter&lt;/a&gt; to a local folder called &lt;code&gt;demo-cloudformation-resources&lt;/code&gt; and re-initialise the Git repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:casecommons/aws-starter.git demo-cloudformation-resources
  Cloning into &#39;demo-cloudformation-resources&#39;...
  remote: Counting objects: 22, done.
  remote: Compressing objects: 100% (14/14), done.
  remote: Total 22 (delta 4), reused 22 (delta 4), pack-reused 0
  Receiving objects: 100% (22/22), done.
  Resolving deltas: 100% (4/4), done
$ cd demo-cloudformation-resources
$ rm -rf .git
$ git init
Initialized empty Git repository in /Users/jmenga/Source/casecommons/demo-cloudformation-resources/.git/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.  Update the &lt;code&gt;roles/requirements.yml&lt;/code&gt; file to the desired versions for each role:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# You can specify git tag, commit or branch for the version property&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@github.com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@github.com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.  Install the roles using the &lt;code&gt;ansible-galaxy&lt;/code&gt; command as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ansible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;galaxy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requirements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yml&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;force&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extracting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmenga&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;installed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extracting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmenga&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;installed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.  Modify the &lt;code&gt;group_vars/all/vars.yml&lt;/code&gt; file, which contains global settings for the playbook:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Stack Settings&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cf_stack_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;n&#34;&gt;cf_stack_template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;templates/cfn.yml.j2&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cf_stack_tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;owner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Casecommons&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CloudFormation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Resources&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;severity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;High&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ env }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pema&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@casecommons.org&lt;/span&gt;
  
&lt;span class=&#34;c1&#34;&gt;# CloudFormation settings&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# This sets a policy that disables updates to existing resources&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# This requires you to explicitly set the cf_disable_stack_policy flag to true when running the playbook&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cf_stack_policy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Effect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Deny&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Update:*&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Principal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Resource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that we reference the &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation/blob/master/templates/cfn.yml.j2&#34;&gt;templates/cfn.yml.y2 template&lt;/a&gt; that is embedded within the &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation&#34;&gt;aws-cloudformation role&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;5. Remove the local &lt;code&gt;templates&lt;/code&gt; folder, since we are using a template that is embedded within the &lt;code&gt;aws-cloudformation&lt;/code&gt; role:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf templates
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;defining-a-new-environment&#34;&gt;Defining a New Environment&lt;/h2&gt;

&lt;p&gt;We will now add a new environment called &lt;strong&gt;demo-resources&lt;/strong&gt; to the playbook, which will be used to create CloudFormation resources in the &lt;strong&gt;demo-resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;1. Modify the &lt;code&gt;inventory&lt;/code&gt; file so that it defines a single environment called &lt;strong&gt;demo-resources&lt;/strong&gt;, ensuring you specify &lt;code&gt;ansible_connection=local&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[demo-resources]
demo-resources ansible_connection=local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Remove the &lt;code&gt;group_vars/non-prod&lt;/code&gt; environment folder that is included in the starter template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf group_vars/non-prod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3. Create a file called &lt;code&gt;group_vars/demo-resources/vars.yml&lt;/code&gt;, which will hold all environment specific configuration for the &lt;strong&gt;demo-resources&lt;/strong&gt; environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p group_vars/demo-resources
$ touch group_vars/demo-resources/vars.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Finally add the &lt;code&gt;sts_role_arn&lt;/code&gt; setting to &lt;code&gt;group_vars/demo-resources/vars.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# STS role in the target AWS account to assume
sts_role_arn: &amp;quot;arn:aws:iam::094411466117:role/admin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;running-the-playbook&#34;&gt;Running the Playbook&lt;/h2&gt;

&lt;p&gt;The CloudFormation template in the &lt;code&gt;aws-cloudformation&lt;/code&gt; role will create the following resources by default:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An S3 bucket for CloudFormation templates&lt;/li&gt;
&lt;li&gt;An S3 bucket for Lambda functions used to support CloudFormation custom resources&lt;/li&gt;
&lt;li&gt;A Key Management Service (KMS) Key used for secrets management in CloudFormation stacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s now run the playbook to create these resources.&lt;/p&gt;

&lt;p&gt;1. Ensure your local AWS environment is configured to target the &lt;strong&gt;demo-resources&lt;/strong&gt; account:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-resources-admin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Run the Ansible playbook targeting the &lt;code&gt;demo-resources&lt;/code&gt; environment as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ ansible-playbook site.yml -e &lt;span class=&#34;nv&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo-resources

PLAY &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Assume Role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; *************************************************************

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : set_fact&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ******************************************************
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : checking &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; sts functions are sts_disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting empty sts_session_output result&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting sts_creds &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; legacy AWS credentials are present &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;e.g. &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Ansible Tower&lt;span class=&#34;o&#34;&gt;)]&lt;/span&gt; ***
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : assume sts role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************************************
Enter MFA code: ******
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
...
...
TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-cloudformation : &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; path fact &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; s3 upload disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; **********
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-cloudformation : configure application stack&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ************************
...
...
PLAY RECAP *********************************************************************
demo-resources             : &lt;span class=&#34;nv&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;changed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;unreachable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;failed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.  The playbook will take a few minutes to create the CloudFormation stack and associated resources.  Whilst the CloudFormation stack is being created, you can review the CloudFormation stack that was generated in the &lt;code&gt;build/&amp;lt;timestamp&amp;gt;&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tree build
build
└── 20170226195006
    ├── cloudformation-resources-config.json
    ├── cloudformation-resources-policy.json
    ├── cloudformation-resources-stack.json
    └── cloudformation-resources-stack.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following shows the &lt;code&gt;cloudformation-resources-stack.yml&lt;/code&gt; file that was generated and uploaded to CloudFormation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;AWSTemplateFormatVersion: &amp;quot;2010-09-09&amp;quot;

Description: CloudFormation Resources

Resources:
  CfnTemplatesBucket:
    Type: &amp;quot;AWS::S3::Bucket&amp;quot;
    Properties:
      BucketName:
        Fn::Sub: &amp;quot;${AWS::AccountId}-cfn-templates&amp;quot;
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: &amp;quot;${AWS::AccountId}-cfn-templates&amp;quot;
  CfnLambdaBucket:
    Type: &amp;quot;AWS::S3::Bucket&amp;quot;
    Properties:
      BucketName: 
        Fn::Sub: &amp;quot;${AWS::AccountId}-cfn-lambda&amp;quot;
      VersioningConfiguration:
        Status: &amp;quot;Enabled&amp;quot;
      Tags:
        - Key: Name
          Value:
            Fn::Sub: &amp;quot;${AWS::AccountId}-cfn-lambda&amp;quot;
  CfnMasterKey:
    Type: &amp;quot;AWS::KMS::Key&amp;quot;
    Properties:
      Description: 
        Fn::Sub: &amp;quot;Credential Store Master Key for ${AWS::StackName}&amp;quot;
      Enabled: &amp;quot;true&amp;quot;
      KeyPolicy:
        Version: &amp;quot;2012-10-17&amp;quot;
        Id: &amp;quot;key-policy&amp;quot;
        Statement: 
          - Sid: &amp;quot;Allow root account access to key&amp;quot;
            Effect: &amp;quot;Allow&amp;quot;
            Principal:
              AWS:
                Fn::Sub: &amp;quot;arn:aws:iam::${AWS::AccountId}:root&amp;quot;
            Action: &amp;quot;kms:*&amp;quot;
            Resource: &amp;quot;*&amp;quot;
          - Sid: &amp;quot;Allow administration of the key&amp;quot;
            Effect: &amp;quot;Allow&amp;quot;
            Principal:
              AWS:
              - Fn::Sub: &amp;quot;arn:aws:iam::${AWS::AccountId}:role/admin&amp;quot;
            Action:
            - &amp;quot;kms:Create*&amp;quot;
            - &amp;quot;kms:Describe*&amp;quot;
            - &amp;quot;kms:Enable*&amp;quot;
            - &amp;quot;kms:List*&amp;quot;
            - &amp;quot;kms:Put*&amp;quot;
            - &amp;quot;kms:Update*&amp;quot;
            - &amp;quot;kms:Revoke*&amp;quot;
            - &amp;quot;kms:Disable*&amp;quot;
            - &amp;quot;kms:Get*&amp;quot;
            - &amp;quot;kms:Delete*&amp;quot;
            - &amp;quot;kms:ScheduleKeyDeletion&amp;quot;
            - &amp;quot;kms:CancelKeyDeletion&amp;quot;
            Resource: &amp;quot;*&amp;quot;
          - Sid: &amp;quot;Allow encryption use&amp;quot;
            Effect: &amp;quot;Allow&amp;quot;
            Principal:
              AWS:
              - Fn::Sub: &amp;quot;arn:aws:iam::${AWS::AccountId}:role/admin&amp;quot;
            Action:
            - &amp;quot;kms:Encrypt&amp;quot;
            - &amp;quot;kms:ReEncrypt*&amp;quot;
            - &amp;quot;kms:GenerateDataKey*&amp;quot;
            - &amp;quot;kms:DescribeKey&amp;quot;
            Resource: &amp;quot;*&amp;quot;
          - Sid: &amp;quot;Allow decryption use&amp;quot;
            Effect: &amp;quot;Allow&amp;quot;
            Principal:
              AWS:
              - Fn::Sub: &amp;quot;arn:aws:iam::${AWS::AccountId}:role/admin&amp;quot;
            Action:
            - &amp;quot;kms:Decrypt&amp;quot;
            - &amp;quot;kms:DescribeKey&amp;quot;
            Resource: &amp;quot;*&amp;quot;
Outputs:
  CfnTemplatesBucketName:
    Description: &amp;quot;CloudFormation Templates Bucket Name&amp;quot;
    Value:
      Fn::Sub: &amp;quot;${CfnTemplatesBucket.DomainName}&amp;quot;
    Export:
      Name: &amp;quot;CfnTemplatesBucket&amp;quot;
  CfnTemplatesBucketURL:
    Description: &amp;quot;CloudFormation Templates Bucket URL&amp;quot;
    Value: 
      Fn::Sub: &amp;quot;${CfnTemplatesBucket.WebsiteURL}&amp;quot;
    Export:
      Name: &amp;quot;CfnTemplatesBucketURL&amp;quot;
  CfnMasterKey:
    Description: &amp;quot;CloudFormation Master Key ID&amp;quot;
    Value: 
      Fn::Sub: &amp;quot;${CfnMasterKey}&amp;quot;
    Export:
      Name: &amp;quot;CfnMasterKey&amp;quot;
  CfnMasterKeyArn:
    Description: &amp;quot;CloudFormation Master Key ARN&amp;quot;
    Value: 
      Fn::Sub: &amp;quot;${CfnMasterKey.Arn}&amp;quot;
    Export:
      Name: &amp;quot;CfnMasterKeyArn&amp;quot;
  CfnLambdaBucketName:
    Description: &amp;quot;CloudFormation Lambda Bucket Name&amp;quot;
    Value: 
      Fn::Sub: &amp;quot;${CfnLambdaBucket.DomainName}&amp;quot;
    Export:
      Name: &amp;quot;CfnLambdaBucket&amp;quot;
  CfnLambdaBucketURL:
    Description: &amp;quot;CloudFormation Lambda Bucket URL&amp;quot;
    Value: 
      Fn::Sub: &amp;quot;${CfnLambdaBucket.WebsiteURL}&amp;quot;
    Export:
      Name: &amp;quot;CfnLambdaBucketURL&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Once the playbook execution completes successfully, login to the &lt;strong&gt;demo-resources&lt;/strong&gt; account.  You should see a new CloudFormation stack called &lt;code&gt;cloudformation-resources&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/cloudformation-resources.png&#34; alt=&#34;CloudFormation Resources Stack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that two S3 buckets and a KMS key have been created.&lt;/p&gt;

&lt;p&gt;5. Select the &lt;strong&gt;CloudFormation&lt;/strong&gt; dropdown and click on &lt;strong&gt;Exports&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/cloudformation-exports.png&#34; alt=&#34;Selecting CloudFormation Exports&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6. Notice that a number of CloudFormation exports have been created by both the &lt;strong&gt;security-resources&lt;/strong&gt; and &lt;strong&gt;cloudformation-resources&lt;/strong&gt; stacks.  These exports can be referenced in other stacks by their logical &lt;strong&gt;Export Name&lt;/strong&gt; using the CloudFormation &lt;a href=&#34;http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html&#34;&gt;Fn::ImportValue intrinsic function&lt;/a&gt;, making it easier to consume these resources.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/cfn-cloudformation-exports.png&#34; alt=&#34;CloudFormation Exports&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;We created CloudFormation resources in our &lt;strong&gt;demo-resources&lt;/strong&gt; account, which provide the supporting resources for creating additional CloudFormation stacks that require features such as CloudFormation custom resources and secrets management.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;At this point you should commit your changes to the CloudFormation resources playbook before continuing.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Network Resources</title>
      <link>https://casecommons.github.io/aws-docs/network-resources/</link>
      <pubDate>Mon, 20 Feb 2017 06:39:45 +1300</pubDate>
      
      <guid>https://casecommons.github.io/aws-docs/network-resources/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation&#34;&gt;aws-cloudformation&lt;/a&gt; role includes a &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation/blob/master/templates/network.yml.j2&#34;&gt;network resources template&lt;/a&gt; that is designed to define the following AWS resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Subnets&lt;/li&gt;
&lt;li&gt;Route Tables&lt;/li&gt;
&lt;li&gt;Internet Gateways&lt;/li&gt;
&lt;li&gt;DHCP Option Sets&lt;/li&gt;
&lt;li&gt;VPC Endpoints&lt;/li&gt;
&lt;li&gt;VPC Flow Logs&lt;/li&gt;
&lt;li&gt;Route53 Public Zones&lt;/li&gt;
&lt;li&gt;Route53 Private Zones&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;Before commencing the tasks below, ensure you have successfully completed all tasks in the following sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/&#34;&gt;Security Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/cloudformation-resources/&#34;&gt;CloudFormation Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;creating-the-playbook&#34;&gt;Creating the Playbook&lt;/h2&gt;

&lt;p&gt;We will get started by establishing a network resources playbook that defines network resources for &lt;strong&gt;Demo Resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;1. Clone the &lt;a href=&#34;https://github.com/casecommons/aws-starter&#34;&gt;AWS Starter&lt;/a&gt; to a local folder called &lt;code&gt;demo-network-resources&lt;/code&gt; and re-initialise the Git repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:casecommons/aws-starter.git demo-network-resources
  Cloning into &#39;demo-network-resources&#39;...
  remote: Counting objects: 22, done.
  remote: Compressing objects: 100% (14/14), done.
  remote: Total 22 (delta 4), reused 22 (delta 4), pack-reused 0
  Receiving objects: 100% (22/22), done.
  Resolving deltas: 100% (4/4), done
$ cd demo-network-resources
$ rm -rf .git
$ git init
Initialized empty Git repository in /Users/jmenga/Source/casecommons/demo-network-resources/.git/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.  Update the &lt;code&gt;roles/requirements.yml&lt;/code&gt; file to the desired versions for each role:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# You can specify git tag, commit or branch for the version property&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@github.com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@github.com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.  Install the roles using the &lt;code&gt;ansible-galaxy&lt;/code&gt; command as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ansible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;galaxy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requirements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yml&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;force&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extracting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmenga&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;network&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;installed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extracting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmenga&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;network&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;installed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.  Modify the &lt;code&gt;group_vars/all/vars.yml&lt;/code&gt; file, which contains global settings for the playbook:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Stack Settings&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cf_stack_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;network&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;n&#34;&gt;cf_stack_template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;templates/network.yml.j2&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cf_stack_tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;owner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Casecommons&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Network&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Resources&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;severity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;High&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ env }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pema&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@casecommons.org&lt;/span&gt;
  
&lt;span class=&#34;c1&#34;&gt;# CloudFormation settings&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# This sets a policy that disables updates to existing resources&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# This requires you to explicitly set the cf_disable_stack_policy flag to true when running the playbook&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cf_stack_policy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Effect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Deny&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Update:*&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Principal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Resource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that we reference the &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation/blob/master/templates/network.yml.j2&#34;&gt;templates/network.yml.y2 template&lt;/a&gt; that is embedded within the &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation&#34;&gt;aws-cloudformation role&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;5. Remove the local &lt;code&gt;templates&lt;/code&gt; folder, since we are using a template that is embedded within the &lt;code&gt;aws-cloudformation&lt;/code&gt; role:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf templates
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;defining-a-new-environment&#34;&gt;Defining a New Environment&lt;/h2&gt;

&lt;p&gt;We will now add a new environment called &lt;strong&gt;demo-resources&lt;/strong&gt; to the playbook, which will be used to create CloudFormation resources in the &lt;strong&gt;demo-resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;1. Modify the &lt;code&gt;inventory&lt;/code&gt; file so that it defines a single environment called &lt;strong&gt;demo-resources&lt;/strong&gt;, ensuring you specify &lt;code&gt;ansible_connection=local&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[demo-resources]
demo-resources ansible_connection=local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Remove the &lt;code&gt;group_vars/non-prod&lt;/code&gt; environment folder that is included in the starter template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf group_vars/non-prod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3. Create a file called &lt;code&gt;group_vars/demo-resources/vars.yml&lt;/code&gt;, which will hold all environment specific configuration for the &lt;strong&gt;demo-resources&lt;/strong&gt; environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p group_vars/demo-resources
$ touch group_vars/demo-resources/vars.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Add the following settings to &lt;code&gt;group_vars/demo-resources/vars.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# STS role in the target AWS account to assume
sts_role_arn: &amp;quot;arn:aws:iam::160775127577:role/admin&amp;quot;

# VPC CIDR Block
config_vpc_cidr: 192.168.16.0/20

# VPC Domain Settings
# This will configure a private Route53 zone of &amp;lt;vpc-id&amp;gt;.&amp;lt;config_vpc_root_domain&amp;gt;
config_vpc_root_domain: casecommons.org

# AZ Count
config_az_count: 3

# Public Route53 Zones
config_public_domains:
  - demo.cloudhotspot.co
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we target the &lt;strong&gt;demo-resources&lt;/strong&gt; account by specifying the &lt;strong&gt;demo-resources&lt;/strong&gt; IAM &lt;strong&gt;admin&lt;/strong&gt; role in the &lt;code&gt;sts_role_arn&lt;/code&gt; variable, whilst the following settings customize the network resources that will be created:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;config_vpc_cidr&lt;/code&gt; - defines the CIDR block for the VPC that will be created.  The CIDR block must be large enough to create the required number of subnets, which can be calculated by multiplying the number of security zones (4 by default) by the number of availability zones (3 as defined by &lt;code&gt;config_az_count&lt;/code&gt;) - i.e. 12 subnets with a default size/subnet mask of /24 or 255.255.255.0.  The value of &lt;code&gt;192.168.16.0/20&lt;/code&gt; will accommodate 16 x /24 subnets, so is sufficiently sized.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;config_vpc_root_domain&lt;/code&gt; - when configured creates a Route53 private zone in the format &lt;code&gt;&amp;lt;vpc-id&amp;gt;.&amp;lt;config_vpc_root_domain&amp;gt;&lt;/code&gt;.  In this example, if the VPC ID is &lt;code&gt;vpc-1234567&lt;/code&gt; then the configuration above would create a private zone of &lt;code&gt;vpc-1234567.casecommons.org&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;config_az_count&lt;/code&gt; - defines the number of availability zones to create subnets in.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;config_public_domains&lt;/code&gt; - defines a list of public Route53 domains or zones to create&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;running-the-playbook&#34;&gt;Running the Playbook&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve defined environment settings for the &lt;strong&gt;demo-resources&lt;/strong&gt; environment, let&amp;rsquo;s run the playbook to create network resources for the environment.&lt;/p&gt;

&lt;p&gt;1. Ensure your local AWS environment is configured to target the &lt;strong&gt;demo-resources&lt;/strong&gt; account:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-resources-admin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Run the Ansible playbook targeting the &lt;code&gt;demo-resources&lt;/code&gt; environment as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ ansible-playbook site.yml -e &lt;span class=&#34;nv&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo-resources

PLAY &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Assume Role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; *************************************************************

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : set_fact&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ******************************************************
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : checking &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; sts functions are sts_disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting empty sts_session_output result&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting sts_creds &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; legacy AWS credentials are present &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;e.g. &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Ansible Tower&lt;span class=&#34;o&#34;&gt;)]&lt;/span&gt; ***
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : assume sts role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************************************
Enter MFA code: ******
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
...
...
TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-cloudformation : &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; path fact &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; s3 upload disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; **********
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-cloudformation : configure application stack&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ************************
...
...
PLAY RECAP *********************************************************************
demo-resources             : &lt;span class=&#34;nv&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;changed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;unreachable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;failed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.  The playbook will take a few minutes to create the CloudFormation stack and associated resources.  Whilst the CloudFormation stack is being created, you can review the CloudFormation stack that was generated in the &lt;code&gt;build/&amp;lt;timestamp&amp;gt;&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tree build
build
└── 20170226211011
    ├── network-resources-config.json
    ├── network-resources-policy.json
    ├── network-resources-stack.json
    └── network-resources-stack.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following shows the &lt;code&gt;network-resources-stack.yml&lt;/code&gt; file that was generated and uploaded to CloudFormation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;AWSTemplateFormatVersion: &amp;quot;2010-09-09&amp;quot;

Description: Core Network Resources
    
Resources:
  Vpc:
    Type: &amp;quot;AWS::EC2::VPC&amp;quot;
    Properties:
      CidrBlock: &amp;quot;192.168.16.0/20&amp;quot;
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;default-vpc&amp;quot;
  InternetGateway:
    Type: &amp;quot;AWS::EC2::InternetGateway&amp;quot;
    Properties: 
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;default-igw&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;public&amp;quot;
  InternetGatewayAttachment:
    Type: &amp;quot;AWS::EC2::VPCGatewayAttachment&amp;quot;
    Properties:
      InternetGatewayId: { &amp;quot;Ref&amp;quot;: &amp;quot;InternetGateway&amp;quot; }
      VpcId:
        Ref: Vpc
  PublicRouteTable:
    Type: &amp;quot;AWS::EC2::RouteTable&amp;quot;
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;default-public-route-table&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;public&amp;quot;
  PrivateRouteTable:
    Type: &amp;quot;AWS::EC2::RouteTable&amp;quot;
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;default-private-route-table&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;mixed&amp;quot;
  PublicDefaultRoute:
    Type: &amp;quot;AWS::EC2::Route&amp;quot;
    DependsOn: &amp;quot;InternetGatewayAttachment&amp;quot;
    Properties:
      DestinationCidrBlock: &amp;quot;0.0.0.0/0&amp;quot;
      GatewayId: { &amp;quot;Ref&amp;quot;: &amp;quot;InternetGateway&amp;quot; }
      RouteTableId: { &amp;quot;Ref&amp;quot;: &amp;quot;PublicRouteTable&amp;quot; }
  S3Endpoint:
    Type: &amp;quot;AWS::EC2::VPCEndpoint&amp;quot;
    Properties:
      RouteTableIds: 
        - { &amp;quot;Ref&amp;quot; : &amp;quot;PublicRouteTable&amp;quot; }
        - { &amp;quot;Ref&amp;quot; : &amp;quot;PrivateRouteTable&amp;quot; }
      ServiceName: 
        Fn::Sub: &amp;quot;com.amazonaws.${AWS::Region}.s3&amp;quot;
      VpcId:
        Ref: Vpc
  VpcFlowLog:
    Type: &amp;quot;AWS::EC2::FlowLog&amp;quot;
    Properties:
      DeliverLogsPermissionArn:
        Fn::Sub: &amp;quot;arn:aws:iam::${AWS::AccountId}:role/${VpcFlowLogRole}&amp;quot;
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/vpc/FlowLog
      ResourceId: { &amp;quot;Ref&amp;quot;: &amp;quot;Vpc&amp;quot; }
      ResourceType: &amp;quot;VPC&amp;quot;
      TrafficType: &amp;quot;ALL&amp;quot;
  VpcFlowLogRole:
    Type: &amp;quot;AWS::IAM::Role&amp;quot;
    Properties:
      AssumeRolePolicyDocument:
        Version: &amp;quot;2012-10-17&amp;quot;
        Statement:
          - Effect: &amp;quot;Allow&amp;quot;
            Principal: 
              Service: [ &amp;quot;vpc-flow-logs.amazonaws.com&amp;quot; ]
            Action: [ &amp;quot;sts:AssumeRole&amp;quot; ]
      Path: &amp;quot;/&amp;quot;
      Policies:
      - PolicyName: CloudWatchLogs
        PolicyDocument:
          Version: &amp;quot;2012-10-17&amp;quot;
          Statement:
            - Effect: Allow
              Action:
              - &amp;quot;logs:CreateLogGroup&amp;quot;
              - &amp;quot;logs:CreateLogStream&amp;quot;
              - &amp;quot;logs:PutLogEvents&amp;quot;
              - &amp;quot;logs:DescribeLogGroups&amp;quot;
              - &amp;quot;logs:DescribeLogStreams&amp;quot;
              Resource:
                Fn::Sub: &amp;quot;arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}/vpc/FlowLog*&amp;quot;
  VpcFlowLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/vpc/FlowLog
      RetentionInDays: 7
  VpcPrivateZone:
    Type: &amp;quot;AWS::Route53::HostedZone&amp;quot;
    Properties: 
      HostedZoneConfig: 
        Comment: 
          Fn::Sub: &amp;quot;${Vpc} private zone&amp;quot;
      HostedZoneTags:
        - Key: &amp;quot;Name&amp;quot;
          Value: 
            Fn::Sub: &amp;quot;${Vpc}.casecommons.org&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;mixed&amp;quot;
      Name:
        Fn::Sub: &amp;quot;${Vpc}.casecommons.org&amp;quot;
      VPCs:
        - VPCId: { &amp;quot;Ref&amp;quot;: &amp;quot;Vpc&amp;quot; }
          VPCRegion: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot; }
  DemoCloudhotspotCoZone:
      Type: &amp;quot;AWS::Route53::HostedZone&amp;quot;
      Properties: 
        HostedZoneConfig: 
          Comment: &amp;quot;demo.cloudhotspot.co zone&amp;quot;
        HostedZoneTags:
          - Key: &amp;quot;Name&amp;quot;
            Value: &amp;quot;demo.cloudhotspot.co&amp;quot;
          - Key: &amp;quot;org:security:level&amp;quot;
            Value: &amp;quot;mixed&amp;quot;
        Name: &amp;quot;demo.cloudhotspot.co&amp;quot;
  PublicSubnetA:
    Type: &amp;quot;AWS::EC2::Subnet&amp;quot;
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: &amp;quot;192.168.16.0/24&amp;quot;
      AvailabilityZone: 
        Fn::Sub: &amp;quot;${AWS::Region}a&amp;quot;
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;public-a&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;public&amp;quot;
  PublicSubnetARouting:
    Type: &amp;quot;AWS::EC2::SubnetRouteTableAssociation&amp;quot;
    Properties:
      RouteTableId: { &amp;quot;Ref&amp;quot;: &amp;quot;PublicRouteTable&amp;quot; }
      SubnetId: { &amp;quot;Ref&amp;quot;: &amp;quot;PublicSubnetA&amp;quot; }
  PublicSubnetB:
    Type: &amp;quot;AWS::EC2::Subnet&amp;quot;
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: &amp;quot;192.168.17.0/24&amp;quot;
      AvailabilityZone: 
        Fn::Sub: &amp;quot;${AWS::Region}b&amp;quot;
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;public-b&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;public&amp;quot;
  PublicSubnetBRouting:
    Type: &amp;quot;AWS::EC2::SubnetRouteTableAssociation&amp;quot;
    Properties:
      RouteTableId: { &amp;quot;Ref&amp;quot;: &amp;quot;PublicRouteTable&amp;quot; }
      SubnetId: { &amp;quot;Ref&amp;quot;: &amp;quot;PublicSubnetB&amp;quot; }
  PublicSubnetC:
    Type: &amp;quot;AWS::EC2::Subnet&amp;quot;
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: &amp;quot;192.168.18.0/24&amp;quot;
      AvailabilityZone: 
        Fn::Sub: &amp;quot;${AWS::Region}c&amp;quot;
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;public-c&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;public&amp;quot;
  PublicSubnetCRouting:
    Type: &amp;quot;AWS::EC2::SubnetRouteTableAssociation&amp;quot;
    Properties:
      RouteTableId: { &amp;quot;Ref&amp;quot;: &amp;quot;PublicRouteTable&amp;quot; }
      SubnetId: { &amp;quot;Ref&amp;quot;: &amp;quot;PublicSubnetC&amp;quot; }
  MediumSubnetA:
    Type: &amp;quot;AWS::EC2::Subnet&amp;quot;
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: &amp;quot;192.168.19.0/24&amp;quot;
      AvailabilityZone: 
        Fn::Sub: &amp;quot;${AWS::Region}a&amp;quot;
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;medium-a&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;medium&amp;quot;
  MediumSubnetARouting:
    Type: &amp;quot;AWS::EC2::SubnetRouteTableAssociation&amp;quot;
    Properties:
      RouteTableId: { &amp;quot;Ref&amp;quot;: &amp;quot;PrivateRouteTable&amp;quot; }
      SubnetId: { &amp;quot;Ref&amp;quot;: &amp;quot;MediumSubnetA&amp;quot; }
  MediumSubnetB:
    Type: &amp;quot;AWS::EC2::Subnet&amp;quot;
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: &amp;quot;192.168.20.0/24&amp;quot;
      AvailabilityZone: 
        Fn::Sub: &amp;quot;${AWS::Region}b&amp;quot;
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;medium-b&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;medium&amp;quot;
  MediumSubnetBRouting:
    Type: &amp;quot;AWS::EC2::SubnetRouteTableAssociation&amp;quot;
    Properties:
      RouteTableId: { &amp;quot;Ref&amp;quot;: &amp;quot;PrivateRouteTable&amp;quot; }
      SubnetId: { &amp;quot;Ref&amp;quot;: &amp;quot;MediumSubnetB&amp;quot; }
  MediumSubnetC:
    Type: &amp;quot;AWS::EC2::Subnet&amp;quot;
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: &amp;quot;192.168.21.0/24&amp;quot;
      AvailabilityZone: 
        Fn::Sub: &amp;quot;${AWS::Region}c&amp;quot;
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;medium-c&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;medium&amp;quot;
  MediumSubnetCRouting:
    Type: &amp;quot;AWS::EC2::SubnetRouteTableAssociation&amp;quot;
    Properties:
      RouteTableId: { &amp;quot;Ref&amp;quot;: &amp;quot;PrivateRouteTable&amp;quot; }
      SubnetId: { &amp;quot;Ref&amp;quot;: &amp;quot;MediumSubnetC&amp;quot; }
  HighSubnetA:
    Type: &amp;quot;AWS::EC2::Subnet&amp;quot;
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: &amp;quot;192.168.22.0/24&amp;quot;
      AvailabilityZone: 
        Fn::Sub: &amp;quot;${AWS::Region}a&amp;quot;
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;high-a&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;high&amp;quot;
  HighSubnetARouting:
    Type: &amp;quot;AWS::EC2::SubnetRouteTableAssociation&amp;quot;
    Properties:
      RouteTableId: { &amp;quot;Ref&amp;quot;: &amp;quot;PrivateRouteTable&amp;quot; }
      SubnetId: { &amp;quot;Ref&amp;quot;: &amp;quot;HighSubnetA&amp;quot; }
  HighSubnetB:
    Type: &amp;quot;AWS::EC2::Subnet&amp;quot;
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: &amp;quot;192.168.23.0/24&amp;quot;
      AvailabilityZone: 
        Fn::Sub: &amp;quot;${AWS::Region}b&amp;quot;
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;high-b&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;high&amp;quot;
  HighSubnetBRouting:
    Type: &amp;quot;AWS::EC2::SubnetRouteTableAssociation&amp;quot;
    Properties:
      RouteTableId: { &amp;quot;Ref&amp;quot;: &amp;quot;PrivateRouteTable&amp;quot; }
      SubnetId: { &amp;quot;Ref&amp;quot;: &amp;quot;HighSubnetB&amp;quot; }
  HighSubnetC:
    Type: &amp;quot;AWS::EC2::Subnet&amp;quot;
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: &amp;quot;192.168.24.0/24&amp;quot;
      AvailabilityZone: 
        Fn::Sub: &amp;quot;${AWS::Region}c&amp;quot;
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;high-c&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;high&amp;quot;
  HighSubnetCRouting:
    Type: &amp;quot;AWS::EC2::SubnetRouteTableAssociation&amp;quot;
    Properties:
      RouteTableId: { &amp;quot;Ref&amp;quot;: &amp;quot;PrivateRouteTable&amp;quot; }
      SubnetId: { &amp;quot;Ref&amp;quot;: &amp;quot;HighSubnetC&amp;quot; }
  ManagementSubnetA:
    Type: &amp;quot;AWS::EC2::Subnet&amp;quot;
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: &amp;quot;192.168.25.0/24&amp;quot;
      AvailabilityZone: 
        Fn::Sub: &amp;quot;${AWS::Region}a&amp;quot;
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;management-a&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;management&amp;quot;
  ManagementSubnetARouting:
    Type: &amp;quot;AWS::EC2::SubnetRouteTableAssociation&amp;quot;
    Properties:
      RouteTableId: { &amp;quot;Ref&amp;quot;: &amp;quot;PrivateRouteTable&amp;quot; }
      SubnetId: { &amp;quot;Ref&amp;quot;: &amp;quot;ManagementSubnetA&amp;quot; }
  ManagementSubnetB:
    Type: &amp;quot;AWS::EC2::Subnet&amp;quot;
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: &amp;quot;192.168.26.0/24&amp;quot;
      AvailabilityZone: 
        Fn::Sub: &amp;quot;${AWS::Region}b&amp;quot;
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;management-b&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;management&amp;quot;
  ManagementSubnetBRouting:
    Type: &amp;quot;AWS::EC2::SubnetRouteTableAssociation&amp;quot;
    Properties:
      RouteTableId: { &amp;quot;Ref&amp;quot;: &amp;quot;PrivateRouteTable&amp;quot; }
      SubnetId: { &amp;quot;Ref&amp;quot;: &amp;quot;ManagementSubnetB&amp;quot; }
  ManagementSubnetC:
    Type: &amp;quot;AWS::EC2::Subnet&amp;quot;
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: &amp;quot;192.168.27.0/24&amp;quot;
      AvailabilityZone: 
        Fn::Sub: &amp;quot;${AWS::Region}c&amp;quot;
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;management-c&amp;quot;
        - Key: &amp;quot;org:security:level&amp;quot;
          Value: &amp;quot;management&amp;quot;
  ManagementSubnetCRouting:
    Type: &amp;quot;AWS::EC2::SubnetRouteTableAssociation&amp;quot;
    Properties:
      RouteTableId: { &amp;quot;Ref&amp;quot;: &amp;quot;PrivateRouteTable&amp;quot; }
      SubnetId: { &amp;quot;Ref&amp;quot;: &amp;quot;ManagementSubnetC&amp;quot; }


Outputs:
  DefaultVpcId:
    Description: &amp;quot;Default VPC Identifier&amp;quot;
    Value:
      Ref: Vpc
    Export:
      Name: &amp;quot;DefaultVpcId&amp;quot;
  DefaultVpcCidr:
    Description: &amp;quot;Default VPC CIDR Block&amp;quot;
    Value: &amp;quot;192.168.16.0/20&amp;quot;
    Export:
      Name: &amp;quot;DefaultVpcCidr&amp;quot;
  DefaultVpcDnsServer:
    Description: &amp;quot;Default VPC AWS Provided DNS Server IP Address&amp;quot;
    Value: &amp;quot;192.168.16.2&amp;quot;
    Export:
      Name: &amp;quot;DefaultVpcDnsServer&amp;quot;
  DefaultVpcDomain:
    Description: &amp;quot;Default VPC Domain&amp;quot;
    Value: 
      Fn::Sub: &amp;quot;${Vpc}.casecommons.org&amp;quot;
    Export:
      Name: &amp;quot;DefaultVpcDomain&amp;quot;
  DefaultVpcZone:
    Description: &amp;quot;Default VPC Zone&amp;quot;
    Value: 
      Fn::Sub: &amp;quot;${Vpc}.casecommons.org.&amp;quot;
    Export:
      Name: &amp;quot;DefaultVpcZone&amp;quot;
  DefaultPublicSubnetA:
    Description: &amp;quot;DefaultPublic Subnet Availability Zone A&amp;quot;
    Value: { &amp;quot;Ref&amp;quot;: &amp;quot;PublicSubnetA&amp;quot; }
    Export:
      Name: &amp;quot;DefaultPublicSubnetA&amp;quot;
  DefaultPublicSubnetACidr:
    Description: &amp;quot;Default Public Subnet  Availability Zone A CIDR&amp;quot;
    Value: &amp;quot;192.168.16.0/24&amp;quot;
    Export:
      Name: &amp;quot;DefaultPublicSubnetACidr&amp;quot;
  DefaultPublicSubnetB:
    Description: &amp;quot;DefaultPublic Subnet Availability Zone B&amp;quot;
    Value: { &amp;quot;Ref&amp;quot;: &amp;quot;PublicSubnetB&amp;quot; }
    Export:
      Name: &amp;quot;DefaultPublicSubnetB&amp;quot;
  DefaultPublicSubnetBCidr:
    Description: &amp;quot;Default Public Subnet  Availability Zone B CIDR&amp;quot;
    Value: &amp;quot;192.168.17.0/24&amp;quot;
    Export:
      Name: &amp;quot;DefaultPublicSubnetBCidr&amp;quot;
  DefaultPublicSubnetC:
    Description: &amp;quot;DefaultPublic Subnet Availability Zone C&amp;quot;
    Value: { &amp;quot;Ref&amp;quot;: &amp;quot;PublicSubnetC&amp;quot; }
    Export:
      Name: &amp;quot;DefaultPublicSubnetC&amp;quot;
  DefaultPublicSubnetCCidr:
    Description: &amp;quot;Default Public Subnet  Availability Zone C CIDR&amp;quot;
    Value: &amp;quot;192.168.18.0/24&amp;quot;
    Export:
      Name: &amp;quot;DefaultPublicSubnetCCidr&amp;quot;
  DefaultMediumSubnetA:
    Description: &amp;quot;DefaultMedium Subnet Availability Zone A&amp;quot;
    Value: { &amp;quot;Ref&amp;quot;: &amp;quot;MediumSubnetA&amp;quot; }
    Export:
      Name: &amp;quot;DefaultMediumSubnetA&amp;quot;
  DefaultMediumSubnetACidr:
    Description: &amp;quot;Default Medium Subnet  Availability Zone A CIDR&amp;quot;
    Value: &amp;quot;192.168.19.0/24&amp;quot;
    Export:
      Name: &amp;quot;DefaultMediumSubnetACidr&amp;quot;
  DefaultMediumSubnetB:
    Description: &amp;quot;DefaultMedium Subnet Availability Zone B&amp;quot;
    Value: { &amp;quot;Ref&amp;quot;: &amp;quot;MediumSubnetB&amp;quot; }
    Export:
      Name: &amp;quot;DefaultMediumSubnetB&amp;quot;
  DefaultMediumSubnetBCidr:
    Description: &amp;quot;Default Medium Subnet  Availability Zone B CIDR&amp;quot;
    Value: &amp;quot;192.168.20.0/24&amp;quot;
    Export:
      Name: &amp;quot;DefaultMediumSubnetBCidr&amp;quot;
  DefaultMediumSubnetC:
    Description: &amp;quot;DefaultMedium Subnet Availability Zone C&amp;quot;
    Value: { &amp;quot;Ref&amp;quot;: &amp;quot;MediumSubnetC&amp;quot; }
    Export:
      Name: &amp;quot;DefaultMediumSubnetC&amp;quot;
  DefaultMediumSubnetCCidr:
    Description: &amp;quot;Default Medium Subnet  Availability Zone C CIDR&amp;quot;
    Value: &amp;quot;192.168.21.0/24&amp;quot;
    Export:
      Name: &amp;quot;DefaultMediumSubnetCCidr&amp;quot;
  DefaultHighSubnetA:
    Description: &amp;quot;DefaultHigh Subnet Availability Zone A&amp;quot;
    Value: { &amp;quot;Ref&amp;quot;: &amp;quot;HighSubnetA&amp;quot; }
    Export:
      Name: &amp;quot;DefaultHighSubnetA&amp;quot;
  DefaultHighSubnetACidr:
    Description: &amp;quot;Default High Subnet  Availability Zone A CIDR&amp;quot;
    Value: &amp;quot;192.168.22.0/24&amp;quot;
    Export:
      Name: &amp;quot;DefaultHighSubnetACidr&amp;quot;
  DefaultHighSubnetB:
    Description: &amp;quot;DefaultHigh Subnet Availability Zone B&amp;quot;
    Value: { &amp;quot;Ref&amp;quot;: &amp;quot;HighSubnetB&amp;quot; }
    Export:
      Name: &amp;quot;DefaultHighSubnetB&amp;quot;
  DefaultHighSubnetBCidr:
    Description: &amp;quot;Default High Subnet  Availability Zone B CIDR&amp;quot;
    Value: &amp;quot;192.168.23.0/24&amp;quot;
    Export:
      Name: &amp;quot;DefaultHighSubnetBCidr&amp;quot;
  DefaultHighSubnetC:
    Description: &amp;quot;DefaultHigh Subnet Availability Zone C&amp;quot;
    Value: { &amp;quot;Ref&amp;quot;: &amp;quot;HighSubnetC&amp;quot; }
    Export:
      Name: &amp;quot;DefaultHighSubnetC&amp;quot;
  DefaultHighSubnetCCidr:
    Description: &amp;quot;Default High Subnet  Availability Zone C CIDR&amp;quot;
    Value: &amp;quot;192.168.24.0/24&amp;quot;
    Export:
      Name: &amp;quot;DefaultHighSubnetCCidr&amp;quot;
  DefaultManagementSubnetA:
    Description: &amp;quot;DefaultManagement Subnet Availability Zone A&amp;quot;
    Value: { &amp;quot;Ref&amp;quot;: &amp;quot;ManagementSubnetA&amp;quot; }
    Export:
      Name: &amp;quot;DefaultManagementSubnetA&amp;quot;
  DefaultManagementSubnetACidr:
    Description: &amp;quot;Default Management Subnet  Availability Zone A CIDR&amp;quot;
    Value: &amp;quot;192.168.25.0/24&amp;quot;
    Export:
      Name: &amp;quot;DefaultManagementSubnetACidr&amp;quot;
  DefaultManagementSubnetB:
    Description: &amp;quot;DefaultManagement Subnet Availability Zone B&amp;quot;
    Value: { &amp;quot;Ref&amp;quot;: &amp;quot;ManagementSubnetB&amp;quot; }
    Export:
      Name: &amp;quot;DefaultManagementSubnetB&amp;quot;
  DefaultManagementSubnetBCidr:
    Description: &amp;quot;Default Management Subnet  Availability Zone B CIDR&amp;quot;
    Value: &amp;quot;192.168.26.0/24&amp;quot;
    Export:
      Name: &amp;quot;DefaultManagementSubnetBCidr&amp;quot;
  DefaultManagementSubnetC:
    Description: &amp;quot;DefaultManagement Subnet Availability Zone C&amp;quot;
    Value: { &amp;quot;Ref&amp;quot;: &amp;quot;ManagementSubnetC&amp;quot; }
    Export:
      Name: &amp;quot;DefaultManagementSubnetC&amp;quot;
  DefaultManagementSubnetCCidr:
    Description: &amp;quot;Default Management Subnet  Availability Zone C CIDR&amp;quot;
    Value: &amp;quot;192.168.27.0/24&amp;quot;
    Export:
      Name: &amp;quot;DefaultManagementSubnetCCidr&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Once the playbook execution completes successfully, login to the &lt;strong&gt;demo-resources&lt;/strong&gt; account.  You should see a new CloudFormation stack called &lt;code&gt;network-resources&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/network-resources.png&#34; alt=&#34;Network Resources Stack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that a large number of network resources have been created.&lt;/p&gt;

&lt;p&gt;5. If you select the &lt;strong&gt;CloudFormation&lt;/strong&gt; dropdown and click on &lt;strong&gt;Exports&lt;/strong&gt;, notice that a large number of CloudFormation exports have been created by the &lt;strong&gt;network-resources&lt;/strong&gt; stack.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/network-resources-exports.png&#34; alt=&#34;CloudFormation Exports&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6. If you open the VPC dashboard and select &lt;strong&gt;Subnets&lt;/strong&gt;, a large number of subnets have now been created:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/network-subnets.png&#34; alt=&#34;Network Subnets&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that /24 subnets for availability zones A, B and C have been created in the &lt;strong&gt;public&lt;/strong&gt;, &lt;strong&gt;medium&lt;/strong&gt;, &lt;strong&gt;high&lt;/strong&gt; and &lt;strong&gt;management&lt;/strong&gt; security zones.&lt;/p&gt;

&lt;p&gt;7. If you open the Route53 dashboard and select &lt;strong&gt;Hosted zones&lt;/strong&gt;, two Route53 zones have been created:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/network-domains.png&#34; alt=&#34;Route53 Domains&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that a public Route53 zone for &lt;code&gt;demo.cloudhotspot.co&lt;/code&gt; has been created, along with a private Route53 zone for &lt;code&gt;&amp;lt;vpc-id&amp;gt;.casecommons.org&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;We created network resources in our &lt;strong&gt;demo-resources&lt;/strong&gt; account, which provide the supporting network infrastructure for creating CloudFormation stacks for our applications.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;At this point you should commit your changes to the network resources playbook before continuing.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>EC2 Container Registry Resources</title>
      <link>https://casecommons.github.io/aws-docs/ecr-resources/</link>
      <pubDate>Mon, 20 Feb 2017 06:39:45 +1300</pubDate>
      
      <guid>https://casecommons.github.io/aws-docs/ecr-resources/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation&#34;&gt;aws-cloudformation&lt;/a&gt; role includes a &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation/blob/master/templates/ecr.yml.j2&#34;&gt;EC2 container registry template&lt;/a&gt; that is designed to define the following AWS resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EC2 Container Registry (ECR) repositories&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;Before commencing the tasks below, ensure you have successfully completed all tasks in the following sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/&#34;&gt;Security Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/cloudformation-resources/&#34;&gt;CloudFormation Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;creating-the-playbook&#34;&gt;Creating the Playbook&lt;/h2&gt;

&lt;p&gt;We will get started by establishing a network resources playbook that defines network resources for &lt;strong&gt;Demo Resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;1. Clone the &lt;a href=&#34;https://github.com/casecommons/aws-starter&#34;&gt;AWS Starter&lt;/a&gt; to a local folder called &lt;code&gt;demo-ecr-resources&lt;/code&gt; and re-initialise the Git repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:casecommons/aws-starter.git demo-ecr-resources
  Cloning into &#39;demo-ecr-resources&#39;...
  remote: Counting objects: 22, done.
  remote: Compressing objects: 100% (14/14), done.
  remote: Total 22 (delta 4), reused 22 (delta 4), pack-reused 0
  Receiving objects: 100% (22/22), done.
  Resolving deltas: 100% (4/4), done
$ cd demo-ecr-resources
$ rm -rf .git
$ git init
Initialized empty Git repository in /Users/jmenga/Source/casecommons/demo-ecr-resources/.git/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.  Update the &lt;code&gt;roles/requirements.yml&lt;/code&gt; file to the desired versions for each role:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# You can specify git tag, commit or branch for the version property&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@github.com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@github.com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.  Install the roles using the &lt;code&gt;ansible-galaxy&lt;/code&gt; command as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ansible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;galaxy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requirements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yml&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;force&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extracting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmenga&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ecr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;installed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extracting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmenga&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ecr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;installed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.  Modify the &lt;code&gt;group_vars/all/vars.yml&lt;/code&gt; file, which contains global settings for the playbook:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Stack Settings&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cf_stack_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ecr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;n&#34;&gt;cf_stack_template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;templates/ecr.yml.j2&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cf_stack_tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;owner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Casecommons&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ECR&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Resources&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;severity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;High&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ env }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pema&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@casecommons.org&lt;/span&gt;
  
&lt;span class=&#34;c1&#34;&gt;# CloudFormation settings&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# This sets a policy that disables updates to existing resources&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# This requires you to explicitly set the cf_disable_stack_policy flag to true when running the playbook&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cf_stack_policy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Effect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Deny&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Update:*&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Principal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Resource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that we reference the &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation/blob/master/templates/ecr.yml.j2&#34;&gt;templates/ecr.yml.y2 template&lt;/a&gt; that is embedded within the &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation&#34;&gt;aws-cloudformation role&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;5. Remove the local &lt;code&gt;templates&lt;/code&gt; folder, since we are using a template that is embedded within the &lt;code&gt;aws-cloudformation&lt;/code&gt; role:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf templates
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;defining-a-new-environment&#34;&gt;Defining a New Environment&lt;/h2&gt;

&lt;p&gt;We will now add a new environment called &lt;strong&gt;demo-resources&lt;/strong&gt; to the playbook, which will be used to create CloudFormation resources in the &lt;strong&gt;demo-resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;1. Modify the &lt;code&gt;inventory&lt;/code&gt; file so that it defines a single environment called &lt;strong&gt;demo-resources&lt;/strong&gt;, ensuring you specify &lt;code&gt;ansible_connection=local&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[demo-resources]
demo-resources ansible_connection=local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Remove the &lt;code&gt;group_vars/non-prod&lt;/code&gt; environment folder that is included in the starter template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf group_vars/non-prod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3. Create a file called &lt;code&gt;group_vars/demo-resources/vars.yml&lt;/code&gt;, which will hold all environment specific configuration for the &lt;strong&gt;demo-resources&lt;/strong&gt; environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p group_vars/demo-resources
$ touch group_vars/demo-resources/vars.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Add the following settings to &lt;code&gt;group_vars/demo-resources/vars.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# STS role to assume
sts_role_arn: arn:aws:iam::160775127577:role/admin

# Repositories
config_ecr_repos:
  casecommons/intake: {}
  casecommons/intake-api: {}
  casecommons/intake-base: {}
  casecommons/elasticsearch: {}
  casecommons/nginx: {}
  casecommons/squid: {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we target the &lt;strong&gt;demo-resources&lt;/strong&gt; account by specifying the &lt;strong&gt;demo-resources&lt;/strong&gt; IAM &lt;strong&gt;admin&lt;/strong&gt; role in the &lt;code&gt;sts_role_arn&lt;/code&gt; variable, whilst the &lt;code&gt;config_ecr_repos&lt;/code&gt; dicitionary defines the ECR repositories resources that will be created:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;casecommons/intake&lt;/code&gt; - repository for the Casecommons Intake Accelerator application image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;casecommons/intake-api&lt;/code&gt; - repository for the Casecommons Intake API application image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;casecommons/intake-base&lt;/code&gt; - repository for the Casecommons base image used for the Intake Accelerator and Intake API application images&lt;/li&gt;
&lt;li&gt;&lt;code&gt;casecommons/elasticsearch&lt;/code&gt; - repository for the Casecommons ElasticSearch image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;casecommons/nginx&lt;/code&gt; - repository for the Casecommons Nginx image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;casecommons/squid&lt;/code&gt; - repository for the Casecommons Squid proxy image&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;running-the-playbook&#34;&gt;Running the Playbook&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve defined environment settings for the &lt;strong&gt;demo-resources&lt;/strong&gt; environment, let&amp;rsquo;s run the playbook to create ECR repository resources for the environment.&lt;/p&gt;

&lt;p&gt;1. Ensure your local AWS environment is configured to target the &lt;strong&gt;demo-resources&lt;/strong&gt; account:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-resources-admin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Run the Ansible playbook targeting the &lt;code&gt;demo-resources&lt;/code&gt; environment as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ ansible-playbook site.yml -e &lt;span class=&#34;nv&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo-resources

PLAY &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Assume Role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; *************************************************************

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : set_fact&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ******************************************************
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : checking &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; sts functions are sts_disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting empty sts_session_output result&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting sts_creds &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; legacy AWS credentials are present &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;e.g. &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Ansible Tower&lt;span class=&#34;o&#34;&gt;)]&lt;/span&gt; ***
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : assume sts role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************************************
Enter MFA code: ******
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
...
...
TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-cloudformation : &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; path fact &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; s3 upload disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; **********
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-cloudformation : configure application stack&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ************************
...
...
PLAY RECAP *********************************************************************
demo-resources             : &lt;span class=&#34;nv&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;changed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;unreachable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;failed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.  The playbook will take a few minutes to create the CloudFormation stack and associated resources.  Whilst the CloudFormation stack is being created, you can review the CloudFormation stack that was generated in the &lt;code&gt;build/&amp;lt;timestamp&amp;gt;&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tree build
build
└── 20170226213833
    ├── ecr-resources-config.json
    ├── ecr-resources-policy.json
    ├── ecr-resources-stack.json
    └── ecr-resources-stack.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following shows the &lt;code&gt;ecr-resources-stack.yml&lt;/code&gt; file that was generated and uploaded to CloudFormation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;AWSTemplateFormatVersion: &amp;quot;2010-09-09&amp;quot;

Description: ECR Repositories

Resources:
  CasecommonsSquid:
    Type: &amp;quot;AWS::ECR::Repository&amp;quot;
    Properties:
      RepositoryName: &amp;quot;casecommons/squid&amp;quot;
  CasecommonsIntakeBase:
    Type: &amp;quot;AWS::ECR::Repository&amp;quot;
    Properties:
      RepositoryName: &amp;quot;casecommons/intake-base&amp;quot;
  CasecommonsIntakeApi:
    Type: &amp;quot;AWS::ECR::Repository&amp;quot;
    Properties:
      RepositoryName: &amp;quot;casecommons/intake-api&amp;quot;
  CasecommonsNginx:
    Type: &amp;quot;AWS::ECR::Repository&amp;quot;
    Properties:
      RepositoryName: &amp;quot;casecommons/nginx&amp;quot;
  CasecommonsElasticsearch:
    Type: &amp;quot;AWS::ECR::Repository&amp;quot;
    Properties:
      RepositoryName: &amp;quot;casecommons/elasticsearch&amp;quot;
  CasecommonsIntake:
    Type: &amp;quot;AWS::ECR::Repository&amp;quot;
    Properties:
      RepositoryName: &amp;quot;casecommons/intake&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Once the playbook execution completes successfully, login to the &lt;strong&gt;demo-resources&lt;/strong&gt; account.  You should see a new CloudFormation stack called &lt;code&gt;ecr-resources&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/ecr-resources.png&#34; alt=&#34;ECR Resources Stack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that each of the specified ECR repositories have been created.&lt;/p&gt;

&lt;p&gt;5. If you open the ECS dashboard and select &lt;strong&gt;Repositories&lt;/strong&gt;, you can see each of the created ECR Repositories:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/ecr-repositories.png&#34; alt=&#34;ECR Repositories&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6. Select the &lt;strong&gt;casecommons/squid&lt;/strong&gt; repository, which will display details about this repository:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/ecr-squid-repository.png&#34; alt=&#34;ECR Repositories&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice the &lt;strong&gt;Repository URI&lt;/strong&gt; setting for the &lt;strong&gt;squid&lt;/strong&gt; repository - this is the fully qualified name you should use when referencing images in this repository and is comprised of three parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;160775127577.dkr.ecr.us-west-2.amazonaws.com&lt;/code&gt; - the Docker registry name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;casecommons&lt;/code&gt; - the Docker organization name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;squid&lt;/code&gt; - the Docker repository name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need to specify the &lt;strong&gt;Repository URI&lt;/strong&gt; whenever we tag and publish images for this repository.&lt;/p&gt;

&lt;h2 id=&#34;publishing-docker-images&#34;&gt;Publishing Docker Images&lt;/h2&gt;

&lt;p&gt;In this section we will demonstrate how to publish a Docker image to one of our newly created ECR repositories.  We will create an image for the &lt;strong&gt;casecommons/squid&lt;/strong&gt; repository using the Docker squid image that is defined at &lt;a href=&#34;https://github.com/casecommons/docker-squid&#34;&gt;https://github.com/casecommons/docker-squid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;1. Clone the Casecommons squid repository to your local environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:Casecommons/docker-squid.git
Cloning into &#39;docker-squid&#39;...
remote: Counting objects: 62, done.
remote: Total 62 (delta 0), reused 0 (delta 0), pack-reused 62
Receiving objects: 100% (62/62), 12.48 KiB | 0 bytes/s, done.
Resolving deltas: 100% (16/16), done.
$ cd docker-squid
$ tree -L 1
.
├── Makefile
├── Makefile.settings
├── README.md
├── docker
└── src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Open the &lt;code&gt;Makefile&lt;/code&gt; at the root of the &lt;strong&gt;docker-squid&lt;/strong&gt; repository and modify the highlighted settings:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Project variables&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PROJECT_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; squid
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ORG_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; casecommons
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;REPO_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; squid
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;DOCKER_REGISTRY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;160775127577&lt;/span&gt;.dkr.ecr.us-west-2.amazonaws.com
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;AWS_ACCOUNT_ID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;160775127577&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DOCKER_LOGIN_EXPRESSION&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;aws ecr get-login --registry-ids &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;AWS_ACCOUNT_ID&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we ensure the &lt;code&gt;Makefile&lt;/code&gt; settings are configured with the correct Docker registry name (&lt;code&gt;DOCKER_REGISTRY&lt;/code&gt;), organization name (&lt;code&gt;ORG_NAME&lt;/code&gt;), repository name (&lt;code&gt;REPO_NAME&lt;/code&gt;) and AWS account ID (&lt;code&gt;AWS_ACCOUNT_ID&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;3. Run the &lt;code&gt;make login&lt;/code&gt; command to login to the ECR repository for the &lt;strong&gt;demo-resources&lt;/strong&gt; account:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-resources-admin
$ make login
=&amp;gt; Logging in to Docker registry ...
Enter MFA code: *****
Login Succeeded
=&amp;gt; Logged in to Docker registry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Run the &lt;code&gt;make release&lt;/code&gt; command, which will build the squid image:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make release
=&amp;gt; Building images...
Building squid
Step 1/11 : FROM alpine
...
...
=&amp;gt; Build complete
=&amp;gt; Starting squid service...
Creating network &amp;quot;squid_default&amp;quot; with the default driver
Creating squid_squid_1
=&amp;gt; Release environment created
=&amp;gt; Squid is running at http://172.16.154.128:32776
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Run the &lt;code&gt;make tag latest&lt;/code&gt; command, which will tag the image with the &lt;code&gt;latest&lt;/code&gt; tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make tag latest
=&amp;gt; Tagging release image with tags latest...
=&amp;gt; Tagging complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5. Run the &lt;code&gt;make publish&lt;/code&gt; command, which will publish the image to your ECR repository:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make publish
=&amp;gt; Publishing release image to 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/squid...
The push refers to a repository [160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/squid]
a99ab02493c4: Pushed
de9eaa36d055: Pushed
ac2f445f0e4a: Pushed
6566ea35d012: Pushed
60ab55d3379d: Pushed
latest: digest: sha256:086598386c752d053436cb46aedc52f6c03026e53981936c4d8b867ce042ac66 size: 1362
=&amp;gt; Publish complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6. Run the &lt;code&gt;make clean&lt;/code&gt; command to clean up the local Docker environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make clean
=&amp;gt; Destroying release environment...
Stopping squid_squid_1 ... done
Removing squid_squid_1 ... done
Removing network squid_default
=&amp;gt; Removing dangling images...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7. In the AWS console, you should now be able to see your newly published image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/ecr-squid-image.png&#34; alt=&#34;Squid Image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;We created ECR repositories in our &lt;strong&gt;demo-resources&lt;/strong&gt; account, which provides a private Docker registry and repositories for publishing Docker images, and learned how to publish Docker images to our ECR repositories.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;At this point you should commit your changes to the ECR resources playbook before continuing.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Web Proxy Stack</title>
      <link>https://casecommons.github.io/aws-docs/web-proxy/</link>
      <pubDate>Mon, 20 Feb 2017 06:39:45 +1300</pubDate>
      
      <guid>https://casecommons.github.io/aws-docs/web-proxy/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation&#34;&gt;aws-cloudformation&lt;/a&gt; role includes a &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation/blob/master/templates/proxy.yml.j2&#34;&gt;web proxy template&lt;/a&gt; that is designed to create the following AWS resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Proxy using the popular &lt;a href=&#34;http://www.squid-cache.org&#34;&gt;squid&lt;/a&gt; open source web proxy application&lt;/li&gt;
&lt;li&gt;EC2 autoscaling group for running ECS container instances&lt;/li&gt;
&lt;li&gt;ECS cluster including ECS container instances that can run the squid containers&lt;/li&gt;
&lt;li&gt;ECS task definition for defining the runtime configuration of the squid container&lt;/li&gt;
&lt;li&gt;ECS service for running the squid containers as a long running service, integrated with a front-end Elastic Load Balancer (ELB)&lt;/li&gt;
&lt;li&gt;Elastic Load Balancer (ELB) for load balancing incoming HTTP proxy requests from hosts using the squid proxy&lt;/li&gt;
&lt;li&gt;Route 53 host record defining a friendly URL for the squid proxy&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;Before commencing the tasks below, ensure you have successfully completed all tasks in the following sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/&#34;&gt;Security Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/cloudformation-resources/&#34;&gt;CloudFormation Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/ecr-resources/&#34;&gt;EC2 Container Registry Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;creating-an-ecs-ami&#34;&gt;Creating an ECS AMI&lt;/h2&gt;

&lt;p&gt;We are creating our first CloudFormation stack that includes ECS resources, and we need to create a custom ECS Amazon Machine Image (AMI) that is designed to work with the proxy template.&lt;/p&gt;

&lt;p&gt;The Packer ECS repository is located at &lt;a href=&#34;https://github.com/Casecommons/packer-ecs&#34;&gt;https://github.com/Casecommons/packer-ecs&lt;/a&gt; and includes a workflow that can be configured to publish the Packer ECS image to the AWS account of your choice.&lt;/p&gt;

&lt;p&gt;1. Clone the Packer ECS repository to your local environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:casecommons/packer-ecs
Cloning into &#39;packer-ecs&#39;...
remote: Counting objects: 143, done.
remote: Total 143 (delta 0), reused 0 (delta 0), pack-reused 143
Receiving objects: 100% (143/143), 21.66 KiB | 0 bytes/s, done.
Resolving deltas: 100% (55/55), done.
$ cd packer-ecs
$ tree -L 1
.
├── Makefile
├── Makefile.settings
├── README.md
├── docker
└── src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Open the &lt;code&gt;Makefile&lt;/code&gt; at the root of the &lt;strong&gt;packer-ecs&lt;/strong&gt; repository and modify the highlighted settings:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Project variables&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PROJECT_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; packer

&lt;span class=&#34;c&#34;&gt;# AWS security settings&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;AWS_ROLE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; arn:aws:iam::160775127577:role/admin
&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;AWS_SG_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; packer-&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;MY_IP_ADDRESS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;-&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;TIMESTAMP&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;AWS_SG_DESCRIPTION&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Temporary security group for Packer&amp;quot;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we ensure the &lt;code&gt;Makefile&lt;/code&gt; settings are configured with the IAM &lt;strong&gt;admin&lt;/strong&gt; role for the &lt;strong&gt;demo-resources&lt;/strong&gt; account (&lt;code&gt;AWS_ROLE&lt;/code&gt;), as the ECS AMI build process will publish the AMI to the account associated with this role.&lt;/p&gt;

&lt;p&gt;3. Run the &lt;code&gt;make release&lt;/code&gt; command to build the Packer image:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;AWS_PROFILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo-resources-admin
$ make release
Enter MFA code: ******
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Starting packer build...
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Creating packer security group...
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Creating packer image...
Building packer
Step &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/10 : FROM alpine
...
...
Step &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;/10 : CMD packer build packer.json
 ---&amp;gt; Running in 7de75cd744a5
 ---&amp;gt; 6cefa9dcc744
Removing intermediate container 7de75cd744a5
Successfully built &lt;span class=&#34;nv&#34;&gt;6cefa9dcc744&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Running packer build...
Creating network &lt;span class=&#34;s2&#34;&gt;&amp;quot;packer_default&amp;quot;&lt;/span&gt; with the default driver
Creating packer_packer_1
Attaching to packer_packer_1
packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt;-02-26T09:52:22Z 52bf8983fb4e confd&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: INFO Backend &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; to env
packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt;-02-26T09:52:22Z 52bf8983fb4e confd&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: INFO Starting confd
packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt;-02-26T09:52:22Z 52bf8983fb4e confd&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: INFO Backend nodes &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; to
packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt;-02-26T09:52:22Z 52bf8983fb4e confd&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: INFO Target config /packer/packer.json out of sync
packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt;-02-26T09:52:22Z 52bf8983fb4e confd&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: INFO Target config /packer/packer.json has been updated
packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; amazon-ebs output will be in this color.
packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&amp;gt; amazon-ebs: Prevalidating AMI Name...
packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     amazon-ebs: Found Image ID: ami-8e7bc4ee
packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&amp;gt; amazon-ebs: Creating temporary keypair: packer_58b2a556-84ff-72db-9874-eb14567c2bc5
packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&amp;gt; amazon-ebs: Launching a &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; AWS instance...
packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     amazon-ebs: Instance ID: i-01c267d7e0219e85f
...
...
packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&amp;gt; Builds finished. The artifacts of successful builds are:
packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; --&amp;gt; amazon-ebs: AMIs were created:
packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; us-west-2: ami-4662e126
&lt;/span&gt;packer_1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; --&amp;gt; amazon-ebs:
packer_packer_1 exited with code &lt;span class=&#34;nv&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Deleting packer security group...
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Deleted packer security group...
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Build &lt;span class=&#34;nb&#34;&gt;complete&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The ECS AMI build will take a few minutes to complete.  Once the build has finished, take a note of the AMI ID, which in the output above is &lt;strong&gt;ami-4662e126&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;4. Run the &lt;code&gt;make clean&lt;/code&gt; command to clean up the local Docker environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make clean
=&amp;gt; Destroying release environment...
=&amp;gt; Removing dangling images...
=&amp;gt; Clean complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5. In the AWS console, navigate to &lt;strong&gt;EC2 &amp;gt; Images &amp;gt; AMIs&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/ecs-ami.png&#34; alt=&#34;Squid Image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that the AMI built in Step 3 is published and available in the &lt;strong&gt;demo-resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;h2 id=&#34;creating-an-ec2-key-pair&#34;&gt;Creating an EC2 Key Pair&lt;/h2&gt;

&lt;p&gt;The web proxy template requires an EC2 keypair name to be provided as an input, which will be granted SSH access to the ECS container instances created as part of the web proxy stack.&lt;/p&gt;

&lt;p&gt;1. In the AWS console, navigate to &lt;strong&gt;EC2 &amp;gt; Network &amp;amp; Security &amp;gt; Key Pairs&lt;/strong&gt; and click on the &lt;strong&gt;Create Key Pair&lt;/strong&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/ec2-key-pairs.png&#34; alt=&#34;EC2 Key Pairs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2. Name the key &lt;strong&gt;admin&lt;/strong&gt; and click on the &lt;strong&gt;Create&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/ec2-create-key-pair.png&#34; alt=&#34;Create EC2 Key Pair&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3. A new key pair is created and a SSH private key file is downloaded to your computer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/ec2-admin-key-pair.png&#34; alt=&#34;Create EC2 Key Pair&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4. Move the SSH private key file to your &lt;code&gt;~/.ssh&lt;/code&gt; folder and ensure the required permissions are set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mv ~/Downloads/admin.pem.txt ~/.ssh/demo-resources-admin.pem
$ chmod 600 ~/.ssh/demo-resources-admin.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;creating-the-playbook&#34;&gt;Creating the Playbook&lt;/h2&gt;

&lt;p&gt;We can now get started establishing a proxy playbook that defines a proxy stack for the &lt;strong&gt;Demo Resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;1. Clone the &lt;a href=&#34;https://github.com/casecommons/aws-starter&#34;&gt;AWS Starter&lt;/a&gt; to a local folder called &lt;code&gt;demo-proxy&lt;/code&gt; and re-initialise the Git repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:casecommons/aws-starter.git demo-proxy
  Cloning into &#39;demo-proxy&#39;...
  remote: Counting objects: 22, done.
  remote: Compressing objects: 100% (14/14), done.
  remote: Total 22 (delta 4), reused 22 (delta 4), pack-reused 0
  Receiving objects: 100% (22/22), done.
  Resolving deltas: 100% (4/4), done
$ cd demo-proxy
$ rm -rf .git
$ git init
Initialized empty Git repository in /Users/jmenga/Source/casecommons/demo-proxy/.git/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.  Update the &lt;code&gt;roles/requirements.yml&lt;/code&gt; file to the desired versions for each role:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# You can specify git tag, commit or branch for the version property&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@github.com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@github.com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.  Install the roles using the &lt;code&gt;ansible-galaxy&lt;/code&gt; command as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ansible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;galaxy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requirements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yml&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;force&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extracting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmenga&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;proxy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;installed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extracting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmenga&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;proxy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;installed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.  Modify the &lt;code&gt;group_vars/all/vars.yml&lt;/code&gt; file, which contains global settings for the playbook:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Stack Settings&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cf_stack_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;proxy&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;n&#34;&gt;cf_stack_template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;templates/proxy.yml.j2&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cf_stack_tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;owner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Casecommons&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Web&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Proxy&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;severity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;High&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ env }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pema&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@casecommons.org&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Stack inputs&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cf_stack_inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationImageId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_ami }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationInstanceType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_instance_type }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationAutoscalingDesiredCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_desired_count | default(config_az_count) | default(2) | int }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;KeyName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_keyname }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ env }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ProxyImage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_proxy_image }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ProxyImageTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_proxy_tag }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ProxyDisableWhitelist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_proxy_disable_whitelist | default(false) | string | lower }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ProxyWhitelist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_proxy_whitelist | default(&amp;#39;&amp;#39;) }}&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that we reference the &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation/blob/master/templates/proxy.yml.j2&#34;&gt;templates/proxy.yml.y2 template&lt;/a&gt; that is embedded within the &lt;a href=&#34;https://github.com/casecommons/aws-cloudformation&#34;&gt;aws-cloudformation role&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We also add a dictionary called &lt;code&gt;cf_stack_inputs&lt;/code&gt;, which provides values for input parameters defined in the proxy CloudFormation template.&lt;/p&gt;

&lt;p&gt;Notice that these settings reference environment specific settings prefixed with &lt;code&gt;config_&lt;/code&gt;, which will we need to define in our environment settings.&lt;/p&gt;

&lt;p&gt;5. Remove the local &lt;code&gt;templates&lt;/code&gt; folder, since we are using a template that is embedded within the &lt;code&gt;aws-cloudformation&lt;/code&gt; role:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf templates
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;defining-a-new-environment&#34;&gt;Defining a New Environment&lt;/h2&gt;

&lt;p&gt;We will now add a new environment called &lt;strong&gt;demo-resources&lt;/strong&gt; to the playbook, which will be used to create CloudFormation resources in the &lt;strong&gt;demo-resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;1. Modify the &lt;code&gt;inventory&lt;/code&gt; file so that it defines a single environment called &lt;strong&gt;demo-resources&lt;/strong&gt;, ensuring you specify &lt;code&gt;ansible_connection=local&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[demo-resources]
demo-resources ansible_connection=local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Remove the &lt;code&gt;group_vars/non-prod&lt;/code&gt; environment folder that is included in the starter template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf group_vars/non-prod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3. Create a file called &lt;code&gt;group_vars/demo-resources/vars.yml&lt;/code&gt;, which will hold all environment specific configuration for the &lt;strong&gt;demo-resources&lt;/strong&gt; environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p group_vars/demo-resources
$ touch group_vars/demo-resources/vars.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Add the following settings to &lt;code&gt;group_vars/demo-resources/vars.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# STS role in the target AWS account to assume
sts_role_arn: &amp;quot;arn:aws:iam::160775127577:role/admin&amp;quot;

# Application settings
config_application_keyname: admin
config_application_instance_type: t2.micro
config_application_ami: ami-4662e126
config_az_count: 3
config_log_deletion_policy: Delete

# Proxy settings
config_proxy_image: 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/squid
config_proxy_tag: latest
config_proxy_disable_whitelist: false
config_proxy_whitelist: .demo.cloudhotspot.co
config_proxy_network_mode: host
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we target the &lt;strong&gt;demo-resources&lt;/strong&gt; account by specifying the &lt;strong&gt;demo-resources&lt;/strong&gt; IAM &lt;strong&gt;admin&lt;/strong&gt; role in the &lt;code&gt;sts_role_arn&lt;/code&gt; variable, whilst the remaining settings configure the proxy template:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config_application_keyname&lt;/code&gt; - specifies the name of the EC2 key pair that ECS container instances will be created with.  Notice this matches the name of the &lt;a href=&#34;https://casecommons.github.io/aws-docs/web-proxy/#creating-an-ec2-key-pair&#34;&gt;EC2 key pair created earlier&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_application_instance_type&lt;/code&gt; - specifies the EC2 instance type for the ECS container instances that will be created.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_application_ami&lt;/code&gt; - specifies the AMI ID of the image used to create the ECS container instances.  Notice this matches the ID of the &lt;a href=&#34;https://casecommons.github.io/aws-docs/web-proxy/#creating-an-ecs-ami&#34;&gt;AMI created earlier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_az_count&lt;/code&gt; - specifies the number of availability zones to place ECS conatiner instances into.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_log_deletion_policy&lt;/code&gt; - specifies whether to &amp;ldquo;Delete&amp;rdquo; or &amp;ldquo;Retain&amp;rdquo; CloudWatch log groups when the stack is destroyed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_proxy_image&lt;/code&gt; - specifies the Docker image used to run the squid proxy containers.  Notice this matches the image created in &lt;a href=&#34;https://casecommons.github.io/aws-docs/ecr-resources/#publishing-docker-images&#34;&gt;EC2 Container Registry Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_proxy_tag&lt;/code&gt; - specifies the Docker image tag used to run the squid proxy containers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_proxy_disable_whitelist&lt;/code&gt; - disables the web proxy whitelist when set to &lt;code&gt;true&lt;/code&gt;.  The default setting is &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_proxy_whitelist&lt;/code&gt; - defines domains that will be added to the web proxy whitelist.  Here we add &lt;code&gt;.demo.cloudhotspot.co&lt;/code&gt;, which means any host in &lt;code&gt;*.demo.cloudhotspot.co&lt;/code&gt; will be whitelisted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_proxy_network_mode&lt;/code&gt; - configures the Docker networking mode - in this example it is set to &lt;code&gt;host&lt;/code&gt;, meaning the squid container will share the ECS container instance operating system network stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;The squid Docker image created in &lt;a href=&#34;https://casecommons.github.io/aws-docs/ecr-resources/#publishing-docker-images&#34;&gt;EC2 Container Registry Resources&lt;/a&gt; includes a whitelist that only permits access to AWS service API endpoints. See &lt;a href=&#34;https://github.com/Casecommons/docker-squid#squid-whitelist&#34;&gt;https://github.com/Casecommons/docker-squid#squid-whitelist&lt;/a&gt; for details on the default whitelist.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;running-the-playbook&#34;&gt;Running the Playbook&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve defined environment settings for the &lt;strong&gt;demo-resources&lt;/strong&gt; environment, let&amp;rsquo;s run the playbook to create ECR repository resources for the environment.&lt;/p&gt;

&lt;p&gt;1. Ensure your local AWS environment is configured to target the &lt;strong&gt;demo-resources&lt;/strong&gt; account:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-resources-admin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Run the Ansible playbook targeting the &lt;code&gt;demo-resources&lt;/code&gt; environment as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ ansible-playbook site.yml -e &lt;span class=&#34;nv&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo-resources

PLAY &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Assume Role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; *************************************************************

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : set_fact&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ******************************************************
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : checking &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; sts functions are sts_disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting empty sts_session_output result&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting sts_creds &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; legacy AWS credentials are present &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;e.g. &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Ansible Tower&lt;span class=&#34;o&#34;&gt;)]&lt;/span&gt; ***
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : assume sts role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************************************
Enter MFA code: ******
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
...
...
TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-cloudformation : &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; path fact &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; s3 upload disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; **********
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-cloudformation : configure application stack&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ************************
...
...
PLAY RECAP *********************************************************************
demo-resources             : &lt;span class=&#34;nv&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;changed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;unreachable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;failed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.  The playbook will take approxiately 10 minutes to create the CloudFormation stack and associated resources.  Whilst the CloudFormation stack is being created, you can review the CloudFormation stack that was generated in the &lt;code&gt;build/&amp;lt;timestamp&amp;gt;&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tree build
build
└── 20170227015822
    ├── web-proxy-config.json
    ├── web-proxy-policy.json
    ├── web-proxy-stack.json
    └── web-proxy-stack.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following shows the &lt;code&gt;web-proxy-stack.yml&lt;/code&gt; file that was generated and uploaded to CloudFormation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;AWSTemplateFormatVersion: &amp;quot;2010-09-09&amp;quot;

Description: Squid Forward Proxy

Parameters:
  ApplicationImageId:
    Type: String
    Description: Application Amazon Machine Image ID
  ApplicationInstanceType:
    Type: String
    Description: Application EC2 Instance Type
  ApplicationAutoscalingDesiredCount:
    Type: Number
    Description: Application AutoScaling Group Desired Count
    Default: 3      
  ProxyImage:
    Type: String
    Description: Docker Image for Proxy
    Default: 429614120872.dkr.ecr.us-west-2.amazonaws.com/cwds/squid
  ProxyImageTag:
    Type: String
    Description: Docker Image Tag for Proxy
    Default: latest
  ProxyDisableWhitelist:
    Type: String
    Description: Disables whitelist when set to true.  Proxy will operate as an open proxy.
    Default: &amp;quot;false&amp;quot;
    AllowedValues:
    - &amp;quot;true&amp;quot;
    - &amp;quot;false&amp;quot;
  ProxyWhitelist:
    Type: String
    Description: Comma separated list of domains to whitelist
    Default: &amp;quot;&amp;quot;
  KeyName:
    Type: String
    Description: EC2 Key Pair for SSH Access
  Environment:
    Type: String
    Description: Stack Environment
Resources:
  ProxyDnsRecord:
    Type: &amp;quot;AWS::Route53::RecordSet&amp;quot;
    Properties:
      Name:
        Fn::Join: [&amp;quot;&amp;quot;, [ &amp;quot;proxy.&amp;quot;, &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultVpcDomain&amp;quot; ] ]
      TTL: &amp;quot;300&amp;quot;
      HostedZoneName:
        Fn::Join: [&amp;quot;&amp;quot;, [ &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultVpcDomain&amp;quot;, &amp;quot;.&amp;quot; ] ]
      Type: &amp;quot;CNAME&amp;quot;
      Comment: 
        Fn::Sub: &amp;quot;Forward Proxy - ${Environment}&amp;quot;
      ResourceRecords:
        - Fn::Sub: &amp;quot;${ApplicationLoadBalancer.DNSName}&amp;quot;
  ApplicationLoadBalancer:
    Type : &amp;quot;AWS::ElasticLoadBalancing::LoadBalancer&amp;quot;
    Properties:
      Scheme: &amp;quot;internal&amp;quot;
      SecurityGroups:
        - Ref: &amp;quot;ApplicationLoadBalancerSecurityGroup&amp;quot;
      Subnets:
        - Fn::ImportValue: &amp;quot;DefaultPublicSubnetA&amp;quot;
        - Fn::ImportValue: &amp;quot;DefaultPublicSubnetB&amp;quot;
        - Fn::ImportValue: &amp;quot;DefaultPublicSubnetC&amp;quot;
      CrossZone: &amp;quot;true&amp;quot;
      ConnectionSettings:
        IdleTimeout: 120
      ConnectionDrainingPolicy:
        Enabled: &amp;quot;true&amp;quot;
        Timeout: 120
      Listeners:
        - LoadBalancerPort: &amp;quot;3128&amp;quot;
          InstancePort: &amp;quot;3128&amp;quot;
          Protocol: &amp;quot;tcp&amp;quot;
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-${Environment}-elb
  ApplicationLoadBalancerSecurityGroup:
    Type: &amp;quot;AWS::EC2::SecurityGroup&amp;quot;
    Properties:
      VpcId:
        Fn::ImportValue: &amp;quot;DefaultVpcId&amp;quot;
      GroupDescription: &amp;quot;Proxy Load Balancer Security Group&amp;quot;
      SecurityGroupIngress:
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: 3128
          ToPort: 3128
          CidrIp:
            Fn::ImportValue: &amp;quot;DefaultVpcCidr&amp;quot;
  ApplicationLoadBalancerToAutoscalingIngressTCP3128:
    Type: &amp;quot;AWS::EC2::SecurityGroupIngress&amp;quot;
    Properties:
      IpProtocol: &amp;quot;tcp&amp;quot;
      FromPort: 3128
      ToPort: 3128
      GroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingSecurityGroup&amp;quot; }
      SourceSecurityGroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationLoadBalancerSecurityGroup&amp;quot; }
  ApplicationLoadBalancerToAutoscalingEgressTCP3128:
    Type: &amp;quot;AWS::EC2::SecurityGroupEgress&amp;quot;
    Properties:
      IpProtocol: &amp;quot;tcp&amp;quot;
      FromPort: 3128
      ToPort: 3128
      GroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationLoadBalancerSecurityGroup&amp;quot; }
      DestinationSecurityGroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingSecurityGroup&amp;quot; }
  ApplicationAutoscaling:
    Type: &amp;quot;AWS::AutoScaling::AutoScalingGroup&amp;quot;
    DependsOn:
      - DmesgLogGroup
      - DockerLogGroup
      - EcsAgentLogGroup
      - EcsInitLogGroup
      - MessagesLogGroup
    CreationPolicy:
      ResourceSignal:
        Count: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingDesiredCount&amp;quot;}
        Timeout: &amp;quot;PT15M&amp;quot;
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingDesiredCount&amp;quot;}
        MinSuccessfulInstancesPercent: &amp;quot;100&amp;quot;
        WaitOnResourceSignals: &amp;quot;true&amp;quot;
        PauseTime: &amp;quot;PT15M&amp;quot;
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: &amp;quot;DefaultPublicSubnetA&amp;quot;
        - Fn::ImportValue: &amp;quot;DefaultPublicSubnetB&amp;quot;
        - Fn::ImportValue: &amp;quot;DefaultPublicSubnetC&amp;quot;
      LaunchConfigurationName: { &amp;quot;Ref&amp;quot; : &amp;quot;ApplicationAutoscalingLaunchConfiguration&amp;quot; }
      MinSize: &amp;quot;0&amp;quot;
      MaxSize: &amp;quot;4&amp;quot;
      DesiredCapacity: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingDesiredCount&amp;quot; }
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-instance
          PropagateAtLaunch: &amp;quot;true&amp;quot;
  ApplicationAutoscalingLaunchConfiguration:
    Type: &amp;quot;AWS::AutoScaling::LaunchConfiguration&amp;quot;
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            10_first_run:
              command: &amp;quot;sh firstrun.sh&amp;quot;
              env:
                STACK_NAME: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::StackName&amp;quot; }
                AUTOSCALING_GROUP: &amp;quot;ApplicationAutoscaling&amp;quot;
                AWS_DEFAULT_REGION: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot; }
                ECS_CLUSTER: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCluster&amp;quot; }
                DOCKER_NETWORK_MODE: &amp;quot;host&amp;quot;
              cwd: &amp;quot;/home/ec2-user/&amp;quot;
          files:
            /etc/ecs/ecs.config:
              content: 
                Fn::Sub: &amp;quot;ECS_CLUSTER=${ApplicationCluster}\n&amp;quot;
    Properties:
      ImageId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationImageId&amp;quot; }
      InstanceType: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationInstanceType&amp;quot; }
      AssociatePublicIpAddress: &amp;quot;true&amp;quot;
      IamInstanceProfile: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingInstanceProfile&amp;quot; }
      KeyName: { &amp;quot;Ref&amp;quot;: &amp;quot;KeyName&amp;quot; }
      SecurityGroups:
        - Ref: &amp;quot;ApplicationAutoscalingSecurityGroup&amp;quot;
      UserData: 
        Fn::Base64:
          Fn::Join: [&amp;quot;\n&amp;quot;, [
            &amp;quot;#!/bin/bash&amp;quot;,
            &amp;quot;set -e&amp;quot;,
            &amp;quot;Fn::Sub&amp;quot;: &amp;quot;/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ApplicationAutoscalingLaunchConfiguration --region ${AWS::Region}&amp;quot;,
            &amp;quot;Fn::Sub&amp;quot;: &amp;quot;/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ApplicationAutoscaling --region ${AWS::Region}&amp;quot;
          ] ]
  ApplicationAutoscalingSecurityGroup:
    Type: &amp;quot;AWS::EC2::SecurityGroup&amp;quot;
    Properties:
      VpcId:
        Fn::ImportValue: &amp;quot;DefaultVpcId&amp;quot;
      GroupDescription: &amp;quot;Proxy Security Group&amp;quot;
      SecurityGroupIngress:
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: &amp;quot;DefaultManagementSubnetACidr&amp;quot;
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: &amp;quot;DefaultManagementSubnetBCidr&amp;quot;
      SecurityGroupEgress:
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: &amp;quot;udp&amp;quot;
          FromPort: 53
          ToPort: 53
          CidrIp:
            Fn::Join: [&amp;quot;&amp;quot;, [
              &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultVpcDnsServer&amp;quot;, &amp;quot;/32&amp;quot;
            ] ]
        - IpProtocol: &amp;quot;udp&amp;quot;
          FromPort: 123
          ToPort: 123
          CidrIp: 0.0.0.0/0
  ApplicationAutoscalingRole:
    Type: &amp;quot;AWS::IAM::Role&amp;quot;
    Properties:
      AssumeRolePolicyDocument:
        Version: &amp;quot;2012-10-17&amp;quot;
        Statement:
          - Effect: &amp;quot;Allow&amp;quot;
            Principal:
              Service: [ &amp;quot;ec2.amazonaws.com&amp;quot; ]
            Action: [ &amp;quot;sts:AssumeRole&amp;quot; ]
      Path: &amp;quot;/&amp;quot;
      ManagedPolicyArns: []
      Policies:
        - {&amp;quot;PolicyName&amp;quot;: &amp;quot;CloudWatchLogs&amp;quot;, &amp;quot;PolicyDocument&amp;quot;: {&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, &amp;quot;Statement&amp;quot;: [{&amp;quot;Action&amp;quot;: [&amp;quot;logs:CreateLogGroup&amp;quot;, &amp;quot;logs:CreateLogStream&amp;quot;, &amp;quot;logs:PutLogEvents&amp;quot;, &amp;quot;logs:DescribeLogStreams&amp;quot;], &amp;quot;Resource&amp;quot;: {&amp;quot;Fn::Sub&amp;quot;: &amp;quot;arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}*&amp;quot;}, &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;}]}}
        - PolicyName: &amp;quot;EC2ContainerInstancePolicy&amp;quot;
          PolicyDocument:
            Statement:
              - Effect: &amp;quot;Allow&amp;quot;
                Action:
                  - &amp;quot;ecs:RegisterContainerInstance&amp;quot;
                  - &amp;quot;ecs:DeregisterContainerInstance&amp;quot;
                Resource: 
                  Fn::Sub: &amp;quot;arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ApplicationCluster}&amp;quot;
              - Effect: &amp;quot;Allow&amp;quot;
                Action:
                  - &amp;quot;ecs:DiscoverPollEndpoint&amp;quot;
                  - &amp;quot;ecs:Submit*&amp;quot;
                  - &amp;quot;ecs:Poll&amp;quot;
                  - &amp;quot;ecs:StartTelemetrySession&amp;quot;
                Resource: &amp;quot;*&amp;quot;
              - Effect: &amp;quot;Allow&amp;quot;
                Action: 
                  - &amp;quot;ecr:BatchCheckLayerAvailability&amp;quot;
                  - &amp;quot;ecr:BatchGetImage&amp;quot;
                  - &amp;quot;ecr:GetDownloadUrlForLayer&amp;quot;
                  - &amp;quot;ecr:GetAuthorizationToken&amp;quot;
                Resource: &amp;quot;*&amp;quot;
  ApplicationAutoscalingInstanceProfile:
    Type: &amp;quot;AWS::IAM::InstanceProfile&amp;quot;
    Properties:
      Path: &amp;quot;/&amp;quot;
      Roles: [ { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingRole&amp;quot; } ]
  ApplicationCluster:
    Type: &amp;quot;AWS::ECS::Cluster&amp;quot;
  ApplicationTaskDefinition:
    Type: &amp;quot;AWS::ECS::TaskDefinition&amp;quot;
    Properties:
      NetworkMode: &amp;quot;host&amp;quot;
      ContainerDefinitions:
      - Name: squid
        Image:
          Fn::Sub: ${ProxyImage}:${ProxyImageTag}
        Memory: 995
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: 
              Fn::Sub: ${AWS::StackName}/ecs/ProxyService/squid
            awslogs-region: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot; }
        PortMappings:
          - ContainerPort: 3128
            Protocol: tcp
        Environment:
        - Name: NO_WHITELIST
          Value: { &amp;quot;Ref&amp;quot;: &amp;quot;ProxyDisableWhitelist&amp;quot; }
        - Name: SQUID_WHITELIST
          Value: { &amp;quot;Ref&amp;quot;: &amp;quot;ProxyWhitelist&amp;quot; }
  ProxyService:
    Type: &amp;quot;AWS::ECS::Service&amp;quot;
    DependsOn: 
      - ApplicationAutoscaling
      - ProxyServiceLogGroup
    Properties:
      Cluster: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCluster&amp;quot; }
      TaskDefinition: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationTaskDefinition&amp;quot; }
      DesiredCount: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingDesiredCount&amp;quot;}
      DeploymentConfiguration:
          MinimumHealthyPercent: 50
          MaximumPercent: 200
      LoadBalancers:
        - ContainerName: &amp;quot;squid&amp;quot;
          ContainerPort: &amp;quot;3128&amp;quot;
          LoadBalancerName: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationLoadBalancer&amp;quot; }
      Role: { &amp;quot;Ref&amp;quot;: &amp;quot;EcsServiceRole&amp;quot; }
  EcsServiceRole:
    Type: &amp;quot;AWS::IAM::Role&amp;quot;
    Properties:
      AssumeRolePolicyDocument:
        Version: &amp;quot;2012-10-17&amp;quot;
        Statement:
          - Effect: &amp;quot;Allow&amp;quot;
            Principal: 
              Service: [ &amp;quot;ecs.amazonaws.com&amp;quot; ]
            Action: [ &amp;quot;sts:AssumeRole&amp;quot; ]
      Path: &amp;quot;/&amp;quot;
      ManagedPolicyArns:
        - &amp;quot;arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole&amp;quot;
  DmesgLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/dmesg
      RetentionInDays: 30
  DockerLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/docker
      RetentionInDays: 30
  EcsAgentLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/ecs/ecs-agent
      RetentionInDays: 30
  EcsInitLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/ecs/ecs-init
      RetentionInDays: 30
  MessagesLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/messages
      RetentionInDays: 30
  ProxyServiceLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/ProxyService/squid
      RetentionInDays: 30
   
Outputs:
  ProxyURL:
    Description: &amp;quot;Squid Proxy URL&amp;quot;
    Value:
      Fn::Join: [&amp;quot;&amp;quot;, [
        &amp;quot;http://proxy.&amp;quot;,
        &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultVpcDomain&amp;quot;,
        &amp;quot;:3128&amp;quot;
      ] ]
    Export:
      Name: &amp;quot;DefaultProxyURL&amp;quot;
  ProxySecurityGroup:
    Description: &amp;quot;Squid Proxy Security Group&amp;quot;
    Value:
      Ref: ApplicationLoadBalancerSecurityGroup
    Export:
      Name: &amp;quot;DefaultProxySecurityGroup&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Once the playbook execution completes successfully, login to the &lt;strong&gt;demo-resources&lt;/strong&gt; account.  You should see a new CloudFormation stack called &lt;code&gt;web-proxy&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/web-proxy.png&#34; alt=&#34;Web Proxy Stack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5. If you open the ECS dashboard and select &lt;strong&gt;Clusters&lt;/strong&gt;, you can see a single ECS cluster was created:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/web-proxy-ecs-cluster.png&#34; alt=&#34;Web Proxy ECS Cluster&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;We created a web proxy in our &lt;strong&gt;demo-resources&lt;/strong&gt; account, which provides the ability for hosts located on private subnets to be able to communicate securely with AWS APIs.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;At this point you should commit your changes to the web proxy playbook before continuing.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Intake API Stack</title>
      <link>https://casecommons.github.io/aws-docs/intake-api/</link>
      <pubDate>Mon, 27 Feb 2017 02:59:22 +1300</pubDate>
      
      <guid>https://casecommons.github.io/aws-docs/intake-api/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;At this point, we have established all of the shared resource stacks in our &lt;strong&gt;demo-users&lt;/strong&gt; and &lt;strong&gt;demo-resources&lt;/strong&gt; accounts, and it is now time to focus on defining a playbook and CloudFormation stack for an application.&lt;/p&gt;

&lt;p&gt;We will now deploy the Intake API application to our &lt;strong&gt;demo-resources&lt;/strong&gt; account, creating a &lt;strong&gt;demo&lt;/strong&gt; environment, with the Intake API application published at &lt;code&gt;https://demo-intake-api.demo.cloudhotspot.co&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;configuring-dns-delegation&#34;&gt;Configuring DNS Delegation&lt;/h2&gt;

&lt;p&gt;Before we can create public DNS endpoints for the Intake API stack, we must ensure that DNS delegation is configured for the &lt;code&gt;demo.cloudhotspot.co&lt;/code&gt; domain we created earlier in the &lt;a href=&#34;https://casecommons.github.io/aws-docs/network-resources/&#34;&gt;Network Resources&lt;/a&gt; section.&lt;/p&gt;

&lt;p&gt;In this example, the parent domain &lt;code&gt;cloudhotspot.co&lt;/code&gt; is hosted on CloudFlare, so we must configure DNS delegation records on the parent domain, delegating requests for &lt;code&gt;*.demo.cloudhotspot.co&lt;/code&gt; to the AWS Route 53 service.&lt;/p&gt;

&lt;p&gt;1. In the AWS Console, navigate to &lt;strong&gt;Route53 &amp;gt; Hosted zones&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/network-domains.png&#34; alt=&#34;Route53 Domains&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2. Select the &lt;code&gt;demo.cloudhotspot.co&lt;/code&gt; domain and copy each of the &lt;strong&gt;NS&lt;/strong&gt; record values:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/route53-name-servers.png&#34; alt=&#34;Route53 Name Servers&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3. Here is an example of configuring CloudFlare &lt;strong&gt;NS&lt;/strong&gt; records for the &lt;code&gt;demo&lt;/code&gt; child domain of the &lt;code&gt;cloudhotspot.co&lt;/code&gt; root domain:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/route53-ns-records.png&#34; alt=&#34;CloudFlare Delegation&#34; /&gt;&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;It may take some time (minutes or hours) for the new DNS configuration to take effort.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;creating-a-certificate&#34;&gt;Creating a Certificate&lt;/h2&gt;

&lt;p&gt;The Intake API endpoint in this tutorial is a public HTTPS endpoint and as such requires a valid SSL certificate.&lt;/p&gt;

&lt;p&gt;The security resources playbook includes support for defining AWS Certificate Manager certificates, and in this section we will create a wildcard certificate for &lt;code&gt;*.demo.cloudhotspot.co&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;1. Open the &lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/&#34;&gt;security resources playbook you created earlier&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2. Add the highlighted configuration settings to the &lt;strong&gt;demo-resources&lt;/strong&gt; environment, defined in &lt;code&gt;group_vars/demo-resources/vars.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# STS role in the target AWS account to assume&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sts_role_arn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;arn:aws:iam::160775127577:role/admin&amp;quot;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Trusted entities for the IAM admin role&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Here we trust the demo-users account&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;config_iam_admin_accounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;094411466117&lt;/span&gt;

&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ACM certificates:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;n&#34;&gt;config_acm_certificates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;quot;*.demo.cloudhotspot.co&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;SubjectAlternativeNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;      &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudhotspot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;co&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;DomainValidationOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;      &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DomainName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;*.demo.cloudhotspot.co&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;n&#34;&gt;ValidationDomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;cloudhotspot.co&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;      &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DomainName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;demo.cloudhotspot.co&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;n&#34;&gt;ValidationDomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;cloudhotspot.co&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The optional &lt;code&gt;config_acm_certificates&lt;/code&gt; variable defines a dictionary of named ACM certificates, and as you can see we add a single certificate that will have a subject name of &lt;code&gt;*.demo.cloudhotspot.co&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notice that we configure a subject alternative name of the bare domain &lt;code&gt;demo.cloudhotspot.co&lt;/code&gt;, and also configure a &lt;code&gt;ValidationDomain&lt;/code&gt; of &lt;code&gt;cloudhotspot.co&lt;/code&gt; for the subject name and subject alternative name domains of the certificate.&lt;/p&gt;

&lt;p&gt;This validation domain can be either the domain of the subject name, or any parent domain of the subject name.&lt;/p&gt;

&lt;p&gt;In this example, we will be sending validation requests to the following email addresses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;postmaster@cloudhotspot.co&lt;/li&gt;
&lt;li&gt;webmaster@cloudhotspot.co&lt;/li&gt;
&lt;li&gt;hostmaster@cloudhotspot.co&lt;/li&gt;
&lt;li&gt;administrator@cloudhotspot.co&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3. Run the security resources playbook targeting the &lt;code&gt;demo-resources&lt;/code&gt; environment as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;AWS_PROFILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo-resources-admin
$ ansible-playbook site.yml -e &lt;span class=&#34;nv&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo-resources

PLAY &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Assume Role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; *************************************************************

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : set_fact&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ******************************************************
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : checking &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; sts functions are sts_disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting empty sts_session_output result&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting sts_creds &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; legacy AWS credentials are present &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;e.g. &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Ansible Tower&lt;span class=&#34;o&#34;&gt;)]&lt;/span&gt; ***
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : assume sts role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************************************
Enter MFA code: ******
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
...
...
TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-cloudformation : &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; path fact &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; s3 upload disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; **********
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo-resources&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-cloudformation : configure application stack&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ************************
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4. The CloudFormation stack update will create a new AWS Certificate, which will generate a validation request to the emails we listed in the last step.  The stack update will wait for the validation process to either succeed or fail.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/acm-email.png&#34; alt=&#34;Certificate Validation Email&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5. After clicking the link in the validation email, the ACM approval page is presented, at which point you can click the &lt;strong&gt;I Approve&lt;/strong&gt; button to approve the request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/acm-approval.png&#34; alt=&#34;Certificate Validation Approval&#34; /&gt;
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/acm-approval-success.png&#34; alt=&#34;Certificate Validation Success&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6.  Note that because we are validating two domain names (the primary &lt;code&gt;*.demo.cloudhotspot.co&lt;/code&gt; subject name and the &lt;code&gt;demo.cloudhotspot.co&lt;/code&gt; subject alternative name), you must approve separate validation requests for each domain.&lt;/p&gt;

&lt;h2 id=&#34;creating-an-nginx-image&#34;&gt;Creating an Nginx Image&lt;/h2&gt;

&lt;p&gt;The Intake API stack uses a custom Nginx Docker image, which can be built by cloning the &lt;a href=&#34;https://github.com/casecommons/docker-nginx.git&#34;&gt;https://github.com/casecommons/docker-nginx.git&lt;/a&gt; repository locally.&lt;/p&gt;

&lt;p&gt;Before we can create the Intake API stack, we need to publish this image to the &lt;strong&gt;casecommons/nginx&lt;/strong&gt; ECR repository that was established when we created &lt;a href=&#34;https://casecommons.github.io/aws-docs/ecr-resources/&#34;&gt;ECR resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1. Clone the Casecommons Docker Nginx repository to your local environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:Casecommons/docker-nginx.git
Cloning into &#39;docker-nginx&#39;...
remote: Counting objects: 48, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 48 (delta 0), reused 0 (delta 0), pack-reused 45
Receiving objects: 100% (48/48), 13.61 KiB | 0 bytes/s, done.
Resolving deltas: 100% (10/10), done.
$ cd docker-nginx
$ tree -L 1
.
├── Makefile
├── Makefile.settings
├── README.md
├── docker
└── src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Open the &lt;code&gt;Makefile&lt;/code&gt; at the root of the &lt;strong&gt;docker-nginx&lt;/strong&gt; repository and modify the highlighted settings:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Project variables&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PROJECT_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; nginx
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ORG_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; casecommons
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;REPO_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; nginx
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;DOCKER_REGISTRY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;160775127577&lt;/span&gt;.dkr.ecr.us-west-2.amazonaws.com
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;AWS_ACCOUNT_ID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;160775127577&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DOCKER_LOGIN_EXPRESSION&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;aws ecr get-login --registry-ids &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;AWS_ACCOUNT_ID&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we ensure the &lt;code&gt;Makefile&lt;/code&gt; settings are configured with the correct Docker registry name (&lt;code&gt;DOCKER_REGISTRY&lt;/code&gt;), organization name (&lt;code&gt;ORG_NAME&lt;/code&gt;), repository name (&lt;code&gt;REPO_NAME&lt;/code&gt;) and AWS account ID (&lt;code&gt;AWS_ACCOUNT_ID&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;3. Run the &lt;code&gt;make login&lt;/code&gt; command to login to the ECR repository for the &lt;strong&gt;demo-resources&lt;/strong&gt; account:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-resources-admin
$ make login
=&amp;gt; Logging in to Docker registry ...
Enter MFA code: *****
Login Succeeded
=&amp;gt; Logged in to Docker registry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Run the &lt;code&gt;make release&lt;/code&gt; command, which will build the squid image, and then &lt;code&gt;curl&lt;/code&gt; the output endpoint to verify Nginx is working as expected:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make release
=&amp;gt; Building images...
Building nginx
Step 1/10 : FROM nginx:alpine
...
...
=&amp;gt; Build complete
=&amp;gt; Starting app service...
Creating network &amp;quot;nginx_default&amp;quot; with the default driver
Creating volume &amp;quot;nginx_webroot&amp;quot; with local driver
Creating nginx_app_1
=&amp;gt; Starting nginx service...
Creating nginx_nginx_1
=&amp;gt; Release environment created
=&amp;gt; Nginx is running at http://172.16.154.128:32796
$ curl -s http://172.16.154.128:32796
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5. Run the &lt;code&gt;make tag latest&lt;/code&gt; command, which will tag the image with the &lt;code&gt;latest&lt;/code&gt; tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make tag latest
=&amp;gt; Tagging release image with tags latest...
=&amp;gt; Tagging complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5. Run the &lt;code&gt;make publish&lt;/code&gt; command, which will publish the image to your ECR repository:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make publish
=&amp;gt; Publishing release image to 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/nginx...
The push refers to a repository [160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/nginx]
bacade763708: Pushed
2030c63749a0: Pushed
b0ef948bd579: Pushed
32418e8b3e29: Pushed
f6fb5b0f08d3: Pushed
cec0d431e110: Pushed
7cbcbac42c44: Pushed
latest: digest: sha256:98792f09c0199156ce31236705021e1d81de2ac969e06862d0dea6bce03a79d1 size: 1780
=&amp;gt; Publish complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6. Run the &lt;code&gt;make clean&lt;/code&gt; command to clean up the local Docker environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make clean
=&amp;gt; Destroying release environment...
Stopping nginx_nginx_1 ... done
Stopping nginx_app_1 ... done
Removing nginx_nginx_1 ... done
Removing nginx_app_1 ... done
Removing network nginx_default
Removing volume nginx_webroot
=&amp;gt; Removing dangling images...
=&amp;gt; Clean complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7. In the AWS console under &lt;strong&gt;ECS &amp;gt; Repositories&lt;/strong&gt;, you should now be able to see your newly published image in the &lt;strong&gt;casecommons/nginx&lt;/strong&gt; repository:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/nginx-image.png&#34; alt=&#34;Nginx Image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;creating-an-elasticsearch-image&#34;&gt;Creating an Elasticsearch Image&lt;/h2&gt;

&lt;p&gt;The Intake API stack requires Elasticsearch and creates an ECS cluster with that runs a single Elasticsearch container.&lt;/p&gt;

&lt;p&gt;Although we will be using the official Elasticsearch image as published on Docker Cloud (aka Docker Hub), we need to publish this image to the &lt;strong&gt;casecommons/elasticsearch&lt;/strong&gt; ECR repository that was established when we created &lt;a href=&#34;https://casecommons.github.io/aws-docs/ecr-resources/&#34;&gt;ECR resources&lt;/a&gt;, as our ECS container instances can only reach the Internet via the &lt;a href=&#34;https://casecommons.github.io/aws-docs/web-proxy/&#34;&gt;Web Proxy&lt;/a&gt;, and the default whitelist on the proxy only allows access to AWS API and service endpoints include the EC2 container registry, but does not permit access to Docker Cloud.&lt;/p&gt;

&lt;p&gt;1. Pull the Elasticsearch from Docker Cloud to your local environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker pull elasticsearch:2.4-alpine
Using tag: 2.4-alpine
latest: Pulling from elasticsearch
Digest: sha256:7b0d0c8b63db2f02b3c58e451f0a5c4ced9bb5deac66bdc6010d2e07b9e85860
Status: Image is up to date for elasticsearch:2.4-alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Login to the &lt;strong&gt;demo-resources&lt;/strong&gt; ECR service, tag and push the Elasticsearch image with the full ECR repository name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-resources-admin
$ eval $(aws ecr get-login)
Enter MFA code: ******
Flag --email has been deprecated, will be removed in 1.14.
Login Succeeded
$ docker tag elasticsearch:2.4-alpine 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/elasticsearch
$ docker push 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/elasticsearch
The push refers to a repository [160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/elasticsearch]
442c7116f27b: Pushed
b12e0801104f: Pushed
d97676491a0b: Pushed
0227e2521da2: Pushed
b5179e9e72cd: Pushed
494d9dab3fce: Pushed
6f7515f19096: Pushed
da07d9b32b00: Pushed
7cbcbac42c44: Pushed
latest: digest: sha256:7b0d0c8b63db2f02b3c58e451f0a5c4ced9bb5deac66bdc6010d2e07b9e85860 size: 2199
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3. In the AWS console under &lt;strong&gt;ECS &amp;gt; Repositories&lt;/strong&gt;, you should now be able to see your newly published image in the &lt;strong&gt;casecommons/elasticsearch&lt;/strong&gt; repository:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/ecr-elastic-image.png&#34; alt=&#34;Elasticsearch Image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;creating-the-intake-base-image&#34;&gt;Creating the Intake Base Image&lt;/h2&gt;

&lt;p&gt;The Intake API Docker image requires an Intake base image to be available when building the Intake API Docker image, which means we must publish this image to our new ECR repositories.&lt;/p&gt;

&lt;p&gt;1. Clone the Casecommons Intake Base repository to your local environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:Casecommons/base_docker_image_for_ca_intake.git
Cloning into &#39;base_docker_image_for_ca_intake&#39;...
remote: Counting objects: 38, done.
remote: Total 38 (delta 0), reused 0 (delta 0), pack-reused 38
Receiving objects: 100% (38/38), 4.41 KiB | 0 bytes/s, done.
Resolving deltas: 100% (16/16), done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Run the &lt;code&gt;docker build&lt;/code&gt; command, referencing &lt;code&gt;Dockerfile.base&lt;/code&gt; and specifying a fully qualified image name of the &lt;strong&gt;intake-base&lt;/strong&gt; repository we created in &lt;a href=&#34;https://casecommons.github.io/aws-docs/ecr-resources/&#34;&gt;ECR Resources&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build -t 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/intake-base -f Dockerfile.base .
Sending build context to Docker daemon 9.728 kB
Step 1/5 : FROM ruby:2.4.0-slim
 ---&amp;gt; 6c02426a7abf
Step 2/5 : RUN apt-get update -y &amp;amp;&amp;amp;   apt-get upgrade -y &amp;amp;&amp;amp;   apt-get install -y     jq     curl     python-dev     python-setuptools &amp;amp;&amp;amp;   easy_install pip &amp;amp;&amp;amp;   pip install awscli &amp;amp;&amp;amp;   curl -L -o /usr/bin/confd https://github.com/kelseyhightower/confd/releases/download/v0.12.0-alpha3/confd-0.12.0-alpha3-linux-amd64 &amp;amp;&amp;amp;   chmod +x /usr/bin/confd &amp;amp;&amp;amp;   mkdir -p /etc/confd
 ---&amp;gt; Using cache
 ---&amp;gt; 78eb65e1eecd
Step 3/5 : COPY entrypoint.sh /usr/bin/entrypoint
 ---&amp;gt; Using cache
 ---&amp;gt; 8f9518ae9718
Step 4/5 : ENTRYPOINT /usr/bin/entrypoint
 ---&amp;gt; Using cache
 ---&amp;gt; a23943a21477
Step 5/5 : LABEL application intake_accelerator
 ---&amp;gt; Using cache
 ---&amp;gt; 1c42aa461964
Successfully built 1c42aa461964
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3. Run the &lt;code&gt;docker push&lt;/code&gt; command, referencing the fully qualified image name of the &lt;strong&gt;intake-base&lt;/strong&gt; repository:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker push 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/intake-base
The push refers to a repository [160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/intake-base]
cc269cc723a3: Pushed
985910e761d0: Pushed
e302f1438372: Pushed
7cebbf491a73: Pushed
ba3d5a81c1e6: Pushed
5d53f93940f5: Pushed
38dcb92de9f2: Pushed
a2ae92ffcd29: Pushed
latest: digest: sha256:e870f9900f5af857c101e39d8683aca8f7dee96e37339a90579f3c857203fa64 size: 1996
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. In the AWS console under &lt;strong&gt;ECS &amp;gt; Repositories&lt;/strong&gt;, you should now be able to see your newly published image in the &lt;strong&gt;casecommons/intake-base&lt;/strong&gt; repository:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/intake-base-image.png&#34; alt=&#34;Intake Base Image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;creating-the-intake-api-image&#34;&gt;Creating the Intake API Image&lt;/h2&gt;

&lt;p&gt;Now that we have built the Intake base Docker image, we can build and publish the Intake API Docker image to the &lt;strong&gt;casecommons/intake-api&lt;/strong&gt; repository, so that it is available to ECS instances when we deploy the CloudFormation stack for running the Intake API application.&lt;/p&gt;

&lt;p&gt;1. Clone the Intake API application to your local environment and ensure you checkout the &lt;strong&gt;workflow_enhancements&lt;/strong&gt; branch:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;$ git clone git@github.com&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ca&lt;/span&gt;-&lt;span class=&#34;n&#34;&gt;cwds&lt;/span&gt;/&lt;span class=&#34;n&#34;&gt;intake_api&lt;/span&gt;.&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;Cloning&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;intake_api_prototype&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;remote&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Counting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;: 2140&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;done&lt;/span&gt;.
&lt;span class=&#34;nf&#34;&gt;remote&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compressing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;: 100% (188/188)&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;done&lt;/span&gt;.
&lt;span class=&#34;nf&#34;&gt;remote&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Total&lt;/span&gt; 2140 (&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt; 98)&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reused&lt;/span&gt; 2 (&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt; 2)&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pack&lt;/span&gt;-&lt;span class=&#34;n&#34;&gt;reused&lt;/span&gt; 1931
&lt;span class=&#34;nf&#34;&gt;Receiving objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; 100% (2140/2140)&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 273.79 &lt;span class=&#34;n&#34;&gt;KiB&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 237.00 &lt;span class=&#34;n&#34;&gt;KiB&lt;/span&gt;/&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;done&lt;/span&gt;.
&lt;span class=&#34;nf&#34;&gt;Resolving deltas&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; 100% (1169/1169)&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;done&lt;/span&gt;.
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;intake_api_prototype&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;checkout&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;workflow_enhancements&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;Branch&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;workflow_enhancements&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;track&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;remote&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;branch&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;workflow_enhancements&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;origin.&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;Switched&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;branch&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;workflow_enhancements&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2. Open the &lt;code&gt;Makefile&lt;/code&gt; at the root of the &lt;strong&gt;intake_api_prototype&lt;/strong&gt; repository and modify the highlighted settings:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Variables&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;PROJECT_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; intake_api_prototype
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ORG_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; casecommons
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;REPO_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; intake-api
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;DOCKER_REGISTRY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;160775127577&lt;/span&gt;.dkr.ecr.us-west-2.amazonaws.com
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;AWS_ACCOUNT_ID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;160775127577&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DOCKER_LOGIN_EXPRESSION&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;aws ecr get-login --registry-ids &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;AWS_ACCOUNT_ID&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we ensure the &lt;code&gt;Makefile&lt;/code&gt; settings are configured with the correct Docker registry name (&lt;code&gt;DOCKER_REGISTRY&lt;/code&gt;), organization name (&lt;code&gt;ORG_NAME&lt;/code&gt;), repository name (&lt;code&gt;REPO_NAME&lt;/code&gt;) and AWS account ID (&lt;code&gt;AWS_ACCOUNT_ID&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;3. Open the &lt;code&gt;docker/release/Dockerfile&lt;/code&gt; file and modify the &lt;code&gt;FROM&lt;/code&gt; directive to reference the &lt;strong&gt;intake-base&lt;/strong&gt; image you published earlier:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;err&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/intake-base&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;ENV&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;APP_HOME&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/intake_api_prototype&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;RUN&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;mkdir&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$APP_HOME&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;WORKDIR&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$APP_HOME&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4. Open the &lt;code&gt;docker/release/docker-compose.yml&lt;/code&gt; file and modify the &lt;code&gt;image&lt;/code&gt; variable for the &lt;code&gt;nginx&lt;/code&gt; service to reference the &lt;strong&gt;Nginx&lt;/strong&gt; image you published earlier:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;160775127577.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dkr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ecr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;us&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;west&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;amazonaws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nginx&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;${HTTP_PORT}&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;HTTP_PORT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HTTP_PORT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;WEB_ROOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;intake_api_prototype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;UPSTREAM_URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;///&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;HEALTHCHECK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;localhost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HTTP_PORT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screenings&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;webroot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;intake_api_prototype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4. Run the &lt;code&gt;make login&lt;/code&gt; command to login to the ECR repository for the &lt;strong&gt;demo-resources&lt;/strong&gt; account:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-resources-admin
$ make login
=&amp;gt; Logging in to Docker registry ...
Enter MFA code: *****
Login Succeeded
=&amp;gt; Logged in to Docker registry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5. Run the &lt;code&gt;make test&lt;/code&gt; command, which will run unit tests in a Docker build container:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make test
=&amp;gt; Pulling latest images...
=&amp;gt; Building images...
Building rspec_test
...
...
rspec_test_1     | Finished in 4.75 seconds (files took 2.63 seconds to load)
rspec_test_1     | 34 examples, 0 failures
rspec_test_1     |
intakeapiprototypetest_rspec_test_1 exited with code 0
=&amp;gt; Testing complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6. Run the &lt;code&gt;make build&lt;/code&gt; command, which will build a Debian package from the application source and copy it to the local &lt;code&gt;target&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make build
=&amp;gt; Building images...
Building builder
Step 1/14 : FROM ruby:2.4
...
...
=&amp;gt; Removing existing artifacts...
=&amp;gt; Building application artifacts...
Creating intakeapiprototypetest_builder_1
Attaching to intakeapiprototypetest_builder_1
builder_1        | {:timestamp=&amp;gt;&amp;quot;2017-02-28T07:32:34.402593+0000&amp;quot;, :message=&amp;gt;&amp;quot;Created package&amp;quot;, :path=&amp;gt;&amp;quot;/build_artefacts/intake-api_20170227225021.acefd33_amd64.deb&amp;quot;}
intakeapiprototypetest_builder_1 exited with code 0
=&amp;gt; Copying application artifacts...
=&amp;gt; Build complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7. Run the &lt;code&gt;make release&lt;/code&gt; command, which will build the release image for the Intake API application, start a minimal production-like environment and run acceptance tests.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make release
=&amp;gt; Pulling latest images...
Pulling nginx (160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/nginx:latest)...
latest: Pulling from casecommons/nginx
Digest: sha256:98792f09c0199156ce31236705021e1d81de2ac969e06862d0dea6bce03a79d1
Status: Image is up to date for 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/nginx:latest
=&amp;gt; Building images...
Building app
...
...
=&amp;gt; Starting application...
Creating intakeapiprototype_app_1
=&amp;gt; Starting nginx...
Creating intakeapiprototype_nginx_1
=&amp;gt; Application is running at http://172.16.154.128:32799/api/v1/screenings
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8. Run the &lt;code&gt;make tag latest&lt;/code&gt; command, which will tag the image with the &lt;code&gt;latest&lt;/code&gt; tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make tag latest
=&amp;gt; Tagging release image with tags latest...
=&amp;gt; Tagging complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;9. Run the &lt;code&gt;make publish&lt;/code&gt; command, which will publish the image to your ECR repository:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make publish
=&amp;gt; Publishing release image to 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/intake-api...
The push refers to a repository [160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/intake-api]
65326a832931: Pushed
d634cd8ca5bc: Pushed
708e96026525: Pushed
cc269cc723a3: Pushed
985910e761d0: Pushed
e302f1438372: Pushed
7cebbf491a73: Pushed
ba3d5a81c1e6: Pushed
5d53f93940f5: Pushed
38dcb92de9f2: Pushed
a2ae92ffcd29: Pushed
latest: digest: sha256:04cfa51f3d684b0a20132b7d515322816c5d49efccef4eabb9b98e6e03f1e211 size: 2627
=&amp;gt; Publish complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10. Run the &lt;code&gt;make clean&lt;/code&gt; command to clean up the local Docker environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make clean
=&amp;gt; Destroying development environment...
...
...
=&amp;gt; Removing dangling images...
Deleted: sha256:cf622bbefa4c89420df5d68f8bb47709374ca149f3b26c7faffe225e9ab32bbf
Deleted: sha256:f4bf2522682e8d5e525bf1de15912b6e53fef2e1a9b82878653cf294455a32c5
=&amp;gt; Clean complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;11. In the AWS console under &lt;strong&gt;ECS &amp;gt; Repositories&lt;/strong&gt;, you should now be able to see your newly published image in the &lt;strong&gt;casecommons/intake-api&lt;/strong&gt; repository:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/intake-api-image.png&#34; alt=&#34;Intake API Image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;publishing-lambda-functions&#34;&gt;Publishing Lambda Functions&lt;/h2&gt;

&lt;p&gt;Both the Intake API and Intake Accelerator CloudFormation stacks rely on CloudFormation custom resources to perform the following tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Secrets Management custom resources - used to decrypt KMS encrypted input parameters provided to the stack to resources that do not support native KMS decryption.&lt;/li&gt;
&lt;li&gt;ECS Task custom resources - used to run deployment actions in the form of ECS tasks.  In the case of Intake API, a number of deployment tasks including running database migrations and reindexing Elasticsearch need to be executed as part of each deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CloudFormation custom resources are backed by AWS Lambda functions that are defined in the CloudFormation stack, and each function needs to specify an S3 bucket URL for downloading the source code of the function in a ZIP format.  The &lt;a href=&#34;https://casecommons.github.io/aws-docs/cloudformation-resources/&#34;&gt;CloudFormation Resources&lt;/a&gt; stack we created earlier includes an S3 bucket specifically designed for storing Lambda functions that support CloudFormation custom resources.&lt;/p&gt;

&lt;p&gt;In this section we will publish each of the custom resource Lambda functions listed above to the CloudFormation Lambda S3 bucket, which is named according to the convention &lt;code&gt;&amp;lt;account-id&amp;gt;-cfn-lambda&lt;/code&gt; or &lt;code&gt;160775127577-cfn-lambda&lt;/code&gt; in the case of our &lt;strong&gt;demo-resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;1. Clone the KMS Decryption Lambda function repository to your local environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:Casecommons/lambda-cfn-kms.git
Cloning into &#39;lambda-cfn-kms&#39;...
remote: Counting objects: 13, done.
remote: Total 13 (delta 0), reused 0 (delta 0), pack-reused 13
Receiving objects: 100% (13/13), 4.82 KiB | 0 bytes/s, done.
Resolving deltas: 100% (2/2), done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Open the &lt;code&gt;Makefile&lt;/code&gt; at the root of the &lt;strong&gt;lambda-cfn-repository&lt;/strong&gt; repository and modify the highlighted settings:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Parameters&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;FUNCTION_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; cfnKmsDecrypt
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;S3_BUCKET&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;160775127577&lt;/span&gt;-cfn-lambda
&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;AWS_DEFAULT_REGION&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; us-west-2
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we ensure the S3 bucket the Lambda function will be published to is the correct bucket for the &lt;strong&gt;demo-resources&lt;/strong&gt; account (&lt;code&gt;S3_BUCKET&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;3. Run the &lt;code&gt;make publish&lt;/code&gt; command, which will build a ZIP archive of your Lambda function and upload it to the S3 bucket:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;AWS_PROFILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo-resources-admin
$ make &lt;span class=&#34;nv&#34;&gt;publish&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Removed all &lt;span class=&#34;nv&#34;&gt;distributions&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Building cfnKmsDecrypt.zip...
Collecting cfn-lambda-handler &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;from -r requirements.txt &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;line &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
  Using cached cfn_lambda_handler-1.0.2-py2.py3-none-any.whl
Installing collected packages: cfn-lambda-handler
Successfully installed cfn-lambda-handler-1.0.2
  adding: cfn_kms_decrypt.py &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;deflated &lt;span class=&#34;m&#34;&gt;54&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  adding: requirements.txt &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;stored &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  adding: setup.cfg &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;stored &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  adding: vendor/ &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;stored &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  adding: vendor/cfn_lambda_handler/ &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;stored &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  adding: vendor/cfn_lambda_handler/__init__.py &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;deflated &lt;span class=&#34;m&#34;&gt;28&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  adding: vendor/cfn_lambda_handler/cfn_lambda_handler.py &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;deflated &lt;span class=&#34;m&#34;&gt;67&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  adding: vendor/cfn_lambda_handler-1.0.2.dist-info/ &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;stored &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  adding: vendor/cfn_lambda_handler-1.0.2.dist-info/DESCRIPTION.rst &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;stored &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  adding: vendor/cfn_lambda_handler-1.0.2.dist-info/INSTALLER &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;stored &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  adding: vendor/cfn_lambda_handler-1.0.2.dist-info/METADATA &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;deflated &lt;span class=&#34;m&#34;&gt;56&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  adding: vendor/cfn_lambda_handler-1.0.2.dist-info/metadata.json &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;deflated &lt;span class=&#34;m&#34;&gt;52&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  adding: vendor/cfn_lambda_handler-1.0.2.dist-info/RECORD &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;deflated &lt;span class=&#34;m&#34;&gt;49&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  adding: vendor/cfn_lambda_handler-1.0.2.dist-info/top_level.txt &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;stored &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  adding: vendor/cfn_lambda_handler-1.0.2.dist-info/WHEEL &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;deflated &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Built build/cfnKmsDecrypt.zip
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Publishing cfnKmsDecrypt.zip to s3://160775127577-cfn-lambda...
Enter MFA token: ******

&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Published to S3 URL: https://s3-us-west-2.amazonaws.com/160775127577-cfn-lambda/cfnKmsDecrypt.zip
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; S3 Object Version: BIUpXhvw6w3f1LTctGVZxOpFD38lCHH1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Take note of the S3 object version, as we need to provide this as an input to any CloudFormation stacks that will use this function.&lt;/p&gt;

&lt;p&gt;4. Next we will clone the ECS Task Runner Lambda function repository to your local environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:Casecommons/lambda-ecs-tasks.git
Cloning into &#39;lambda-ecs-tasks&#39;...
remote: Counting objects: 20, done.
remote: Total 20 (delta 0), reused 0 (delta 0), pack-reused 20
Receiving objects: 100% (20/20), 513.86 KiB | 423.00 KiB/s, done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5. Open the &lt;code&gt;Makefile&lt;/code&gt; at the root of the &lt;strong&gt;lambda-ecs-tasks&lt;/strong&gt; repository and modify the highlighted settings:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Project variables&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PROJECT_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; lambda-ecs-tasks

&lt;span class=&#34;c&#34;&gt;# Parameters&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FUNCTION_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; cfnEcsTasks
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;S3_BUCKET&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;160775127577&lt;/span&gt;-cfn-lambda
&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;AWS_DEFAULT_REGION&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; us-west-2
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we ensure the S3 bucket the Lambda function will be published to is the correct bucket for the &lt;strong&gt;demo-resources&lt;/strong&gt; account (&lt;code&gt;S3_BUCKET&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;6. Run the &lt;code&gt;make build&lt;/code&gt; and &lt;code&gt;make publish&lt;/code&gt; commands, which will build a ZIP archive of your Lambda function and upload it to the S3 bucket:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;AWS_PROFILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo-resources-admin
$ make &lt;span class=&#34;nv&#34;&gt;build&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Building cfnEcsTasks.zip...
Collecting voluptuous &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;from -r requirements.txt &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;line &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
Collecting cfn-lambda-handler &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;from -r requirements.txt &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;line &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
  Using cached cfn_lambda_handler-1.0.2-py2.py3-none-any.whl
...
...
  adding: vendor/setuptools-34.3.0.dist-info/WHEEL &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;deflated &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  adding: vendor/setuptools-34.3.0.dist-info/zip-safe &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;stored &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Built build/cfnEcsTasks.zip
$ make &lt;span class=&#34;nv&#34;&gt;publish&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Publishing cfnEcsTasks.zip to s3://160775127577-cfn-lambda...
&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Published to S3 URL: https://s3.amazonaws.com/160775127577-cfn-lambda/cfnEcsTasks.zip
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; S3 Object Version: MiOiZi.9.AHyYQcFibBAvWYFD4xFJJ1c
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Take note of the S3 object version, as we need to provide this as an input to any CloudFormation stacks that will use this function.&lt;/p&gt;

&lt;p&gt;7. In the AWS console, navigate to the S3 dashboard and open the S3 bucket &lt;strong&gt;&amp;lt;account-id&amp;gt;-cfn-lambda&lt;/strong&gt;.  Notice that each Lambda function has been uploaded as a ZIP file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/s3-dashboard.png&#34; alt=&#34;S3 Dashboard&#34; /&gt;
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/lambda-bucket.png&#34; alt=&#34;Lambda Bucket&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;installing-the-playbook&#34;&gt;Installing the Playbook&lt;/h2&gt;

&lt;p&gt;We now have all the supporting pieces in place to deploy the Intake API application stack to the &lt;strong&gt;demo resources&lt;/strong&gt; account.  Instead of creating a new playbook as we have done previously in this tutorial, we will instead clone an existing playbook and add a new environment called &lt;strong&gt;demo-resources&lt;/strong&gt; to the playbook.&lt;/p&gt;

&lt;p&gt;1. Clone the &lt;a href=&#34;https://github.com/casecommons/intake-api-aws&#34;&gt;Intake API AWS project&lt;/a&gt; to your local environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:Casecommons/intake-api-aws.git
  Cloning into &#39;intake-api-aws&#39;...
  remote: Counting objects: 58, done.
  remote: Compressing objects: 100% (6/6), done.
  remote: Total 58 (delta 0), reused 0 (delta 0), pack-reused 49
  Receiving objects: 100% (58/58), 23.82 KiB | 0 bytes/s, done.
  Resolving deltas: 100% (18/18), done.
$ cd intake-api-aws
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.  Install the required Ansible roles for the playbook using the &lt;code&gt;ansible-galaxy&lt;/code&gt; command as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ansible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;galaxy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requirements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yml&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;force&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extracting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmenga&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;intake&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;installed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extracting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmenga&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;intake&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;installed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5.  Review the &lt;code&gt;group_vars/all/vars.yml&lt;/code&gt; file, which contains global settings for the playbook:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cf_stack_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ &amp;#39;intake-api-&amp;#39; + env }}&amp;quot;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cf_stack_tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;owner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CA&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Intake&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Intake&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;API&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;severity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;High&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ env }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pema&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@casecommons.org&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;cf_stack_inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationAutoscalingDesiredCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_desired_count }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationAMI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_ami }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationInstanceType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_instance_type }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationLoadBalancerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_frontend_port }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_port }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationKeyName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_keyname }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationDockerImage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_image }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationDockerImageTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_tag }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationDomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_domain }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ElasticsearchAutoscalingDesiredCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_es_desired_count }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ElasticsearchAMI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_es_ami }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ElasticsearchInstanceType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_es_instance_type }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ElasticsearchLoadBalancerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_es_frontend_port }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ElasticsearchPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_es_port }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ElasticsearchKeyName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_es_keyname }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ElasticsearchDockerImage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_es_image }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ElasticsearchDockerImageTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_es_tag }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ env }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;LogRetention&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_log_retention }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;NginxDockerImage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_nginx_image }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;NginxDockerImageTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_nginx_tag }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;DbStorage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_db_storage }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;DbInstanceType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_db_instance_type }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;DbName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_db_name }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;DbUsername&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_db_username }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;DbPassword&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_db_password }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;SecretKeyBaseCipher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_secret_key_base }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;LambdaCfnKmsDecryptVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_cfn_lambda_kms_decrypt_version }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;LambdaCfnEcsTasksVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_cfn_lambda_ecs_tasks_version }}&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see this stack has many different stack inputs, which revolve around application settings, elasticsearch settings and database settings.&lt;/p&gt;

&lt;p&gt;One thing to note is that the &lt;code&gt;cf_stack_template&lt;/code&gt; variable is not defined - this variable defaults to the path &lt;code&gt;templates/stack.yml.j2&lt;/code&gt; in the local playbook, and you will find this playbook includes a large CloudFormation template in this location.&lt;/p&gt;

&lt;h2 id=&#34;defining-a-new-environment&#34;&gt;Defining a New Environment&lt;/h2&gt;

&lt;p&gt;We will now add a new environment called &lt;strong&gt;demo&lt;/strong&gt; to the playbook, which will be used to create the Intake API application stack in the &lt;strong&gt;demo-resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;1. Modify the &lt;code&gt;inventory&lt;/code&gt; file so that it defines a new environment called &lt;strong&gt;demo&lt;/strong&gt;, ensuring you specify &lt;code&gt;ansible_connection=local&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;[dev]&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;dev ansible_connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;local&lt;/span&gt;

&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;k&#34;&gt;[demo]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;demo ansible_connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;local&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2. Create a file called &lt;code&gt;group_vars/demo/vars.yml&lt;/code&gt;, which will hold all environment specific configuration for the &lt;strong&gt;demo&lt;/strong&gt; environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p group_vars/demo
$ touch group_vars/demo/vars.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Copy the existing settings from &lt;code&gt;group_vars/dev/vars.yml&lt;/code&gt; to &lt;code&gt;group_vars/demo/vars.yml&lt;/code&gt; and modify as shown below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# STS settings&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;sts_role_arn: arn:aws:iam::160775127577:role/admin&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Application settings&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_application_keyname: admin&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;config_application_instance_type: t2.micro&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_desired_count: 2&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_application_ami: ami-4662e126&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_application_image: 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/intake-api&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;config_application_tag: latest&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_frontend_port: 443&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_port: 3000&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_application_secret_key_base: xxxxx&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_application_domain: demo.cloudhotspot.co&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Nginx settings&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_nginx_image: 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/nginx&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;config_nginx_tag: latest&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Load balancer settings&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_lb_certificate_arn:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;na&#34;&gt;Fn::ImportValue: DemoCloudhotspotCoCertificateArn&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Elasticsearch settings&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_es_keyname: admin&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;config_es_instance_type: t2.micro&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_es_desired_count: 1&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_es_ami: ami-4662e126&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_es_image: 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/elasticsearch&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;config_es_tag: latest&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_es_frontend_port: 9200&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_es_port: 9200&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Database settings&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_db_multi_az: false&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_db_deletion_policy: Delete&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_db_storage: 10&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_db_instance_type: db.t2.micro&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_db_name: casebook_api_production&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_db_username: casebook&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_db_password: xxxxx&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Log settings&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_log_retention: 30&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_log_deletion_policy: Delete&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# CloudFormation custom resource settings &lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_cfn_lambda_kms_decrypt_version: &amp;quot;BIUpXhvw6w3f1LTctGVZxOpFD38lCHH1&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_cfn_lambda_ecs_tasks_version: &amp;quot;MiOiZi.9.AHyYQcFibBAvWYFD4xFJJ1c&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we target the &lt;strong&gt;demo-resources&lt;/strong&gt; account by specifying the &lt;strong&gt;demo-resources&lt;/strong&gt; IAM &lt;strong&gt;admin&lt;/strong&gt; role in the &lt;code&gt;sts_role_arn&lt;/code&gt; variable, whilst the remaining settings configure the Intake APi application stack specify to the &lt;strong&gt;demo-resources&lt;/strong&gt; template account:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config_application_keyname&lt;/code&gt; - specifies the name of the EC2 key pair that ECS container instances will be created with.  Notice this matches the name of the &lt;a href=&#34;https://casecommons.github.io/aws-docs/web-proxy/#creating-an-ec2-key-pair&#34;&gt;EC2 key pair created earlier&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_application_ami&lt;/code&gt; - specifies the AMI ID of the image used to create the ECS container instances.  Notice this matches the ID of the &lt;a href=&#34;https://casecommons.github.io/aws-docs/web-proxy/#creating-an-ecs-ami&#34;&gt;AMI created earlier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_application_image&lt;/code&gt; - specifies the Docker image used to run the Intake API application containers.  Notice this matches the &lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-api/#creating-the-intake-api-image&#34;&gt;image we created earlier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_application_secret_key_base&lt;/code&gt; - an encrypted application setting that provides cryptographic material for an application secret key.  We will securely generate an encrypted value for this setting shortly.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_application_domain&lt;/code&gt; - specifies the base domain that our application will be served from.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_nginx_image&lt;/code&gt; - specifies the Docker image used to run the Intake API Nginx containers.  Notice this matches the &lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-api/#creating-an-nginx-image&#34;&gt;image we created earlier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_lb_certificate_arn&lt;/code&gt; - specifies the ARN of the AWS certificate manager (ACM) certificate to serve from the application load balancer for HTTPS connections.  Notice that we can specify this setting as a CloudFormation instrinsic function, as the template is configured to cast the configured value to a JSON object.  The intrinsic function imports the CloudFormation export &lt;code&gt;DemoCloudhotspotCoCertificateArn&lt;/code&gt;, which was created earlier when we &lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-api/#creating-a-certificate&#34;&gt;created the certificate&lt;/a&gt; in the security resources playbook.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_es_keyname&lt;/code&gt; - specifies the name of the EC2 key pair that ECS container instances will be created with.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_es_ami&lt;/code&gt; - specifies the AMI ID of the image used to create the ECS container instances.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_es_image&lt;/code&gt; - specifies the Docker image used to run the Intake API Elasticsearch containers.  Notice this matches the &lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-api/#creating-an-elasticsearch-image&#34;&gt;image we created earlier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_db_password&lt;/code&gt; - the encrypted password for the Intake API database.  We will securely generate an encrypted value for this setting shortly.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_cfn_lambda_kms_decrypt_version&lt;/code&gt; - the S3 object version of the KMS decrypt Lambda function used for KMS decrypt custom resources.  Notice the object version matches &lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-api/#creating-lambda-functions&#34;&gt;the version we published earlier&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_cfn_lambda_ecs_tasks_version&lt;/code&gt; - the S3 object version of the ECS tasks Lambda function used for ECS task custom resources.  Notice the object version matches &lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-api/#creating-lambda-functions&#34;&gt;the version we published earlier&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;creating-secrets-using-kms&#34;&gt;Creating Secrets using KMS&lt;/h2&gt;

&lt;p&gt;Our &lt;strong&gt;demo&lt;/strong&gt; environment settings include two settings that we need to generate encrypted values for.&lt;/p&gt;

&lt;p&gt;The approach here is to simply use the AWS Key Management Service (KMS) to encrypt the plaintext value of each secret.  We will use the KMS key that was created as part of the &lt;a href=&#34;https://casecommons.github.io/aws-docs/cloudformation-resources/&#34;&gt;CloudFormation resources&lt;/a&gt; stack.&lt;/p&gt;

&lt;p&gt;1. In the AWS console, open the &lt;strong&gt;CloudFormation &amp;gt; Exports&lt;/strong&gt; from the CloudFormation dashboard.  Copy the &lt;strong&gt;CfnMasterKey&lt;/strong&gt; export value, which defines the key ID of the KMS key we will use for encryption.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/cfn-master-key.png&#34; alt=&#34;KMS Master Key&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2. In a local shell configured with an admin profile targetting the &lt;strong&gt;demo resources&lt;/strong&gt; account, run the following command to generate ciphertext for the &lt;code&gt;config_application_secret_key_base&lt;/code&gt; variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-resources-admin
$ aws kms encrypt --key-id 11710b57-c424-4df7-ab3d-20358820edd9 --plaintext $(openssl rand -base64 32)
Enter MFA code: ******
&#39;{
    &amp;quot;KeyId&amp;quot;: &amp;quot;arn:aws:kms:us-west-2:160775127577:key/11710b57-c424-4df7-ab3d-20358820edd9&amp;quot;,
    &amp;quot;CiphertextBlob&amp;quot;: &amp;quot;AQECAHjbSbOZ8FLk7XffvdtrDewDyQKH9bOaMrY6jf+N3si+SQAAAIswgYgGCSqGSIb3DQEHBqB7MHkCAQAwdAYJKoZIhvcNAQcBMB4GCWCGSAFlAwQBLjARBAylerEZFMHMqvVgDiICARCAR36t/jpVODBIevAAeKEbHH+Tibj2/buhzmeoSiN+fm6T6CL1AE+yjRZ7B7FXp5S2RhYEwBrWLGD26r3NudZ9aj0IvLI8BwPS&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3. Copy the &lt;code&gt;CiphertextBlob&lt;/code&gt; value from the &lt;code&gt;aws kms encrypt&lt;/code&gt; command output and set the &lt;code&gt;config_application_secret_key_base&lt;/code&gt; variable in &lt;code&gt;group_vars/demo/vars.yml&lt;/code&gt; to this value:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# STS settings&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;sts_role_arn: arn:aws:iam::160775127577:role/admin&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Application settings&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_keyname: admin&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_instance_type: t2.micro&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_desired_count: 2&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_ami: ami-4662e126&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_image: 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/intake-api&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_tag: latest&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_frontend_port: 443&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_port: 3000&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_application_secret_key_base: AQECAHjbSbOZ8FLk7XffvdtrDewDyQKH9bOaMrY6jf+N3si+SQAAAIswgYgGCSqGSIb3DQEHBqB7MHkCAQAwdAYJKoZIhvcNAQcBMB4GCWCGSAFlAwQBLjARBAylerEZFMHMqvVgDiICARCAR36t/jpVODBIevAAeKEbHH+Tibj2/buhzmeoSiN+fm6T6CL1AE+yjRZ7B7FXp5S2RhYEwBrWLGD26r3NudZ9aj0IvLI8BwPS&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;config_application_domain: demo.cloudhotspot.co&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5. Repeat the &lt;code&gt;aws kms encryt&lt;/code&gt; command to generate ciphertext for the &lt;code&gt;config_db_password&lt;/code&gt; variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-resources-admin
$ aws kms encrypt --key-id 11710b57-c424-4df7-ab3d-20358820edd9 --plaintext &amp;quot;supersecretpassword&amp;quot;
Enter MFA code: ******
&#39;{
    &amp;quot;KeyId&amp;quot;: &amp;quot;arn:aws:kms:us-west-2:160775127577:key/11710b57-c424-4df7-ab3d-20358820edd9&amp;quot;,
    &amp;quot;CiphertextBlob&amp;quot;: &amp;quot;AQECAHjbSbOZ8FLk7XffvdtrDewDyQKH9bOaMrY6jf+N3si+SQAAAHEwbwYJKoZIhvcNAQcGoGIwYAIBADBbBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDLRuXWaxRLSxR5//zAIBEIAuindRhw7U4ERU7xSWH/5QX8lJ1F2cZmjHCJh6EFTkD/5iU7BGXs/PVo1iy8czgw==&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6. Copy the &lt;code&gt;CiphertextBlob&lt;/code&gt; value from the &lt;code&gt;aws kms encrypt&lt;/code&gt; command output and set the &lt;code&gt;config_db_password&lt;/code&gt; variable in &lt;code&gt;group_vars/demo/vars.yml&lt;/code&gt; to this value:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# STS settings&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;sts_role_arn: arn:aws:iam::160775127577:role/admin&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Database settings&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_db_multi_az: false&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_db_deletion_policy: Delete&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_db_storage: 10&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_db_instance_type: db.t2.micro&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_db_name: casebook_api_production&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_db_password: AQECAHjbSbOZ8FLk7XffvdtrDewDyQKH9bOaMrY6jf+N3si+SQAAAHEwbwYJKoZIhvcNAQcGoGIwYAIBADBbBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDLRuXWaxRLSxR5//zAIBEIAuindRhw7U4ERU7xSWH/5QX8lJ1F2cZmjHCJh6EFTkD/5iU7BGXs/PVo1iy8czgw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;running-the-playbook&#34;&gt;Running the Playbook&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve defined environment settings for the &lt;strong&gt;demo&lt;/strong&gt; environment targeting our &lt;strong&gt;demo-resources&lt;/strong&gt; account, let&amp;rsquo;s run the playbook.&lt;/p&gt;

&lt;p&gt;1. Ensure your local AWS environment is configured to target the &lt;strong&gt;demo-resources&lt;/strong&gt; account:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-resources-admin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Run the Ansible playbook targeting the &lt;code&gt;demo&lt;/code&gt; environment as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ ansible-playbook site.yml -e &lt;span class=&#34;nv&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo

PLAY &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Assume Role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; *************************************************************

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : set_fact&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ******************************************************
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : checking &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; sts functions are sts_disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting empty sts_session_output result&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting sts_creds &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; legacy AWS credentials are present &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;e.g. &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Ansible Tower&lt;span class=&#34;o&#34;&gt;)]&lt;/span&gt; ***
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : assume sts role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************************************
Enter MFA code: ******
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
...
...
TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-cloudformation : &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; path fact &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; s3 upload disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; **********
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-cloudformation : configure application stack&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ************************
...
...
PLAY RECAP *********************************************************************
demo                       : &lt;span class=&#34;nv&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;18&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;changed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;unreachable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;failed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.  The playbook will take approxiately 15 minutes to create the CloudFormation stack and associated resources.  Whilst the CloudFormation stack is being created, you can review the CloudFormation stack that was generated in the &lt;code&gt;build/&amp;lt;timestamp&amp;gt;&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tree build
build
└── 20170301192616
    ├── intake-api-demo-config.json
    ├── intake-api-demo-policy.json
    ├── intake-api-demo-stack.json
    └── intake-api-demo-stack.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following shows the &lt;code&gt;intake-api-demo-stack.yml&lt;/code&gt; file that was generated and uploaded to CloudFormation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;AWSTemplateFormatVersion: &amp;quot;2010-09-09&amp;quot;

Description: Intake API - demo

Parameters:
  ApplicationAMI:
    Type: String
    Description: Application Amazon Machine Image ID
  ApplicationInstanceType:
    Type: String
    Description: Application EC2 Instance Type
  ApplicationAutoscalingDesiredCount:
    Type: Number
    Description: Application AutoScaling Group Desired Count
  ApplicationDockerImage:
    Type: String
    Description: Docker Image for Application
  ApplicationDockerImageTag:
    Type: String
    Description: Docker Image Tag for Application
    Default: latest
  ApplicationKeyName:
    Type: String
    Description: EC2 Key Pair for Application SSH Access
  ApplicationLoadBalancerPort:
    Type: Number
    Description: Application Front End HTTP Port
  ApplicationPort:
    Type: Number
    Description: Application HTTP Port
  ApplicationDomain:
    Type: String
    Description: Base public domain of the application URL
  ElasticsearchAMI:
    Type: String
    Description: Elasticsearch Amazon Machine Image ID
  ElasticsearchInstanceType:
    Type: String
    Description: Elasticsearch EC2 Instance Type
  ElasticsearchAutoscalingDesiredCount:
    Type: Number
    Description: Elasticsearch AutoScaling Group Desired Count
  ElasticsearchDockerImage:
    Type: String
    Description: Docker Image for Elasticsearch
  ElasticsearchDockerImageTag:
    Type: String
    Description: Docker Image Tag for Elasticsearch
    Default: latest
  ElasticsearchKeyName:
    Type: String
    Description: EC2 Key Pair for Elasticsearch SSH Access
  ElasticsearchLoadBalancerPort:
    Type: Number
    Description: Elasticsearch Front End HTTP Port
  ElasticsearchPort:
    Type: Number
    Description: Elasticsearch Port
  Environment:
    Type: String
    Description: Stack Environment
  LogRetention:
    Type: Number
    Description: Log retention in days
  NginxDockerImage:
    Type: String
    Description: Docker Image for Nginx
  NginxDockerImageTag:
    Type: String
    Description: Docker Image Tag for Nginx
    Default: latest
  DbStorage:
    Type: Number
    Description: Database Allocated Storage
  DbInstanceType:
    Type: String
    Description: Database Instance Type
  DbName:
    Type: String
    Description: Database Name
  DbUsername:
    Type: String
    Description: Database Username
  DbPassword:
    Type: String
    NoEcho: &amp;quot;True&amp;quot;
    Description: Encrypted Database Password
  SecretKeyBaseCipher:
    Type: String
    Description: KMS Encrypted Secret Key Base
  LambdaCfnKmsDecryptVersion:
    Type: String
    Description: S3 Object Version of CloudFormation KMS Decrypt function
  LambdaCfnEcsTasksVersion:
    Type: String
    Description: S3 Object Version of CloudFormation ECS Tasks function

Resources:
  ApplicationDnsRecord:
    Type: &amp;quot;AWS::Route53::RecordSet&amp;quot;
    Properties:
      Name: 
        Fn::Sub: &amp;quot;${Environment}-intake-api.${ApplicationDomain}&amp;quot;
      TTL: &amp;quot;300&amp;quot;
      HostedZoneName: 
        Fn::Sub: &amp;quot;${ApplicationDomain}.&amp;quot;
      Type: &amp;quot;CNAME&amp;quot;
      Comment: 
        Fn::Sub: &amp;quot;Intake API Application - ${Environment}&amp;quot;
      ResourceRecords: 
        - Fn::Sub: &amp;quot;${ApplicationLoadBalancer.DNSName}&amp;quot;
  ApplicationLoadBalancer:
    Type: &amp;quot;AWS::ElasticLoadBalancingV2::LoadBalancer&amp;quot;
    Properties:
      Scheme: &amp;quot;internet-facing&amp;quot;
      SecurityGroups:
       - Ref: &amp;quot;ApplicationLoadBalancerSecurityGroup&amp;quot;
      Subnets:
        - Fn::ImportValue: DefaultPublicSubnetA
        - Fn::ImportValue: DefaultPublicSubnetB
      LoadBalancerAttributes: 
        - Key: &amp;quot;deletion_protection.enabled&amp;quot;
          Value: false
        - Key: &amp;quot;idle_timeout.timeout_seconds&amp;quot;
          Value: 30
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value:
            Fn::Sub: ${AWS::StackName}-${Environment}-lb
  ApplicationLoadBalancerApplicationListener:
    Type: &amp;quot;AWS::ElasticLoadBalancingV2::Listener&amp;quot;
    Properties:
      Certificates:
        - CertificateArn: {&amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DemoCloudhotspotCoCertificateArn&amp;quot;}
      DefaultActions:
        - TargetGroupArn: { &amp;quot;Ref&amp;quot;: &amp;quot;IntakeApiServiceTargetGroup&amp;quot; }
          Type: forward
      LoadBalancerArn: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationLoadBalancer&amp;quot; }
      Port: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationLoadBalancerPort&amp;quot; }
      Protocol: &amp;quot;HTTPS&amp;quot;
  IntakeApiServiceTargetGroup:
    Type: &amp;quot;AWS::ElasticLoadBalancingV2::TargetGroup&amp;quot;
    Properties:
      VpcId:
        Fn::ImportValue: &amp;quot;DefaultVpcId&amp;quot;
      Protocol: &amp;quot;HTTP&amp;quot;
      Port: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
      HealthCheckPath: &amp;quot;/api/v1/screenings&amp;quot;
      TargetGroupAttributes:
        - Key: &amp;quot;deregistration_delay.timeout_seconds&amp;quot;
          Value: 60
  ApplicationLoadBalancerSecurityGroup:
    Type: &amp;quot;AWS::EC2::SecurityGroup&amp;quot;
    Properties:
      VpcId:
        Fn::ImportValue: &amp;quot;DefaultVpcId&amp;quot;
      GroupDescription: &amp;quot;Intake API Load Balancer Security Group&amp;quot;
      SecurityGroupIngress:
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationLoadBalancerPort&amp;quot; }
          ToPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationLoadBalancerPort&amp;quot; }
          CidrIp: &amp;quot;0.0.0.0/0&amp;quot;
  ApplicationLoadBalancerToApplicationIngress:
    Type: &amp;quot;AWS::EC2::SecurityGroupIngress&amp;quot;
    Properties:
      IpProtocol: &amp;quot;tcp&amp;quot;
      FromPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
      ToPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
      GroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingSecurityGroup&amp;quot; }
      SourceSecurityGroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationLoadBalancerSecurityGroup&amp;quot; }
  ApplicationLoadBalancerToApplicationEgress:
    Type: &amp;quot;AWS::EC2::SecurityGroupEgress&amp;quot;
    Properties:
      IpProtocol: &amp;quot;tcp&amp;quot;
      FromPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
      ToPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
      GroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationLoadBalancerSecurityGroup&amp;quot; }
      DestinationSecurityGroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingSecurityGroup&amp;quot; }
  ApplicationAutoscaling:
    Type: &amp;quot;AWS::AutoScaling::AutoScalingGroup&amp;quot;
    DependsOn:
      - DmesgLogGroup
      - DockerLogGroup
      - EcsAgentLogGroup
      - EcsInitLogGroup
      - MessagesLogGroup
    CreationPolicy:
      ResourceSignal:
        Count: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingDesiredCount&amp;quot;}
        Timeout: &amp;quot;PT15M&amp;quot;
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingDesiredCount&amp;quot;}
        MinSuccessfulInstancesPercent: &amp;quot;100&amp;quot;
        WaitOnResourceSignals: &amp;quot;true&amp;quot;
        PauseTime: &amp;quot;PT15M&amp;quot;
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: &amp;quot;DefaultMediumSubnetA&amp;quot;
        - Fn::ImportValue: &amp;quot;DefaultMediumSubnetB&amp;quot;
      LaunchConfigurationName: { &amp;quot;Ref&amp;quot; : &amp;quot;ApplicationAutoscalingLaunchConfiguration&amp;quot; }
      MinSize: &amp;quot;0&amp;quot;
      MaxSize: &amp;quot;4&amp;quot;
      DesiredCapacity: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingDesiredCount&amp;quot;}
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-instance
          PropagateAtLaunch: &amp;quot;true&amp;quot;
  ApplicationAutoscalingLaunchConfiguration:
    Type: &amp;quot;AWS::AutoScaling::LaunchConfiguration&amp;quot;
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            10_first_run:
              command: &amp;quot;sh firstrun.sh&amp;quot;
              env:
                STACK_NAME: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::StackName&amp;quot; }
                AUTOSCALING_GROUP: &amp;quot;ApplicationAutoscaling&amp;quot;
                AWS_DEFAULT_REGION: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot; }
                ECS_CLUSTER: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCluster&amp;quot; }
                DOCKER_NETWORK_MODE: host
                PROXY_URL:
                  Fn::ImportValue: DefaultProxyURL
              cwd: &amp;quot;/home/ec2-user/&amp;quot;
          files:
            /etc/ecs/ecs.config:
              content: 
                Fn::Sub: &amp;quot;ECS_CLUSTER=${ApplicationCluster}\n&amp;quot;
    Properties:
      ImageId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAMI&amp;quot; }
      InstanceType: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationInstanceType&amp;quot; }
      IamInstanceProfile: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingInstanceProfile&amp;quot; }
      KeyName: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationKeyName&amp;quot; }
      SecurityGroups:
        - Ref: &amp;quot;ApplicationAutoscalingSecurityGroup&amp;quot;
      UserData: 
        Fn::Base64:
          Fn::Join: [&amp;quot;\n&amp;quot;, [
            &amp;quot;#!/bin/bash&amp;quot;,
            &amp;quot;set -e&amp;quot;,
            &amp;quot;Fn::Join&amp;quot;: [&amp;quot;&amp;quot;, [
              &amp;quot;Fn::Sub&amp;quot;: &amp;quot;/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ApplicationAutoscalingLaunchConfiguration --region ${AWS::Region}&amp;quot;,
              &amp;quot;    --http-proxy &amp;quot;, &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultProxyURL&amp;quot;, 
              &amp;quot;    --https-proxy &amp;quot;, &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultProxyURL&amp;quot;
            ] ],
            &amp;quot;Fn::Join&amp;quot;: [&amp;quot;&amp;quot;, [
              &amp;quot;Fn::Sub&amp;quot;: &amp;quot;/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ApplicationAutoscaling --region ${AWS::Region}&amp;quot;,
              &amp;quot;    --http-proxy &amp;quot;, &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultProxyURL&amp;quot;, 
              &amp;quot;    --https-proxy &amp;quot;, &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultProxyURL&amp;quot;
            ] ]
          ] ]
  ApplicationAutoscalingSecurityGroup:
    Type: &amp;quot;AWS::EC2::SecurityGroup&amp;quot;
    Properties:
      VpcId:
        Fn::ImportValue: &amp;quot;DefaultVpcId&amp;quot;
      GroupDescription: &amp;quot;Intake API Security Group&amp;quot;
      SecurityGroupIngress:
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: &amp;quot;DefaultManagementSubnetACidr&amp;quot;
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: &amp;quot;DefaultManagementSubnetBCidr&amp;quot;
      SecurityGroupEgress:
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: 3128
          ToPort: 3128
          DestinationSecurityGroupId:
            Fn::ImportValue: DefaultProxySecurityGroup
        - IpProtocol: &amp;quot;udp&amp;quot;
          FromPort: 53
          ToPort: 53
          CidrIp:
            Fn::Join: [&amp;quot;&amp;quot;, [
              &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultVpcDnsServer&amp;quot;, &amp;quot;/32&amp;quot;
            ] ]
        - IpProtocol: &amp;quot;udp&amp;quot;
          FromPort: 123
          ToPort: 123
          CidrIp: 0.0.0.0/0
  ApplicationToElasticsearchLoadBalancerIngress:
    Type: &amp;quot;AWS::EC2::SecurityGroupIngress&amp;quot;
    Properties:
      IpProtocol: &amp;quot;tcp&amp;quot;
      FromPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchLoadBalancerPort&amp;quot;}
      ToPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchLoadBalancerPort&amp;quot;}
      GroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchLoadBalancerSecurityGroup&amp;quot; }
      SourceSecurityGroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingSecurityGroup&amp;quot; }
  ApplicationToElasticsearchLoadBalancerEgress:
    Type: &amp;quot;AWS::EC2::SecurityGroupEgress&amp;quot;
    Properties:
      IpProtocol: &amp;quot;tcp&amp;quot;
      FromPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchLoadBalancerPort&amp;quot;}
      ToPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchLoadBalancerPort&amp;quot;}
      GroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingSecurityGroup&amp;quot; }
      DestinationSecurityGroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchLoadBalancerSecurityGroup&amp;quot; }
  ApplicationAutoscalingRole:
    Type: &amp;quot;AWS::IAM::Role&amp;quot;
    Properties:
      AssumeRolePolicyDocument:
        Version: &amp;quot;2012-10-17&amp;quot;
        Statement:
          - Effect: &amp;quot;Allow&amp;quot;
            Principal:
              Service: [ &amp;quot;ec2.amazonaws.com&amp;quot; ]
            Action: [ &amp;quot;sts:AssumeRole&amp;quot; ]
      Path: &amp;quot;/&amp;quot;
      ManagedPolicyArns: []
      Policies:
        - {&amp;quot;PolicyName&amp;quot;: &amp;quot;CloudWatchLogs&amp;quot;, &amp;quot;PolicyDocument&amp;quot;: {&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, &amp;quot;Statement&amp;quot;: [{&amp;quot;Action&amp;quot;: [&amp;quot;logs:CreateLogGroup&amp;quot;, &amp;quot;logs:CreateLogStream&amp;quot;, &amp;quot;logs:PutLogEvents&amp;quot;, &amp;quot;logs:DescribeLogStreams&amp;quot;], &amp;quot;Resource&amp;quot;: {&amp;quot;Fn::Join&amp;quot;: [&amp;quot;:&amp;quot;, [&amp;quot;arn:aws:logs&amp;quot;, {&amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot;}, {&amp;quot;Ref&amp;quot;: &amp;quot;AWS::AccountId&amp;quot;}, &amp;quot;log-group&amp;quot;, &amp;quot;intake-api-demo*&amp;quot;]]}, &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;}]}}
        - PolicyName: &amp;quot;EC2ContainerInstancePolicy&amp;quot;
          PolicyDocument:
            Statement:
              - Effect: &amp;quot;Allow&amp;quot;
                Action:
                  - &amp;quot;ecs:RegisterContainerInstance&amp;quot;
                  - &amp;quot;ecs:DeregisterContainerInstance&amp;quot;
                Resource: 
                  Fn::Sub: &amp;quot;arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ApplicationCluster}&amp;quot;
              - Effect: &amp;quot;Allow&amp;quot;
                Action:
                  - &amp;quot;ecs:DiscoverPollEndpoint&amp;quot;
                  - &amp;quot;ecs:Submit*&amp;quot;
                  - &amp;quot;ecs:Poll&amp;quot;
                  - &amp;quot;ecs:StartTelemetrySession&amp;quot;
                Resource: &amp;quot;*&amp;quot;
              - Effect: &amp;quot;Allow&amp;quot;
                Action: 
                  - &amp;quot;ecr:BatchCheckLayerAvailability&amp;quot;
                  - &amp;quot;ecr:BatchGetImage&amp;quot;
                  - &amp;quot;ecr:GetDownloadUrlForLayer&amp;quot;
                  - &amp;quot;ecr:GetAuthorizationToken&amp;quot;
                Resource: &amp;quot;*&amp;quot;
              - Effect: &amp;quot;Allow&amp;quot;
                Action:
                - &amp;quot;kms:Decrypt&amp;quot;
                - &amp;quot;kms:DescribeKey&amp;quot;
                Resource:
                  Fn::ImportValue: &amp;quot;CfnMasterKeyArn&amp;quot;
  ApplicationAutoscalingInstanceProfile:
    Type: &amp;quot;AWS::IAM::InstanceProfile&amp;quot;
    Properties:
      Path: &amp;quot;/&amp;quot;
      Roles: [ { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingRole&amp;quot; } ]
  ElasticsearchDnsRecord:
    Type: &amp;quot;AWS::Route53::RecordSet&amp;quot;
    Properties:
      Name:
        Fn::Join: [&amp;quot;&amp;quot;, [
          &amp;quot;Fn::Sub&amp;quot;: &amp;quot;${Environment}-intake-api-es.&amp;quot;,
          &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultVpcDomain&amp;quot;
        ] ]
      TTL: &amp;quot;300&amp;quot;
      HostedZoneName:
        Fn::ImportValue: DefaultVpcZone
      Type: &amp;quot;CNAME&amp;quot;
      Comment: 
        Fn::Sub: &amp;quot;Intake API Elasticsearch - ${Environment}&amp;quot;
      ResourceRecords: 
        - Fn::Sub: &amp;quot;${ElasticsearchLoadBalancer.DNSName}&amp;quot;
  ElasticsearchLoadBalancer:
    Type: &amp;quot;AWS::ElasticLoadBalancingV2::LoadBalancer&amp;quot;
    Properties:
      Scheme: &amp;quot;internal&amp;quot;
      SecurityGroups:
       - Ref: &amp;quot;ElasticsearchLoadBalancerSecurityGroup&amp;quot;
      Subnets:
        - Fn::ImportValue: DefaultHighSubnetA
        - Fn::ImportValue: DefaultHighSubnetB
      LoadBalancerAttributes: 
        - Key: &amp;quot;deletion_protection.enabled&amp;quot;
          Value: false
        - Key: &amp;quot;idle_timeout.timeout_seconds&amp;quot;
          Value: 30
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value:
            Fn::Sub: ${AWS::StackName}-${Environment}-elasticsearch-lb
  ElasticsearchLoadBalancerListener:
    Type: &amp;quot;AWS::ElasticLoadBalancingV2::Listener&amp;quot;
    Properties:
      DefaultActions:
        - TargetGroupArn: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchServiceTargetGroup&amp;quot; }
          Type: forward
      LoadBalancerArn: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchLoadBalancer&amp;quot; }
      Port: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchLoadBalancerPort&amp;quot; }
      Protocol: &amp;quot;HTTP&amp;quot;
  ElasticsearchServiceTargetGroup:
    Type: &amp;quot;AWS::ElasticLoadBalancingV2::TargetGroup&amp;quot;
    Properties:
      VpcId:
        Fn::ImportValue: &amp;quot;DefaultVpcId&amp;quot;
      Protocol: &amp;quot;HTTP&amp;quot;
      Port: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchPort&amp;quot; }
      TargetGroupAttributes:
        - Key: &amp;quot;deregistration_delay.timeout_seconds&amp;quot;
          Value: 60
  ElasticsearchLoadBalancerSecurityGroup:
    Type: &amp;quot;AWS::EC2::SecurityGroup&amp;quot;
    Properties:
      VpcId:
        Fn::ImportValue: &amp;quot;DefaultVpcId&amp;quot;
      GroupDescription: &amp;quot;Intake API Elasticsearch Load Balancer Security Group&amp;quot;
  ElasticsearchLoadBalancerToElasticsearchIngress:
    Type: &amp;quot;AWS::EC2::SecurityGroupIngress&amp;quot;
    Properties:
      IpProtocol: &amp;quot;tcp&amp;quot;
      FromPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchPort&amp;quot; }
      ToPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchPort&amp;quot; }
      GroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchAutoscalingSecurityGroup&amp;quot; }
      SourceSecurityGroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchLoadBalancerSecurityGroup&amp;quot; }
  ElasticsearchLoadBalancerToElasticsearchEgress:
    Type: &amp;quot;AWS::EC2::SecurityGroupEgress&amp;quot;
    Properties:
      IpProtocol: &amp;quot;tcp&amp;quot;
      FromPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchPort&amp;quot; }
      ToPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchPort&amp;quot; }
      GroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchLoadBalancerSecurityGroup&amp;quot; }
      DestinationSecurityGroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchAutoscalingSecurityGroup&amp;quot; }
  ElasticsearchAutoscaling:
    Type: &amp;quot;AWS::AutoScaling::AutoScalingGroup&amp;quot;
    DependsOn:
      - ElasticsearchDmesgLogGroup
      - ElasticsearchDockerLogGroup
      - ElasticsearchEcsAgentLogGroup
      - ElasticsearchEcsInitLogGroup
      - ElasticsearchMessagesLogGroup
    CreationPolicy:
      ResourceSignal:
        Count: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchAutoscalingDesiredCount&amp;quot;}
        Timeout: &amp;quot;PT15M&amp;quot;
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchAutoscalingDesiredCount&amp;quot;}
        MinSuccessfulInstancesPercent: &amp;quot;100&amp;quot;
        WaitOnResourceSignals: &amp;quot;true&amp;quot;
        PauseTime: &amp;quot;PT15M&amp;quot;
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: &amp;quot;DefaultHighSubnetA&amp;quot;
        - Fn::ImportValue: &amp;quot;DefaultHighSubnetB&amp;quot;
      LaunchConfigurationName: { &amp;quot;Ref&amp;quot; : &amp;quot;ElasticsearchAutoscalingLaunchConfiguration&amp;quot; }
      MinSize: &amp;quot;0&amp;quot;
      MaxSize: &amp;quot;4&amp;quot;
      DesiredCapacity: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchAutoscalingDesiredCount&amp;quot;}
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-ElasticsearchAutoscaling-instance
          PropagateAtLaunch: &amp;quot;true&amp;quot;
  ElasticsearchAutoscalingLaunchConfiguration:
    Type: &amp;quot;AWS::AutoScaling::LaunchConfiguration&amp;quot;
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            10_first_run:
              command: &amp;quot;sh firstrun.sh&amp;quot;
              env:
                STACK_NAME: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::StackName&amp;quot; }
                AUTOSCALING_GROUP: &amp;quot;ElasticsearchAutoscaling&amp;quot;
                AWS_DEFAULT_REGION: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot; }
                ECS_CLUSTER: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchCluster&amp;quot; }
                DOCKER_NETWORK_MODE: host
                PROXY_URL:
                  Fn::ImportValue: DefaultProxyURL
              cwd: &amp;quot;/home/ec2-user/&amp;quot;
          files:
            /etc/ecs/ecs.config:
              content: 
                Fn::Sub: &amp;quot;ECS_CLUSTER=${ElasticsearchCluster}\n&amp;quot;
    Properties:
      ImageId: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchAMI&amp;quot; }
      InstanceType: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchInstanceType&amp;quot; }
      IamInstanceProfile: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchAutoscalingInstanceProfile&amp;quot; }
      KeyName: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchKeyName&amp;quot; }
      SecurityGroups:
        - Ref: &amp;quot;ElasticsearchAutoscalingSecurityGroup&amp;quot;
      UserData: 
        Fn::Base64:
          Fn::Join: [&amp;quot;\n&amp;quot;, [
            &amp;quot;#!/bin/bash&amp;quot;,
            &amp;quot;set -e&amp;quot;,
            &amp;quot;Fn::Join&amp;quot;: [&amp;quot;&amp;quot;, [
              &amp;quot;Fn::Sub&amp;quot;: &amp;quot;/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ElasticsearchAutoscalingLaunchConfiguration --region ${AWS::Region}&amp;quot;,
              &amp;quot;    --http-proxy &amp;quot;, &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultProxyURL&amp;quot;, 
              &amp;quot;    --https-proxy &amp;quot;, &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultProxyURL&amp;quot;
            ] ],
            &amp;quot;Fn::Join&amp;quot;: [&amp;quot;&amp;quot;, [
              &amp;quot;Fn::Sub&amp;quot;: &amp;quot;/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ElasticsearchAutoscaling --region ${AWS::Region}&amp;quot;,
              &amp;quot;    --http-proxy &amp;quot;, &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultProxyURL&amp;quot;, 
              &amp;quot;    --https-proxy &amp;quot;, &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultProxyURL&amp;quot;
            ] ]
          ] ]
  ElasticsearchAutoscalingSecurityGroup:
    Type: &amp;quot;AWS::EC2::SecurityGroup&amp;quot;
    Properties:
      VpcId:
        Fn::ImportValue: &amp;quot;DefaultVpcId&amp;quot;
      GroupDescription: &amp;quot;Elasticsearch Security Group&amp;quot;
      SecurityGroupIngress:
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: &amp;quot;DefaultManagementSubnetACidr&amp;quot;
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: &amp;quot;DefaultManagementSubnetBCidr&amp;quot;
      SecurityGroupEgress:
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: 3128
          ToPort: 3128
          DestinationSecurityGroupId:
            Fn::ImportValue: DefaultProxySecurityGroup
        - IpProtocol: &amp;quot;udp&amp;quot;
          FromPort: 53
          ToPort: 53
          CidrIp:
            Fn::Join: [&amp;quot;&amp;quot;, [
              &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultVpcDnsServer&amp;quot;, &amp;quot;/32&amp;quot;
            ] ]
        - IpProtocol: &amp;quot;udp&amp;quot;
          FromPort: 123
          ToPort: 123
          CidrIp: 0.0.0.0/0
  ElasticsearchAutoscalingRole:
    Type: &amp;quot;AWS::IAM::Role&amp;quot;
    Properties:
      AssumeRolePolicyDocument:
        Version: &amp;quot;2012-10-17&amp;quot;
        Statement:
          - Effect: &amp;quot;Allow&amp;quot;
            Principal:
              Service: [ &amp;quot;ec2.amazonaws.com&amp;quot; ]
            Action: [ &amp;quot;sts:AssumeRole&amp;quot; ]
      Path: &amp;quot;/&amp;quot;
      ManagedPolicyArns: []
      Policies:
        - {&amp;quot;PolicyName&amp;quot;: &amp;quot;CloudWatchLogs&amp;quot;, &amp;quot;PolicyDocument&amp;quot;: {&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, &amp;quot;Statement&amp;quot;: [{&amp;quot;Action&amp;quot;: [&amp;quot;logs:CreateLogGroup&amp;quot;, &amp;quot;logs:CreateLogStream&amp;quot;, &amp;quot;logs:PutLogEvents&amp;quot;, &amp;quot;logs:DescribeLogStreams&amp;quot;], &amp;quot;Resource&amp;quot;: {&amp;quot;Fn::Join&amp;quot;: [&amp;quot;:&amp;quot;, [&amp;quot;arn:aws:logs&amp;quot;, {&amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot;}, {&amp;quot;Ref&amp;quot;: &amp;quot;AWS::AccountId&amp;quot;}, &amp;quot;log-group&amp;quot;, &amp;quot;intake-api-demo*&amp;quot;]]}, &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;}]}}
        - PolicyName: &amp;quot;EC2ContainerInstancePolicy&amp;quot;
          PolicyDocument:
            Statement:
              - Effect: &amp;quot;Allow&amp;quot;
                Action:
                  - &amp;quot;ecs:RegisterContainerInstance&amp;quot;
                  - &amp;quot;ecs:DeregisterContainerInstance&amp;quot;
                Resource: 
                  Fn::Sub: &amp;quot;arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ElasticsearchCluster}&amp;quot;
              - Effect: &amp;quot;Allow&amp;quot;
                Action:
                  - &amp;quot;ecs:DiscoverPollEndpoint&amp;quot;
                  - &amp;quot;ecs:Submit*&amp;quot;
                  - &amp;quot;ecs:Poll&amp;quot;
                  - &amp;quot;ecs:StartTelemetrySession&amp;quot;
                Resource: &amp;quot;*&amp;quot;
              - Effect: &amp;quot;Allow&amp;quot;
                Action: 
                  - &amp;quot;ecr:BatchCheckLayerAvailability&amp;quot;
                  - &amp;quot;ecr:BatchGetImage&amp;quot;
                  - &amp;quot;ecr:GetDownloadUrlForLayer&amp;quot;
                  - &amp;quot;ecr:GetAuthorizationToken&amp;quot;
                Resource: &amp;quot;*&amp;quot;
  ElasticsearchAutoscalingInstanceProfile:
    Type: &amp;quot;AWS::IAM::InstanceProfile&amp;quot;
    Properties:
      Path: &amp;quot;/&amp;quot;
      Roles: [ { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchAutoscalingRole&amp;quot; } ]
  ApplicationDatabase:
    Type: &amp;quot;AWS::RDS::DBInstance&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      AllocatedStorage: { &amp;quot;Ref&amp;quot;: &amp;quot;DbStorage&amp;quot; }
      AutoMinorVersionUpgrade: &amp;quot;true&amp;quot;
      BackupRetentionPeriod: &amp;quot;7&amp;quot;
      PreferredBackupWindow: &amp;quot;9:00-11:00&amp;quot;
      PreferredMaintenanceWindow: &amp;quot;sun:11:30-sun:13:00&amp;quot;
      StorageType: &amp;quot;gp2&amp;quot;
      DBInstanceClass: { &amp;quot;Ref&amp;quot;: &amp;quot;DbInstanceType&amp;quot; }
      Engine: &amp;quot;postgres&amp;quot;
      EngineVersion: &amp;quot;9.5&amp;quot;
      MasterUsername: { &amp;quot;Ref&amp;quot;: &amp;quot;DbUsername&amp;quot; }
      MasterUserPassword:
        Fn::Sub: ${DbPasswordDecrypt.Plaintext}
      DBSubnetGroupName: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationDatabaseSubnetGroup&amp;quot; }
      VPCSecurityGroups:
        - { &amp;quot;Ref&amp;quot; : &amp;quot;ApplicationDatabaseSecurityGroup&amp;quot; }
      MultiAZ: &amp;quot;False&amp;quot;
      AvailabilityZone:
        Fn::Sub: &amp;quot;${AWS::Region}a&amp;quot;
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;intake-api-demo-ApplicationDatabase&amp;quot;
  ApplicationDatabaseSubnetGroup:
    Type: &amp;quot;AWS::RDS::DBSubnetGroup&amp;quot;
    Properties:
      DBSubnetGroupDescription: &amp;quot;intake-api-demo-ApplicationDatabase-db-subnet-group&amp;quot;
      SubnetIds: 
        - Fn::ImportValue: DefaultHighSubnetA
        - Fn::ImportValue: DefaultHighSubnetB
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;intake-api-demo-ApplicationDatabase-db-subnet-group&amp;quot;
  ApplicationDatabaseSecurityGroup:
    Type: &amp;quot;AWS::EC2::SecurityGroup&amp;quot;
    Properties:
      GroupDescription: &amp;quot;intake-api-demo-ApplicationDatabase-sg&amp;quot;
      VpcId:
        Fn::ImportValue: DefaultVpcId
      SecurityGroupEgress:
        - IpProtocol: &amp;quot;icmp&amp;quot;
          FromPort: -1
          ToPort: -1
          CidrIp: &amp;quot;192.0.2.0/24&amp;quot;
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value: &amp;quot;intake-api-demo-ApplicationDatabase-sg&amp;quot;
  ApplicationAutoscalingToApplicationDatabaseIngressTcp5432:
    Type: &amp;quot;AWS::EC2::SecurityGroupIngress&amp;quot;
    Properties:
      IpProtocol: &amp;quot;tcp&amp;quot;
      FromPort: &amp;quot;5432&amp;quot;
      ToPort: &amp;quot;5432&amp;quot;
      GroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationDatabaseSecurityGroup&amp;quot; }
      SourceSecurityGroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingSecurityGroup&amp;quot; }
  ApplicationAutoscalingToApplicationDatabaseEgressTcp5432:
    Type: &amp;quot;AWS::EC2::SecurityGroupEgress&amp;quot;
    Properties:
      IpProtocol: &amp;quot;tcp&amp;quot;
      FromPort: &amp;quot;5432&amp;quot;
      ToPort: &amp;quot;5432&amp;quot;
      GroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingSecurityGroup&amp;quot; }
      DestinationSecurityGroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationDatabaseSecurityGroup&amp;quot; }
  ApplicationCluster:
    Type: &amp;quot;AWS::ECS::Cluster&amp;quot;
  ApplicationTaskDefinition:
    Type: &amp;quot;AWS::ECS::TaskDefinition&amp;quot;
    Properties:
      NetworkMode: host
      Volumes:
        - Name: webroot
          Host: {}
      ContainerDefinitions:
      - Name: intake-api
        Image:
          Fn::Sub: ${ApplicationDockerImage}:${ApplicationDockerImageTag}
        MemoryReservation: 500
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: 
              Fn::Sub: ${AWS::StackName}/ecs/IntakeApiService/intake-api
            awslogs-region: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot; }
            awslogs-stream-prefix: docker
        Environment:
          - Name: RAILS_ENV
            Value: production
          - Name: PG_HOST
            Value:
              Fn::Sub: ${ApplicationDatabase.Endpoint.Address}
          - Name: DATABASE_NAME
            Value: { &amp;quot;Ref&amp;quot;: &amp;quot;DbName&amp;quot; }
          - Name: PG_USER
            Value: { &amp;quot;Ref&amp;quot;: &amp;quot;DbUsername&amp;quot; }
          - Name: KMS_PG_PASSWORD
            Value: { &amp;quot;Ref&amp;quot;: &amp;quot;DbPassword&amp;quot; }
          - Name: KMS_SECRET_KEY_BASE
            Value: { &amp;quot;Ref&amp;quot;: &amp;quot;SecretKeyBaseCipher&amp;quot; }
          - Name: ELASTICSEARCH_URL
            Value:
              Fn::Join: [&amp;quot;&amp;quot;, [
                &amp;quot;http://&amp;quot;,
                &amp;quot;Fn::Sub&amp;quot;: &amp;quot;${Environment}-intake-api-es.&amp;quot;,
                &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultVpcDomain&amp;quot;, &amp;quot;:&amp;quot;,
                &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchPort&amp;quot;
              ] ]
          - Name: AWS_DEFAULT_REGION
            Value: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot; }
          - Name: http_proxy
            Value:
              Fn::ImportValue: &amp;quot;DefaultProxyURL&amp;quot;
          - Name: https_proxy
            Value:
              Fn::ImportValue: &amp;quot;DefaultProxyURL&amp;quot;
          - Name: no_proxy
            Value:
              Fn::Join: [&amp;quot;&amp;quot;, [
                &amp;quot;169.254.169.254,&amp;quot;,
                &amp;quot;Fn::Sub&amp;quot;: &amp;quot;${Environment}-intake-api-es.&amp;quot;,
                &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultVpcDomain&amp;quot;
              ] ]
          - Name: CLEAR_PROXY
            Value: &amp;quot;true&amp;quot;
        MountPoints:
          - SourceVolume: webroot
            ContainerPath: /tmp
        Command:
          - bundle
          - exec
          - puma
          - -v
          - -e
          - production
          - -b
          - unix:///tmp/app.sock
          - -C
          - config/puma.rb
      - Name: nginx
        Image:
          Fn::Sub: ${NginxDockerImage}:${NginxDockerImageTag}
        MemoryReservation: 200
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: 
              Fn::Sub: ${AWS::StackName}/ecs/IntakeApiService/nginx
            awslogs-region: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot; }
        PortMappings:
        - ContainerPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
          Protocol: tcp
        Environment:
          - Name: HTTP_PORT 
            Value: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
          - Name: WEB_ROOT
            Value: /intake_api_prototype/public
          - Name: UPSTREAM_URL
            Value: unix:///tmp/app.sock
          - Name: HEALTHCHECK
            Value: 
              Fn::Sub: curl -fs localhost:${ApplicationPort}/api/v1/screenings
        MountPoints:
          - SourceVolume: webroot
            ContainerPath: /tmp
        VolumesFrom:
          - SourceContainer: intake-api
            ReadOnly: &amp;quot;true&amp;quot;
  AdhocTaskDefinition:
    Type: &amp;quot;AWS::ECS::TaskDefinition&amp;quot;
    Properties:
      NetworkMode: host
      ContainerDefinitions:
      - Name: intake-api
        Image:
          Fn::Sub: ${ApplicationDockerImage}:${ApplicationDockerImageTag}
        MemoryReservation: 100
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: 
              Fn::Sub: ${AWS::StackName}/ecs/IntakeApiService/adhoc
            awslogs-region: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot; }
        Environment:
          - Name: RAILS_ENV
            Value: production
          - Name: PG_HOST
            Value:
              Fn::Sub: ${ApplicationDatabase.Endpoint.Address}
          - Name: DATABASE_NAME
            Value: { &amp;quot;Ref&amp;quot;: &amp;quot;DbName&amp;quot; }
          - Name: PG_USER
            Value: { &amp;quot;Ref&amp;quot;: &amp;quot;DbUsername&amp;quot; }
          - Name: KMS_PG_PASSWORD
            Value: { &amp;quot;Ref&amp;quot;: &amp;quot;DbPassword&amp;quot; }
          - Name: ELASTICSEARCH_URL
            Value:
              Fn::Join: [&amp;quot;&amp;quot;, [
                &amp;quot;http://&amp;quot;,
                &amp;quot;Fn::Sub&amp;quot;: &amp;quot;${Environment}-intake-api-es.&amp;quot;,
                &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultVpcDomain&amp;quot;, &amp;quot;:&amp;quot;,
                &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchPort&amp;quot;
              ] ]
          - Name: AWS_DEFAULT_REGION
            Value: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot; }
          - Name: http_proxy
            Value:
              Fn::ImportValue: &amp;quot;DefaultProxyURL&amp;quot;
          - Name: https_proxy
            Value:
              Fn::ImportValue: &amp;quot;DefaultProxyURL&amp;quot;
          - Name: no_proxy
            Value:
              Fn::Join: [&amp;quot;&amp;quot;, [
                &amp;quot;169.254.169.254,&amp;quot;,
                &amp;quot;Fn::Sub&amp;quot;: &amp;quot;${Environment}-intake-api-es.&amp;quot;,
                &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultVpcDomain&amp;quot;
              ] ]
          - Name: CLEAR_PROXY
            Value: &amp;quot;true&amp;quot;
  IntakeApiService:
    Type: &amp;quot;AWS::ECS::Service&amp;quot;
    DependsOn:
      - ApplicationLoadBalancer
      - ApplicationAutoscaling
      - IntakeApiServiceLogGroup
      - IntakeApiNginxLogGroup
      - DbCreateTask
      - DbMigrateTask
      - SearchMigrateTask
      - SearchReindexTask
    Properties:
      Cluster: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCluster&amp;quot; }
      TaskDefinition: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationTaskDefinition&amp;quot; }
      DesiredCount: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingDesiredCount&amp;quot;}
      DeploymentConfiguration:
          MinimumHealthyPercent: 50
          MaximumPercent: 200
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
          TargetGroupArn: { &amp;quot;Ref&amp;quot;: &amp;quot;IntakeApiServiceTargetGroup&amp;quot; }
      Role: { &amp;quot;Ref&amp;quot;: &amp;quot;EcsServiceRole&amp;quot; }
  EcsServiceRole:
    Type: &amp;quot;AWS::IAM::Role&amp;quot;
    Properties:
      AssumeRolePolicyDocument:
        Version: &amp;quot;2012-10-17&amp;quot;
        Statement:
          - Effect: &amp;quot;Allow&amp;quot;
            Principal: 
              Service: [ &amp;quot;ecs.amazonaws.com&amp;quot; ]
            Action: [ &amp;quot;sts:AssumeRole&amp;quot; ]
      Path: &amp;quot;/&amp;quot;
      ManagedPolicyArns:
        - &amp;quot;arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole&amp;quot;
  ElasticsearchCluster:
    Type: &amp;quot;AWS::ECS::Cluster&amp;quot;
  ElasticsearchTaskDefinition:
    Type: &amp;quot;AWS::ECS::TaskDefinition&amp;quot;
    Properties:
      NetworkMode: host
      Volumes:
        - Name: esdata
          Host: 
            SourcePath: /ecs/esdata
      ContainerDefinitions:
      - Name: elasticsearch
        Image:
          Fn::Sub: ${ElasticsearchDockerImage}:${ElasticsearchDockerImageTag}
        MemoryReservation: 500
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: 
              Fn::Sub: ${AWS::StackName}/ecs/ElasticsearchService/elasticsearch
            awslogs-region: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot; }
        PortMappings:
        - ContainerPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchPort&amp;quot; }
          Protocol: tcp
        MountPoints:
          - SourceVolume: esdata
            ContainerPath: /var/lib/elasticsearch/data
  ElasticsearchService:
    Type: &amp;quot;AWS::ECS::Service&amp;quot;
    DependsOn:
      - ApplicationLoadBalancer
      - ElasticsearchAutoscaling
      - ElasticsearchServiceLogGroup
    Properties:
      Cluster: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchCluster&amp;quot; }
      TaskDefinition: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchTaskDefinition&amp;quot; }
      DesiredCount: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchAutoscalingDesiredCount&amp;quot;}
      DeploymentConfiguration:
          MinimumHealthyPercent: 0
          MaximumPercent: 200
      LoadBalancers:
        - ContainerName: elasticsearch
          ContainerPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchPort&amp;quot; }
          TargetGroupArn: { &amp;quot;Ref&amp;quot;: &amp;quot;ElasticsearchServiceTargetGroup&amp;quot; }
      Role: { &amp;quot;Ref&amp;quot;: &amp;quot;EcsServiceRole&amp;quot; }
  DbCreateTask:
    Type: &amp;quot;Custom::ECSTask&amp;quot;
    DependsOn:
      - ApplicationAutoscaling
      - ApplicationDatabase
    Properties:
      ServiceToken:
        Fn::Sub: ${EcsTaskRunner.Arn}
      Cluster: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCluster&amp;quot; }
      TaskDefinition: { &amp;quot;Ref&amp;quot;: &amp;quot;AdhocTaskDefinition&amp;quot; }
      Count: 1
      Overrides:
        containerOverrides:
          - name: intake-api
            command:
              - bundle
              - exec
              - rake
              - db:create
  DbMigrateTask:
    Type: &amp;quot;Custom::ECSTask&amp;quot;
    DependsOn:
      - DbCreateTask
    Properties:
      ServiceToken:
        Fn::Sub: ${EcsTaskRunner.Arn}
      Cluster: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCluster&amp;quot; }
      TaskDefinition: { &amp;quot;Ref&amp;quot;: &amp;quot;AdhocTaskDefinition&amp;quot; }
      Count: 1
      Overrides:
        containerOverrides:
          - name: intake-api
            command:
              - bundle
              - exec
              - rake
              - db:migrate
  SearchMigrateTask:
    Type: &amp;quot;Custom::ECSTask&amp;quot;
    DependsOn:
      - DbMigrateTask
      - ElasticsearchService
    Properties:
      ServiceToken:
        Fn::Sub: ${EcsTaskRunner.Arn}
      Cluster: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCluster&amp;quot; }
      TaskDefinition: { &amp;quot;Ref&amp;quot;: &amp;quot;AdhocTaskDefinition&amp;quot; }
      Count: 1
      Overrides:
        containerOverrides:
          - name: intake-api
            command:
              - bundle
              - exec
              - rake
              - search:migrate
  SearchReindexTask:
    Type: &amp;quot;Custom::ECSTask&amp;quot;
    DependsOn:
      - SearchMigrateTask
    Properties:
      ServiceToken:
        Fn::Sub: ${EcsTaskRunner.Arn}
      Cluster: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCluster&amp;quot; }
      TaskDefinition: { &amp;quot;Ref&amp;quot;: &amp;quot;AdhocTaskDefinition&amp;quot; }
      Count: 1
      Overrides:
        containerOverrides:
          - name: intake-api
            command:
              - bundle
              - exec
              - rake
              - search:reindex
  DmesgLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/dmesg
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  DockerLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/docker
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  EcsAgentLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/ecs/ecs-agent
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  EcsInitLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/ecs/ecs-init
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  MessagesLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/messages
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  IntakeApiServiceLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/IntakeApiService/intake-api
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  IntakeApiNginxLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/IntakeApiService/nginx
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  IntakeApiAdhocLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/IntakeApiService/adhoc
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  ElasticsearchDmesgLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/ElasticsearchAutoscaling/var/log/dmesg
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  ElasticsearchDockerLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ElasticsearchAutoscaling/var/log/docker
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  ElasticsearchEcsAgentLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/ElasticsearchAutoscaling/var/log/ecs/ecs-agent
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  ElasticsearchEcsInitLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ElasticsearchAutoscaling/var/log/ecs/ecs-init
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  ElasticsearchMessagesLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ElasticsearchAutoscaling/var/log/messages
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  ElasticsearchServiceLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/ElasticsearchService/elasticsearch
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  DbPasswordDecrypt:
    Type: &amp;quot;Custom::KMSDecrypt&amp;quot;
    Properties:
      ServiceToken: 
        Fn::Sub: ${KMSDecrypter.Arn}
      Ciphertext: { &amp;quot;Ref&amp;quot;: &amp;quot;DbPassword&amp;quot; }
  KMSDecrypterLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-cfnKmsDecrypt
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  KMSDecrypter:
    Type: &amp;quot;AWS::Lambda::Function&amp;quot;
    DependsOn:
      - &amp;quot;KMSDecrypterLogGroup&amp;quot;
    Properties:
      Description: 
        Fn::Sub: &amp;quot;${AWS::StackName} KMS Decrypter&amp;quot;
      Handler: &amp;quot;cfn_kms_decrypt.handler&amp;quot;
      MemorySize: 128
      Runtime: &amp;quot;python2.7&amp;quot;
      Timeout: 300
      Role: 
        Fn::Sub: ${KMSDecrypterRole.Arn}
      FunctionName: 
        Fn::Sub: &amp;quot;${AWS::StackName}-cfnKmsDecrypt&amp;quot;
      Code:
        S3Bucket: 
          Fn::Sub: &amp;quot;${AWS::AccountId}-cfn-lambda&amp;quot;
        S3Key: &amp;quot;cfnKmsDecrypt.zip&amp;quot;
        S3ObjectVersion: { &amp;quot;Ref&amp;quot;: &amp;quot;LambdaCfnKmsDecryptVersion&amp;quot; }
  KMSDecrypterRole:
    Type: &amp;quot;AWS::IAM::Role&amp;quot;
    Properties:
      Path: &amp;quot;/&amp;quot;
      AssumeRolePolicyDocument:
        Version: &amp;quot;2012-10-17&amp;quot;
        Statement:
        - Effect: &amp;quot;Allow&amp;quot;
          Principal: {&amp;quot;Service&amp;quot;: &amp;quot;lambda.amazonaws.com&amp;quot;}
          Action: [ &amp;quot;sts:AssumeRole&amp;quot; ]
      Policies:
      - PolicyName: &amp;quot;KMSDecrypterPolicy&amp;quot;
        PolicyDocument:
          Version: &amp;quot;2012-10-17&amp;quot;
          Statement:
          - Sid: &amp;quot;Decrypt&amp;quot;
            Effect: &amp;quot;Allow&amp;quot;
            Action:
            - &amp;quot;kms:Decrypt&amp;quot;
            - &amp;quot;kms:DescribeKey&amp;quot;
            Resource:
              Fn::ImportValue: &amp;quot;CfnMasterKeyArn&amp;quot;
          - Sid: &amp;quot;ManageLambdaLogs&amp;quot;
            Effect: &amp;quot;Allow&amp;quot;
            Action:
            - &amp;quot;logs:CreateLogGroup&amp;quot;
            - &amp;quot;logs:CreateLogStream&amp;quot;
            - &amp;quot;logs:PutLogEvents&amp;quot;
            - &amp;quot;logs:PutRetentionPolicy&amp;quot;
            - &amp;quot;logs:PutSubscriptionFilter&amp;quot;
            - &amp;quot;logs:DescribeLogStreams&amp;quot;
            - &amp;quot;logs:DeleteLogGroup&amp;quot;
            - &amp;quot;logs:DeleteRetentionPolicy&amp;quot;
            - &amp;quot;logs:DeleteSubscriptionFilter&amp;quot;
            Resource: 
              Fn::Sub: &amp;quot;arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-cfnKmsDecrypt:*:*&amp;quot;
  EcsTaskRunnerLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-cfnEcsTasks
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  EcsTaskRunner:
    Type: &amp;quot;AWS::Lambda::Function&amp;quot;
    DependsOn:
      - &amp;quot;EcsTaskRunnerLogGroup&amp;quot;
    Properties:
      Description: 
        Fn::Sub: &amp;quot;${AWS::StackName} ECS Task Runner&amp;quot;
      Handler: &amp;quot;ecs_tasks.handler&amp;quot;
      MemorySize: 128
      Runtime: &amp;quot;python2.7&amp;quot;
      Timeout: 300
      Role: 
        Fn::Sub: ${EcsTaskRunnerRole.Arn}
      FunctionName: 
        Fn::Sub: &amp;quot;${AWS::StackName}-cfnEcsTasks&amp;quot;
      Code:
        S3Bucket: 
          Fn::Sub: &amp;quot;${AWS::AccountId}-cfn-lambda&amp;quot;
        S3Key: &amp;quot;cfnEcsTasks.zip&amp;quot;
        S3ObjectVersion: { &amp;quot;Ref&amp;quot;: &amp;quot;LambdaCfnEcsTasksVersion&amp;quot; }
  EcsTaskRunnerRole:
    Type: &amp;quot;AWS::IAM::Role&amp;quot;
    Properties:
      Path: &amp;quot;/&amp;quot;
      AssumeRolePolicyDocument:
        Version: &amp;quot;2012-10-17&amp;quot;
        Statement:
        - Effect: &amp;quot;Allow&amp;quot;
          Principal: {&amp;quot;Service&amp;quot;: &amp;quot;lambda.amazonaws.com&amp;quot;}
          Action: [ &amp;quot;sts:AssumeRole&amp;quot; ]
      Policies:
      - PolicyName: &amp;quot;ECSPermissions&amp;quot;
        PolicyDocument:
          Version: &amp;quot;2012-10-17&amp;quot;
          Statement:
          - Sid: &amp;quot;TaskDefinition&amp;quot;
            Effect: &amp;quot;Allow&amp;quot;
            Action:
            - &amp;quot;ecs:DescribeTaskDefinition&amp;quot;
            Resource: &amp;quot;*&amp;quot;
          - Sid: &amp;quot;EcsTasks&amp;quot;
            Effect: &amp;quot;Allow&amp;quot;
            Action:
            - &amp;quot;ecs:DescribeTasks&amp;quot;
            - &amp;quot;ecs:ListTasks&amp;quot;
            - &amp;quot;ecs:RunTask&amp;quot;
            - &amp;quot;ecs:StartTask&amp;quot;
            - &amp;quot;ecs:StopTask&amp;quot;
            - &amp;quot;ecs:DescribeContainerInstances&amp;quot;
            - &amp;quot;ecs:ListContainerInstances&amp;quot;
            Resource: &amp;quot;*&amp;quot;
            Condition:
              ArnEquals:
                ecs:cluster: 
                  Fn::Sub: &amp;quot;arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ApplicationCluster}&amp;quot;
          - Sid: &amp;quot;ManageLambdaLogs&amp;quot;
            Effect: &amp;quot;Allow&amp;quot;
            Action:
            - &amp;quot;logs:CreateLogGroup&amp;quot;
            - &amp;quot;logs:CreateLogStream&amp;quot;
            - &amp;quot;logs:PutLogEvents&amp;quot;
            - &amp;quot;logs:PutRetentionPolicy&amp;quot;
            - &amp;quot;logs:PutSubscriptionFilter&amp;quot;
            - &amp;quot;logs:DescribeLogStreams&amp;quot;
            - &amp;quot;logs:DeleteLogGroup&amp;quot;
            - &amp;quot;logs:DeleteRetentionPolicy&amp;quot;
            - &amp;quot;logs:DeleteSubscriptionFilter&amp;quot;
            Resource: 
              Fn::Sub: &amp;quot;arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-cfnEcsTasks:*:*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Once the playbook execution completes successfully, login to the &lt;strong&gt;demo-resources&lt;/strong&gt; account.  You should see a new CloudFormation stack called &lt;strong&gt;intake-api-demo&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/intake-api-demo-stack.png&#34; alt=&#34;Intake API Demo Stack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5. Select the &lt;strong&gt;intake-api-demo&lt;/strong&gt; stack and click on the &lt;strong&gt;Events&lt;/strong&gt; tab.  Note that events are shown in chronological order bottom to top.&lt;/p&gt;

&lt;p&gt;Here we see an example of an ECS Task Definition being created, and various CloudWatch Log groups being created:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/intake-api-demo-events-1.png&#34; alt=&#34;Intake API Demo Stack Events&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next we see the KMS Decrypter Lambda function and an associated KMS Decrypt custom resource for decrypting the KMS encrypted database password:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/intake-api-demo-events-2.png&#34; alt=&#34;Intake API Demo Stack Events&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can see each autoscaling group instance signalling SUCCESS to create each autoscaling group, after which ECS tasks are executed sequentially to create the database schema, run any database migrations, create/update and reindex the Elasticsearch indexes, and finally the Intake API ECS service is started successfully:
&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/intake-api-demo-events-3.png&#34; alt=&#34;Intake API Demo Stack Events&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6. You can verify the Intake API is functional by querying the URL &lt;code&gt;https://demo-intake-api.demo.cloudhotspot.co/api/v1/screenings&lt;/code&gt;, which should return an empty array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -s https://demo-intake-api.demo.cloudhotspot.co/api/v1/screenings
[]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;We established DNS delegation and created a wildcard certificate for the &lt;code&gt;demo.cloudhotspot.co&lt;/code&gt; domain, and then published a number of Docker images required for the Intake API stack to the ECR repositories created earlier in this tutotial.  We published Lambda functions required to run CloudFormation custom resources in the Lambda S3 bucket we created earlier in the CloudFormation resources stack.  We then created a new environment in the Intake API playbook, learned how to encrypt secrets using the AWS KMS key created earlier in the CloudFormation resources stack, and finally successully deployed the Intake API stack.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intake Accelerator Stack</title>
      <link>https://casecommons.github.io/aws-docs/intake-accelerator/</link>
      <pubDate>Mon, 27 Feb 2017 02:59:17 +1300</pubDate>
      
      <guid>https://casecommons.github.io/aws-docs/intake-accelerator/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;We have established all of the shared resource stacks in our &lt;strong&gt;demo-users&lt;/strong&gt; and &lt;strong&gt;demo-resources&lt;/strong&gt; accounts, and created the Intake API application stack.&lt;/p&gt;

&lt;p&gt;We will now deploy the Intake Accelerator application to our &lt;strong&gt;demo-resources&lt;/strong&gt; account, creating a &lt;strong&gt;demo&lt;/strong&gt; environment, with the Intake Accelerator application published at &lt;code&gt;https://demo-intake.demo.cloudhotspot.co&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;The Intake Accelerator stack relies on a number of supporting services and resources that we created in the &lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-api/&#34;&gt;Intake API Stack section&lt;/a&gt; including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-api/#configuring-dns-delegation&#34;&gt;Configuring DNS Delegation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-api/#creating-a-certificate&#34;&gt;Creating a Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-api/#creating-an-nginx-image&#34;&gt;Creating an Nginx Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-api/#creating-the-intake-base-image&#34;&gt;Creating the Intake Base Image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;creating-the-intake-image&#34;&gt;Creating the Intake Image&lt;/h2&gt;

&lt;p&gt;The Intake Accelerator Docker image needs to be published to the &lt;strong&gt;casecommons/intake&lt;/strong&gt; ECR repository, so that it is available to ECS instances when we deploy the CloudFormation stack for running the Intake API application.&lt;/p&gt;

&lt;p&gt;1. Clone the Intake application from the following forked repository (&lt;a href=&#34;https://github.com/mixja/intake&#34;&gt;https://github.com/mixja/intake&lt;/a&gt;) to your local environment and ensure you checkout the &lt;strong&gt;production_workflow&lt;/strong&gt; branch:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;$ git clone git@github.com&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mixja&lt;/span&gt;/&lt;span class=&#34;n&#34;&gt;intake&lt;/span&gt;.&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;Cloning&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;intake&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;remote&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Counting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;: 8913&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;done&lt;/span&gt;.
&lt;span class=&#34;nf&#34;&gt;remote&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compressing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;: 100% (19/19)&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;done&lt;/span&gt;.
&lt;span class=&#34;nf&#34;&gt;remote&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Total&lt;/span&gt; 8913 (&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt; 8)&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reused&lt;/span&gt; 4 (&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt; 4)&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pack&lt;/span&gt;-&lt;span class=&#34;n&#34;&gt;reused&lt;/span&gt; 8890
&lt;span class=&#34;nf&#34;&gt;Receiving objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; 100% (8913/8913)&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 2.68 &lt;span class=&#34;n&#34;&gt;MiB&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 974.00 &lt;span class=&#34;n&#34;&gt;KiB&lt;/span&gt;/&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;done&lt;/span&gt;.
&lt;span class=&#34;nf&#34;&gt;Resolving deltas&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; 100% (6329/6329)&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;done&lt;/span&gt;.
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;intake&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;checkout&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;production_workflow&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;Branch&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;production_workflow&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;track&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;remote&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;branch&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;production_workflow&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;origin.&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;Switched&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;branch&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;production_workflow&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2. Open the &lt;code&gt;Makefile&lt;/code&gt; at the root of the &lt;strong&gt;intake&lt;/strong&gt; repository and modify the highlighted settings:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Project variables&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;PROJECT_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; intake_accelerator
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ORG_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; casecommons
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;REPO_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; intake
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;DOCKER_REGISTRY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;160775127577&lt;/span&gt;.dkr.ecr.us-west-2.amazonaws.com
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;nv&#34;&gt;AWS_ACCOUNT_ID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;160775127577&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DOCKER_LOGIN_EXPRESSION&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;aws ecr get-login --registry-ids &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;AWS_ACCOUNT_ID&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we ensure the &lt;code&gt;Makefile&lt;/code&gt; settings are configured with the correct Docker registry name (&lt;code&gt;DOCKER_REGISTRY&lt;/code&gt;), organization name (&lt;code&gt;ORG_NAME&lt;/code&gt;), repository name (&lt;code&gt;REPO_NAME&lt;/code&gt;) and AWS account ID (&lt;code&gt;AWS_ACCOUNT_ID&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;3. Open the &lt;code&gt;docker/release/Dockerfile&lt;/code&gt; file and modify the &lt;code&gt;FROM&lt;/code&gt; directive to reference the &lt;strong&gt;intake-base&lt;/strong&gt; image you published earlier:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;err&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/intake-base&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;MAINTAINER&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Pema&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Geyleg&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;lt;pema@casecommons.org&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;HEALTHCHECK --interval=3s --retries=20 CMD ${HEALTHCHECK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;-&lt;span class=&#34;n&#34;&gt;curl&lt;/span&gt; -&lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;localhost&lt;/span&gt;:${&lt;span class=&#34;n&#34;&gt;HTTP_PORT&lt;/span&gt;:-3000}}
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4. Open the &lt;code&gt;docker/release/docker-compose.yml&lt;/code&gt; file and modify the &lt;code&gt;image&lt;/code&gt; variable for the &lt;code&gt;nginx&lt;/code&gt;, &lt;code&gt;intake-api&lt;/code&gt; and &lt;code&gt;intake-api-nginx&lt;/code&gt; services to reference the images published to the &lt;strong&gt;demo-resources&lt;/strong&gt; EC2 Container Registry:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;160775127577.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dkr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ecr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;us&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;west&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;amazonaws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nginx&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;${HTTP_PORT}&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;intake&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;160775127577.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dkr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ecr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;us&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;west&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;amazonaws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;intake&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;api&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;intake&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;webroot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;intake_api_prototype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;intake&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;intake&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;160775127577.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dkr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ecr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;us&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;west&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;amazonaws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nginx&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;${HTTP_PORT}&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4. Run the &lt;code&gt;make login&lt;/code&gt; command to login to the ECR repository for the &lt;strong&gt;demo-resources&lt;/strong&gt; account:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-resources-admin
$ make login
=&amp;gt; Logging in to Docker registry ...
Enter MFA code: *****
Login Succeeded
=&amp;gt; Logged in to Docker registry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5. Run the &lt;code&gt;make test&lt;/code&gt; command, which will run unit tests in a Docker build container:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make test
=&amp;gt; Pulling latest images...
Pulling redis (redis:3.0)...
...
...
=&amp;gt; Running tests...
Creating network &amp;quot;intakeacceleratortest_default&amp;quot; with the default driver
Creating intakeacceleratortest_redis_1
Creating intakeacceleratortest_rspec_test_1
Attaching to intakeacceleratortest_rspec_test_1
...
...
javascript_test_1  | TOTAL: 558 SUCCESS
javascript_test_1  | TOTAL: 558 SUCCESS
javascript_test_1  | 01 03 2017 08:57:37.695:WARN [launcher]: Firefox was not killed in 2000 ms, sending SIGKILL.
intakeacceleratortest_javascript_test_1 exited with code 0
=&amp;gt; Testing complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6. Run the &lt;code&gt;make build&lt;/code&gt; command, which will build a Debian package from the application source and copy it to the local &lt;code&gt;target&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make build
=&amp;gt; Building images...
Building builder
Step 1/12 : FROM casecommons/ca_intake_base_image:latest
...
...
builder_1          | {:timestamp=&amp;gt;&amp;quot;2017-03-01T09:00:19.538128+0000&amp;quot;, :message=&amp;gt;&amp;quot;Created package&amp;quot;, :path=&amp;gt;&amp;quot;/build_artefacts/intake-accelerator_1.b869606_amd64.deb&amp;quot;}
intakeacceleratortest_builder_1 exited with code 0
=&amp;gt; Copying application artifacts...
=&amp;gt; Build complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7. Run the &lt;code&gt;make release&lt;/code&gt; command, which will build the release image for the Intake API application, start a minimal production-like environment and run acceptance tests.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make release
$ make release
=&amp;gt; Pulling latest images...
Pulling intake-api (160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/intake-api:latest)...
latest: Pulling from casecommons/intake-api
Digest: sha256:04cfa51f3d684b0a20132b7d515322816c5d49efccef4eabb9b98e6e03f1e211
...
...
=&amp;gt; Starting Intake API...
Creating intakeaccelerator_intake-api_1
Creating intakeaccelerator_intake-api-nginx_1
=&amp;gt; Starting redis...
Creating intakeaccelerator_redis_1
=&amp;gt; Starting application...
Creating intakeaccelerator_app_1
=&amp;gt; Starting nginx...
Creating intakeaccelerator_nginx_1
=&amp;gt; Application is running at http://172.16.154.128:32801
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8. Run the &lt;code&gt;make tag latest&lt;/code&gt; command, which will tag the image with the &lt;code&gt;latest&lt;/code&gt; tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make tag latest
=&amp;gt; Tagging release image with tags latest...
=&amp;gt; Tagging complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;9. Run the &lt;code&gt;make publish&lt;/code&gt; command, which will publish the image to your ECR repository:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make publish
=&amp;gt; Publishing release image to 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/intake...
The push refers to a repository [160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/intake
250774d98791: Pushed
d6e0c772e63d: Pushed
0eb3fff043d9: Pushed
cc269cc723a3: Pushed
985910e761d0: Pushed
e302f1438372: Pushed
7cebbf491a73: Pushed
ba3d5a81c1e6: Pushed
5d53f93940f5: Pushed
38dcb92de9f2: Pushed
a2ae92ffcd29: Pushed
latest: digest: sha256:7c645b33cd0d8d13cd7450b4653aa1f96336dadc76c363f8d4a52dd193134a05 size: 2628
=&amp;gt; Publish complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10. Run the &lt;code&gt;make clean&lt;/code&gt; command to clean up the local Docker environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make clean
=&amp;gt; Destroying development environment...
...
...
=&amp;gt; Removing dangling images...
=&amp;gt; Clean complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;11. In the AWS console under &lt;strong&gt;ECS &amp;gt; Repositories&lt;/strong&gt;, you should now be able to see your newly published image in the &lt;strong&gt;casecommons/intake&lt;/strong&gt; repository:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/intake-image.png&#34; alt=&#34;Intake API Image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;installing-the-playbook&#34;&gt;Installing the Playbook&lt;/h2&gt;

&lt;p&gt;We now have all the supporting pieces in place to deploy the Intake Accelerator application stack to the &lt;strong&gt;demo resources&lt;/strong&gt; account.  Instead of creating a new playbook as we have done previously in this tutorial, we will instead clone an existing playbook and add a new environment called &lt;strong&gt;demo-resources&lt;/strong&gt; to the playbook.&lt;/p&gt;

&lt;p&gt;1. Clone the &lt;a href=&#34;https://github.com/casecommons/intake-accelerator-aws&#34;&gt;Intake Accelerator AWS project&lt;/a&gt; to your local environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:Casecommons/intake-accelerator-aws.git
  Cloning into &#39;intake-accelerator-aws&#39;...
  remote: Counting objects: 165, done.
  remote: Compressing objects: 100% (9/9), done.
  remote: Total 165 (delta 1), reused 0 (delta 0), pack-reused 152
  Receiving objects: 100% (165/165), 30.07 KiB | 0 bytes/s, done.
  Resolving deltas: 100% (62/62), done.
$ cd intake-accelerator-aws
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.  Install the required Ansible roles for the playbook using the &lt;code&gt;ansible-galaxy&lt;/code&gt; command as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ansible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;galaxy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requirements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yml&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;force&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extracting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmenga&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudformation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;installed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extracting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmenga&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;installed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extracting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ecs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tasks&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmenga&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;casecommons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ecs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tasks&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ecs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tasks&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;installed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5.  Review the &lt;code&gt;group_vars/all/vars.yml&lt;/code&gt; file, which contains global settings for the playbook:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cf_stack_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ &amp;#39;intake-accelerator-&amp;#39; + env }}&amp;quot;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cf_stack_tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;owner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CA&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Intake&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Intake&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Accelerator&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;business&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;severity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;High&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ env }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pema&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@casecommons.org&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;cf_stack_inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationAutoscalingDesiredCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_desired_count }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationAMI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_ami }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationInstanceType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_instance_type }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationLoadBalancerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_frontend_port }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_port }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationKeyName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_keyname }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationDockerImage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_image }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationDockerImageTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_tag }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationApiUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_api_url }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationAuthentication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_authentication }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationAuthenticationUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_authentication_url }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ApplicationDomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_domain }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ env }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;LogRetention&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_log_retention }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;NginxDockerImage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_nginx_image }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;NginxDockerImageTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_nginx_tag }}&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;SecretKeyBaseCipher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;{{ config_application_secret_key_base }}&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see this stack has many different stack inputs, which revolve around application settings.&lt;/p&gt;

&lt;p&gt;One thing to note is that the &lt;code&gt;cf_stack_template&lt;/code&gt; variable is not defined - this variable defaults to the path &lt;code&gt;templates/stack.yml.j2&lt;/code&gt; in the local playbook, and you will find this playbook includes a large CloudFormation template in this location.&lt;/p&gt;

&lt;h2 id=&#34;defining-a-new-environment&#34;&gt;Defining a New Environment&lt;/h2&gt;

&lt;p&gt;We will now add a new environment called &lt;strong&gt;demo&lt;/strong&gt; to the playbook, which will be used to create the Intake API application stack in the &lt;strong&gt;demo-resources&lt;/strong&gt; account.&lt;/p&gt;

&lt;p&gt;1. Modify the &lt;code&gt;inventory&lt;/code&gt; file so that it defines a new environment called &lt;strong&gt;demo&lt;/strong&gt;, ensuring you specify &lt;code&gt;ansible_connection=local&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;[dev]&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;dev ansible_connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;local&lt;/span&gt;

&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;k&#34;&gt;[demo]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;demo ansible_connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;local&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2. Create a file called &lt;code&gt;group_vars/demo/vars.yml&lt;/code&gt;, which will hold all environment specific configuration for the &lt;strong&gt;demo&lt;/strong&gt; environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p group_vars/demo
$ touch group_vars/demo/vars.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Copy the existing settings from &lt;code&gt;group_vars/dev/vars.yml&lt;/code&gt; to &lt;code&gt;group_vars/demo/vars.yml&lt;/code&gt; and modify as shown below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# STS settings&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;sts_role_arn: arn:aws:iam::160775127577:role/admin&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Application settings&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_application_keyname: admin&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;config_application_instance_type: t2.micro&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_desired_count: 2&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_application_ami: ami-4662e126&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_application_image: 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/intake&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;config_application_tag: latest&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_frontend_port: 443&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_port: 3000&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_application_secret_key_base: xxxxx&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_application_api_url: https://demo-intake-api.demo.cloudhotspot.co/&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;config_application_authentication: &amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_authentication_url: http://perry.intake.cwds.tabordasolutions.net&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_application_domain: demo.cloudhotspot.co&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Nginx settings&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_nginx_image: 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/nginx&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;config_nginx_tag: latest&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Load balancer settings&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_lb_certificate_arn:&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;na&#34;&gt;Fn::ImportValue: DemoCloudhotspotCoCertificateArn&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Log settings&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_log_retention: 30&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_log_deletion_policy: Delete&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we target the &lt;strong&gt;demo-resources&lt;/strong&gt; account by specifying the &lt;strong&gt;demo-resources&lt;/strong&gt; IAM &lt;strong&gt;admin&lt;/strong&gt; role in the &lt;code&gt;sts_role_arn&lt;/code&gt; variable, whilst the remaining settings configure the Intake APi application stack specify to the &lt;strong&gt;demo-resources&lt;/strong&gt; template account:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config_application_keyname&lt;/code&gt; - specifies the name of the EC2 key pair that ECS container instances will be created with.  Notice this matches the name of the &lt;a href=&#34;https://casecommons.github.io/aws-docs/web-proxy/#creating-an-ec2-key-pair&#34;&gt;EC2 key pair created earlier&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_application_ami&lt;/code&gt; - specifies the AMI ID of the image used to create the ECS container instances.  Notice this matches the ID of the &lt;a href=&#34;https://casecommons.github.io/aws-docs/web-proxy/#creating-an-ecs-ami&#34;&gt;AMI created earlier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_application_image&lt;/code&gt; - specifies the Docker image used to run the Intake Accelerator application containers.  Notice this matches the &lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-accelerator/#creating-the-intake-image&#34;&gt;image we created earlier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_application_secret_key_base&lt;/code&gt; - an encrypted application setting that provides cryptographic material for an application secret key.  We will securely generate an encrypted value for this setting shortly.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_application_api_url&lt;/code&gt; - specifies the URL of the Intake API endpoint that the Intake Accelerator application should connect to.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_application_domain&lt;/code&gt; - specifies the base domain that our application will be served from.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_nginx_image&lt;/code&gt; - specifies the Docker image used to run the Intake API Nginx containers.  Notice this matches the &lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-api/#creating-an-nginx-image&#34;&gt;image we created earlier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config_lb_certificate_arn&lt;/code&gt; - specifies the ARN of the AWS certificate manager (ACM) certificate to serve from the application load balancer for HTTPS connections.  Notice that we can specify this setting as a CloudFormation instrinsic function, as the template is configured to cast the configured value to a JSON object.  The intrinsic function imports the CloudFormation export &lt;code&gt;DemoCloudhotspotCoCertificateArn&lt;/code&gt;, which was created earlier when we &lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-api/#creating-a-certificate&#34;&gt;created the certificate&lt;/a&gt; in the security resources playbook.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;creating-secrets-using-kms&#34;&gt;Creating Secrets using KMS&lt;/h2&gt;

&lt;p&gt;Our &lt;strong&gt;demo&lt;/strong&gt; environment settings include a single setting (&lt;code&gt;config_application_secret_key_base&lt;/code&gt;) that we need to generate encrypted values for.&lt;/p&gt;

&lt;p&gt;The approach here is to simply use the AWS Key Management Service (KMS) to encrypt the plaintext value of the secret.  We will use the KMS key that was created as part of the &lt;a href=&#34;https://casecommons.github.io/aws-docs/cloudformation-resources/&#34;&gt;CloudFormation resources&lt;/a&gt; stack.&lt;/p&gt;

&lt;p&gt;1. In the AWS console, open the &lt;strong&gt;CloudFormation &amp;gt; Exports&lt;/strong&gt; from the CloudFormation dashboard.  Copy the &lt;strong&gt;CfnMasterKey&lt;/strong&gt; export value, which defines the key ID of the KMS key we will use for encryption.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/cfn-master-key.png&#34; alt=&#34;KMS Master Key&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2. In a local shell configured with an admin profile targetting the &lt;strong&gt;demo resources&lt;/strong&gt; account, run the following command to generate ciphertext for the &lt;code&gt;config_application_secret_key_base&lt;/code&gt; variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-resources-admin
$ aws kms encrypt --key-id 11710b57-c424-4df7-ab3d-20358820edd9 --plaintext $(openssl rand -base64 32)
Enter MFA code: ******
&#39;{
    &amp;quot;KeyId&amp;quot;: &amp;quot;arn:aws:kms:us-west-2:160775127577:key/11710b57-c424-4df7-ab3d-20358820edd9&amp;quot;,
    &amp;quot;CiphertextBlob&amp;quot;: &amp;quot;AQECAHjbSbOZ8FLk7XffvdtrDewDyQKH9bOaMrY6jf+N3si+SQAAAIswgYgGCSqGSIb3DQEHBqB7MHkCAQAwdAYJKoZIhvcNAQcBMB4GCWCGSAFlAwQBLjARBAxUVkZgkHNkRWRcbtgCARCAR2bG8d33uID+nq01bRjHeNJzsFgTqrOxCoY7LmR+tyVT/3oTAQYePtsJC3Dt9zmOJ4G82Q36X4q0ng5r8YPaj15wp/en0tPY&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3. Copy the &lt;code&gt;CiphertextBlob&lt;/code&gt; value from the &lt;code&gt;aws kms encrypt&lt;/code&gt; command output and set the &lt;code&gt;config_application_secret_key_base&lt;/code&gt; variable in &lt;code&gt;group_vars/demo/vars.yml&lt;/code&gt; to this value:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# STS settings&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;sts_role_arn: arn:aws:iam::160775127577:role/admin&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Application settings&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_keyname: admin&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_instance_type: t2.micro&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_desired_count: 2&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_ami: ami-4662e126&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_image: 160775127577.dkr.ecr.us-west-2.amazonaws.com/casecommons/intake&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_tag: latest&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_frontend_port: 443&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_port: 3000&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;na&#34;&gt;config_application_secret_key_base: AQECAHjbSbOZ8FLk7XffvdtrDewDyQKH9bOaMrY6jf+N3si+SQAAAIswgYgGCSqGSIb3DQEHBqB7MHkCAQAwdAYJKoZIhvcNAQcBMB4GCWCGSAFlAwQBLjARBAxUVkZgkHNkRWRcbtgCARCAR2bG8d33uID+nq01bRjHeNJzsFgTqrOxCoY7LmR+tyVT/3oTAQYePtsJC3Dt9zmOJ4G82Q36X4q0ng5r8YPaj15wp/en0tPY&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;config_application_api_url: https://demo-intake-api.demo.cloudhotspot.co/&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_authentication: &amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_authentication_url: http://perry.intake.cwds.tabordasolutions.net&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;config_application_domain: demo.cloudhotspot.co&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;running-the-playbook&#34;&gt;Running the Playbook&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve defined environment settings for the &lt;strong&gt;demo&lt;/strong&gt; environment targeting our &lt;strong&gt;demo-resources&lt;/strong&gt; account, let&amp;rsquo;s run the playbook.&lt;/p&gt;

&lt;p&gt;1. Ensure your local AWS environment is configured to target the &lt;strong&gt;demo-resources&lt;/strong&gt; account:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export AWS_PROFILE=demo-resources-admin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Run the Ansible playbook targeting the &lt;code&gt;demo&lt;/code&gt; environment as demonstrated below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ ansible-playbook site.yml -e &lt;span class=&#34;nv&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo

PLAY &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Assume Role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; *************************************************************

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : set_fact&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ******************************************************
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : checking &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; sts functions are sts_disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting empty sts_session_output result&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : setting sts_creds &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; legacy AWS credentials are present &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;e.g. &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Ansible Tower&lt;span class=&#34;o&#34;&gt;)]&lt;/span&gt; ***
skipping: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-sts : assume sts role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ***********************************************
Enter MFA code: ******
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
...
...
TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-cloudformation : &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; path fact &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; s3 upload disabled&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; **********
ok: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

TASK &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;aws-cloudformation : configure application stack&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ************************
...
...
PLAY RECAP *********************************************************************
demo                       : &lt;span class=&#34;nv&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;18&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;changed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;unreachable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;failed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.  The playbook will take approxiately 10 minutes to create the CloudFormation stack and associated resources.  Whilst the CloudFormation stack is being created, you can review the CloudFormation stack that was generated in the &lt;code&gt;build/&amp;lt;timestamp&amp;gt;&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tree build
build
└── 20170301224832
    ├── intake-accelerator-demo-config.json
    ├── intake-accelerator-demo-policy.json
    ├── intake-accelerator-demo-stack.json
    └── intake-accelerator-demo-stack.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following shows the &lt;code&gt;intake-accelerator-demo-stack.yml&lt;/code&gt; file that was generated and uploaded to CloudFormation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;AWSTemplateFormatVersion: &amp;quot;2010-09-09&amp;quot;

Description: Intake Accelerator - demo

Parameters:
  ApplicationAMI:
    Type: String
    Description: Application Amazon Machine Image ID
  ApplicationInstanceType:
    Type: String
    Description: Application EC2 Instance Type
  ApplicationAutoscalingDesiredCount:
    Type: Number
    Description: Application AutoScaling Group Desired Count
  ApplicationDockerImage:
    Type: String
    Description: Docker Image for Application
  ApplicationDockerImageTag:
    Type: String
    Description: Docker Image Tag for Application
    Default: latest
  ApplicationKeyName:
    Type: String
    Description: EC2 Key Pair for Application SSH Access
  ApplicationLoadBalancerPort:
    Type: Number
    Description: Application Front End HTTP Port
  ApplicationPort:
    Type: Number
    Description: Application HTTP Port
  ApplicationDomain:
    Type: String
    Description: Base public domain of the application URL
  ApplicationCacheFailover:
    Type: String
    Description: Enables/disables Redis cache automatic failover
    AllowedValues:
      - &amp;quot;true&amp;quot;
      - &amp;quot;false&amp;quot;
    Default: &amp;quot;false&amp;quot;
  ApplicationCacheInstanceCount:
    Type: Number
    Description: Number of Redis cache instances
    Default: 1
  ApplicationCacheInstanceType:
    Type: String
    Description: Type of Redis cache instance
    Default: cache.t2.micro
  ApplicationCacheVersion:
    Type: String
    Description: Redis cache version
    Default: &amp;quot;3.2.4&amp;quot;
  ApplicationApiUrl:
    Type: String
    Description: Intake API URL Endpoint
  ApplicationAuthentication:
    Type: String
    Description: Enables or disables authentication
    Default: &amp;quot;true&amp;quot;
    AllowedValues:
      - &amp;quot;true&amp;quot;
      - &amp;quot;false&amp;quot;
  ApplicationAuthenticationUrl:
    Type: String
    Description: Authentication URL for the Intake Accelerator application
  Environment:
    Type: String
    Description: Stack Environment
  LogRetention:
    Type: Number
    Description: Log retention in days
  NginxDockerImage:
    Type: String
    Description: Docker Image for Nginx
  NginxDockerImageTag:
    Type: String
    Description: Docker Image Tag for Nginx
    Default: latest
  SecretKeyBaseCipher:
    Type: String
    Description: KMS Encrypted Secret Key Base

Conditions:
  ApplicationCacheFailoverEnabled:
    Fn::Equals: 
      - { &amp;quot;Ref&amp;quot; : &amp;quot;ApplicationCacheFailover&amp;quot; }
      - &amp;quot;true&amp;quot;

Resources:
  ApplicationDnsRecord:
    Type: &amp;quot;AWS::Route53::RecordSet&amp;quot;
    Properties:
      Name: 
        Fn::Sub: &amp;quot;${Environment}-intake.${ApplicationDomain}&amp;quot;
      TTL: &amp;quot;300&amp;quot;
      HostedZoneName: &amp;quot;${ApplicationDomain}.&amp;quot;
      Type: &amp;quot;CNAME&amp;quot;
      Comment: 
        Fn::Sub: &amp;quot;Intake Accelerator Application - ${Environment}&amp;quot;
      ResourceRecords: 
        - Fn::Sub: &amp;quot;${ApplicationLoadBalancer.DNSName}&amp;quot;
  ApplicationLoadBalancer:
    Type: &amp;quot;AWS::ElasticLoadBalancingV2::LoadBalancer&amp;quot;
    Properties:
      Scheme: &amp;quot;internet-facing&amp;quot;
      SecurityGroups:
       - Ref: &amp;quot;ApplicationLoadBalancerSecurityGroup&amp;quot;
      Subnets:
        - Fn::ImportValue: DefaultPublicSubnetA
        - Fn::ImportValue: DefaultPublicSubnetB
      LoadBalancerAttributes: 
        - Key: &amp;quot;deletion_protection.enabled&amp;quot;
          Value: false
        - Key: &amp;quot;idle_timeout.timeout_seconds&amp;quot;
          Value: 30
      Tags:
        - Key: &amp;quot;Name&amp;quot;
          Value:
            Fn::Sub: ${AWS::StackName}-${Environment}-lb
  ApplicationLoadBalancerApplicationListener:
    Type: &amp;quot;AWS::ElasticLoadBalancingV2::Listener&amp;quot;
    Properties:
      Certificates:
        - CertificateArn: {&amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DemoCloudhotspotCoCertificateArn&amp;quot;}
      DefaultActions:
        - TargetGroupArn: { &amp;quot;Ref&amp;quot;: &amp;quot;IntakeAcceleratorServiceTargetGroup&amp;quot; }
          Type: forward
      LoadBalancerArn: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationLoadBalancer&amp;quot; }
      Port: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationLoadBalancerPort&amp;quot; }
      Protocol: &amp;quot;HTTPS&amp;quot;
  IntakeAcceleratorServiceTargetGroup:
    Type: &amp;quot;AWS::ElasticLoadBalancingV2::TargetGroup&amp;quot;
    Properties:
      VpcId:
        Fn::ImportValue: &amp;quot;DefaultVpcId&amp;quot;
      Protocol: &amp;quot;HTTP&amp;quot;
      Port: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
      TargetGroupAttributes:
        - Key: &amp;quot;deregistration_delay.timeout_seconds&amp;quot;
          Value: 60
  ApplicationLoadBalancerSecurityGroup:
    Type: &amp;quot;AWS::EC2::SecurityGroup&amp;quot;
    Properties:
      VpcId:
        Fn::ImportValue: &amp;quot;DefaultVpcId&amp;quot;
      GroupDescription: &amp;quot;Intake Accelerator Load Balancer Security Group&amp;quot;
      SecurityGroupIngress:
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationLoadBalancerPort&amp;quot; }
          ToPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationLoadBalancerPort&amp;quot; }
          CidrIp: &amp;quot;0.0.0.0/0&amp;quot;
  ApplicationLoadBalancerToApplicationIngress:
    Type: &amp;quot;AWS::EC2::SecurityGroupIngress&amp;quot;
    Properties:
      IpProtocol: &amp;quot;tcp&amp;quot;
      FromPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
      ToPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
      GroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingSecurityGroup&amp;quot; }
      SourceSecurityGroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationLoadBalancerSecurityGroup&amp;quot; }
  ApplicationLoadBalancerToApplicationEgress:
    Type: &amp;quot;AWS::EC2::SecurityGroupEgress&amp;quot;
    Properties:
      IpProtocol: &amp;quot;tcp&amp;quot;
      FromPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
      ToPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
      GroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationLoadBalancerSecurityGroup&amp;quot; }
      DestinationSecurityGroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingSecurityGroup&amp;quot; }
  ApplicationAutoscaling:
    Type: &amp;quot;AWS::AutoScaling::AutoScalingGroup&amp;quot;
    DependsOn:
      - DmesgLogGroup
      - DockerLogGroup
      - EcsAgentLogGroup
      - EcsInitLogGroup
      - MessagesLogGroup
    CreationPolicy:
      ResourceSignal:
        Count: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingDesiredCount&amp;quot;}
        Timeout: &amp;quot;PT15M&amp;quot;
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingDesiredCount&amp;quot;}
        MinSuccessfulInstancesPercent: &amp;quot;100&amp;quot;
        WaitOnResourceSignals: &amp;quot;true&amp;quot;
        PauseTime: &amp;quot;PT15M&amp;quot;
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: &amp;quot;DefaultMediumSubnetA&amp;quot;
        - Fn::ImportValue: &amp;quot;DefaultMediumSubnetB&amp;quot;
      LaunchConfigurationName: { &amp;quot;Ref&amp;quot; : &amp;quot;ApplicationAutoscalingLaunchConfiguration&amp;quot; }
      MinSize: &amp;quot;0&amp;quot;
      MaxSize: &amp;quot;4&amp;quot;
      DesiredCapacity: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingDesiredCount&amp;quot;}
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-instance
          PropagateAtLaunch: &amp;quot;true&amp;quot;
  ApplicationAutoscalingLaunchConfiguration:
    Type: &amp;quot;AWS::AutoScaling::LaunchConfiguration&amp;quot;
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            10_first_run:
              command: &amp;quot;sh firstrun.sh&amp;quot;
              env:
                STACK_NAME: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::StackName&amp;quot; }
                AUTOSCALING_GROUP: &amp;quot;ApplicationAutoscaling&amp;quot;
                AWS_DEFAULT_REGION: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot; }
                ECS_CLUSTER: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCluster&amp;quot; }
                DOCKER_NETWORK_MODE: host
                PROXY_URL:
                  Fn::ImportValue: DefaultProxyURL
              cwd: &amp;quot;/home/ec2-user/&amp;quot;
          files:
            /etc/ecs/ecs.config:
              content: 
                Fn::Sub: &amp;quot;ECS_CLUSTER=${ApplicationCluster}\n&amp;quot;
    Properties:
      ImageId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAMI&amp;quot; }
      InstanceType: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationInstanceType&amp;quot; }
      IamInstanceProfile: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingInstanceProfile&amp;quot; }
      KeyName: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationKeyName&amp;quot; }
      SecurityGroups:
        - Ref: &amp;quot;ApplicationAutoscalingSecurityGroup&amp;quot;
      UserData: 
        Fn::Base64:
          Fn::Join: [&amp;quot;\n&amp;quot;, [
            &amp;quot;#!/bin/bash&amp;quot;,
            &amp;quot;set -e&amp;quot;,
            &amp;quot;Fn::Join&amp;quot;: [&amp;quot;&amp;quot;, [
              &amp;quot;Fn::Sub&amp;quot;: &amp;quot;/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ApplicationAutoscalingLaunchConfiguration --region ${AWS::Region}&amp;quot;,
              &amp;quot;    --http-proxy &amp;quot;, &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultProxyURL&amp;quot;, 
              &amp;quot;    --https-proxy &amp;quot;, &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultProxyURL&amp;quot;
            ] ],
            &amp;quot;Fn::Join&amp;quot;: [&amp;quot;&amp;quot;, [
              &amp;quot;Fn::Sub&amp;quot;: &amp;quot;/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ApplicationAutoscaling --region ${AWS::Region}&amp;quot;,
              &amp;quot;    --http-proxy &amp;quot;, &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultProxyURL&amp;quot;, 
              &amp;quot;    --https-proxy &amp;quot;, &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultProxyURL&amp;quot;
            ] ]
          ] ]
  ApplicationAutoscalingSecurityGroup:
    Type: &amp;quot;AWS::EC2::SecurityGroup&amp;quot;
    Properties:
      VpcId:
        Fn::ImportValue: &amp;quot;DefaultVpcId&amp;quot;
      GroupDescription: &amp;quot;Intake Accelerator Security Group&amp;quot;
      SecurityGroupIngress:
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: &amp;quot;DefaultManagementSubnetACidr&amp;quot;
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: &amp;quot;DefaultManagementSubnetBCidr&amp;quot;
      SecurityGroupEgress:
        - IpProtocol: &amp;quot;tcp&amp;quot;
          FromPort: 3128
          ToPort: 3128
          DestinationSecurityGroupId:
            Fn::ImportValue: DefaultProxySecurityGroup
        - IpProtocol: &amp;quot;udp&amp;quot;
          FromPort: 53
          ToPort: 53
          CidrIp:
            Fn::Join: [&amp;quot;&amp;quot;, [
              &amp;quot;Fn::ImportValue&amp;quot;: &amp;quot;DefaultVpcDnsServer&amp;quot;, &amp;quot;/32&amp;quot;
            ] ]
        - IpProtocol: &amp;quot;udp&amp;quot;
          FromPort: 123
          ToPort: 123
          CidrIp: 0.0.0.0/0
  ApplicationAutoscalingRole:
    Type: &amp;quot;AWS::IAM::Role&amp;quot;
    Properties:
      AssumeRolePolicyDocument:
        Version: &amp;quot;2012-10-17&amp;quot;
        Statement:
          - Effect: &amp;quot;Allow&amp;quot;
            Principal:
              Service: [ &amp;quot;ec2.amazonaws.com&amp;quot; ]
            Action: [ &amp;quot;sts:AssumeRole&amp;quot; ]
      Path: &amp;quot;/&amp;quot;
      ManagedPolicyArns: []
      Policies:
        - {&amp;quot;PolicyName&amp;quot;: &amp;quot;CloudWatchLogs&amp;quot;, &amp;quot;PolicyDocument&amp;quot;: {&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, &amp;quot;Statement&amp;quot;: [{&amp;quot;Action&amp;quot;: [&amp;quot;logs:CreateLogGroup&amp;quot;, &amp;quot;logs:CreateLogStream&amp;quot;, &amp;quot;logs:PutLogEvents&amp;quot;, &amp;quot;logs:DescribeLogStreams&amp;quot;], &amp;quot;Resource&amp;quot;: {&amp;quot;Fn::Sub&amp;quot;: &amp;quot;arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}*&amp;quot;}, &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;}]}}
        - PolicyName: &amp;quot;EC2ContainerInstancePolicy&amp;quot;
          PolicyDocument:
            Statement:
              - Effect: &amp;quot;Allow&amp;quot;
                Action:
                  - &amp;quot;ecs:RegisterContainerInstance&amp;quot;
                  - &amp;quot;ecs:DeregisterContainerInstance&amp;quot;
                Resource: 
                  Fn::Sub: &amp;quot;arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ApplicationCluster}&amp;quot;
              - Effect: &amp;quot;Allow&amp;quot;
                Action:
                  - &amp;quot;ecs:DiscoverPollEndpoint&amp;quot;
                  - &amp;quot;ecs:Submit*&amp;quot;
                  - &amp;quot;ecs:Poll&amp;quot;
                  - &amp;quot;ecs:StartTelemetrySession&amp;quot;
                Resource: &amp;quot;*&amp;quot;
              - Effect: &amp;quot;Allow&amp;quot;
                Action: 
                  - &amp;quot;ecr:BatchCheckLayerAvailability&amp;quot;
                  - &amp;quot;ecr:BatchGetImage&amp;quot;
                  - &amp;quot;ecr:GetDownloadUrlForLayer&amp;quot;
                  - &amp;quot;ecr:GetAuthorizationToken&amp;quot;
                Resource: &amp;quot;*&amp;quot;
              - Effect: &amp;quot;Allow&amp;quot;
                Action:
                - &amp;quot;kms:Decrypt&amp;quot;
                - &amp;quot;kms:DescribeKey&amp;quot;
                Resource:
                  Fn::ImportValue: &amp;quot;CfnMasterKeyArn&amp;quot;
  ApplicationAutoscalingInstanceProfile:
    Type: &amp;quot;AWS::IAM::InstanceProfile&amp;quot;
    Properties:
      Path: &amp;quot;/&amp;quot;
      Roles: [ { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingRole&amp;quot; } ]
  ApplicationCache:
    Type: &amp;quot;AWS::ElastiCache::ReplicationGroup&amp;quot;
    Properties:
      ReplicationGroupDescription: 
        Fn::Sub: ${AWS::StackName}-redis-cache
      AutomaticFailoverEnabled: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCacheFailover&amp;quot; }
      NumCacheClusters: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCacheInstanceCount&amp;quot; }
      CacheNodeType: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCacheInstanceType&amp;quot; }
      Port: &amp;quot;6379&amp;quot;
      Engine: &amp;quot;redis&amp;quot;
      EngineVersion: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCacheVersion&amp;quot; }
      CacheSubnetGroupName: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCacheSubnetGroup&amp;quot; }
      PreferredMaintenanceWindow: &amp;quot;sun:10:30-sun:12:00&amp;quot;
      SnapshotWindow: 
        Fn::If:
          - &amp;quot;ApplicationCacheFailoverEnabled&amp;quot;
          - &amp;quot;08:00-10:00&amp;quot;
          - { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::NoValue&amp;quot; }
      SecurityGroupIds:
        - { &amp;quot;Ref&amp;quot; : &amp;quot;ApplicationCacheSecurityGroup&amp;quot; }
  ApplicationCacheSubnetGroup:
    Type: &amp;quot;AWS::ElastiCache::SubnetGroup&amp;quot;
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName}-redis-cache-subnet-group
      SubnetIds:
        - Fn::ImportValue: DefaultHighSubnetA
        - Fn::ImportValue: DefaultHighSubnetB
  ApplicationCacheSecurityGroup:
    Type: &amp;quot;AWS::EC2::SecurityGroup&amp;quot;
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-redis-cache-sg
      VpcId:
        Fn::ImportValue: DefaultVpcId
      SecurityGroupEgress:
        - IpProtocol: &amp;quot;icmp&amp;quot;
          FromPort : -1
          ToPort : -1
          CidrIp: &amp;quot;192.0.2.0/24&amp;quot;
  ApplicationToApplicationCacheEgress:
    Type: &amp;quot;AWS::EC2::SecurityGroupEgress&amp;quot;
    Properties:
      IpProtocol: &amp;quot;tcp&amp;quot;
      FromPort: &amp;quot;6379&amp;quot;
      ToPort: &amp;quot;6379&amp;quot;
      GroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingSecurityGroup&amp;quot; }
      DestinationSecurityGroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCacheSecurityGroup&amp;quot; }
  ApplicationToApplicationCacheIngress:
    Type: &amp;quot;AWS::EC2::SecurityGroupIngress&amp;quot;
    Properties:
      IpProtocol: &amp;quot;tcp&amp;quot;
      FromPort: &amp;quot;6379&amp;quot;
      ToPort: &amp;quot;6379&amp;quot;
      GroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCacheSecurityGroup&amp;quot; }
      SourceSecurityGroupId: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingSecurityGroup&amp;quot; }
  ApplicationCluster:
    Type: &amp;quot;AWS::ECS::Cluster&amp;quot;
  ApplicationTaskDefinition:
    Type: &amp;quot;AWS::ECS::TaskDefinition&amp;quot;
    Properties:
      NetworkMode: host
      Volumes:
        - Name: webroot
          Host: {}
      ContainerDefinitions:
      - Name: intake
        Image:
          Fn::Sub: ${ApplicationDockerImage}:${ApplicationDockerImageTag}
        MemoryReservation: 500
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: 
              Fn::Sub: ${AWS::StackName}/ecs/IntakeAcceleratorService/intake
            awslogs-region: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot; }
            awslogs-stream-prefix: docker
        Environment:
          - Name: KMS_SECRET_KEY_BASE
            Value: { &amp;quot;Ref&amp;quot;: &amp;quot;SecretKeyBaseCipher&amp;quot; }
          - Name: RAILS_ENV
            Value: production
          - Name: NODE_ENV
            Value: production
          - Name: API_URL
            Value: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationApiUrl&amp;quot; }
          - Name: REDIS_HOST
            Value:
              Fn::Sub: ${ApplicationCache.PrimaryEndPoint.Address}
          - Name: REDIS_PORT
            Value: &amp;quot;6379&amp;quot;
          - Name: AUTHENTICATION
            Value: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAuthentication&amp;quot; }
          - Name: AUTHENTICATION_URL
            Value: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAuthenticationUrl&amp;quot; }
          - Name: http_proxy
            Value:
              Fn::ImportValue: DefaultProxyURL
          - Name: https_proxy
            Value:
              Fn::ImportValue: DefaultProxyURL
          - Name: no_proxy
            Value: &amp;quot;169.254.169.254,localhost&amp;quot;
        MountPoints:
          - SourceVolume: webroot
            ContainerPath: /tmp
        Command:
          - bundle
          - exec
          - puma
          - -e
          - production
          - -b
          - unix:///tmp/app.sock
          - -C
          - config/puma.rb
      - Name: nginx
        Image:
          Fn::Sub: ${NginxDockerImage}:${NginxDockerImageTag}
        MemoryReservation: 200
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: 
              Fn::Sub: ${AWS::StackName}/ecs/IntakeAcceleratorService/nginx
            awslogs-region: { &amp;quot;Ref&amp;quot;: &amp;quot;AWS::Region&amp;quot; }
            awslogs-stream-prefix: docker
        PortMappings:
        - ContainerPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
          Protocol: tcp
        Environment:
          - Name: HTTP_PORT 
            Value: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
          - Name: WEB_ROOT
            Value: /ca_intake/public
          - Name: UPSTREAM_URL
            Value: unix:///tmp/app.sock
        MountPoints:
          - SourceVolume: webroot
            ContainerPath: /tmp
        VolumesFrom:
          - SourceContainer: intake
            ReadOnly: &amp;quot;true&amp;quot;
  IntakeAcceleratorService:
    Type: &amp;quot;AWS::ECS::Service&amp;quot;
    DependsOn:
      - ApplicationLoadBalancer
      - ApplicationAutoscaling
      - IntakeAcceleratorServiceLogGroup
      - IntakeAcceleratorNginxLogGroup
    Properties:
      Cluster: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationCluster&amp;quot; }
      TaskDefinition: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationTaskDefinition&amp;quot; }
      DesiredCount: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationAutoscalingDesiredCount&amp;quot;}
      DeploymentConfiguration:
          MinimumHealthyPercent: 50
          MaximumPercent: 200
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: { &amp;quot;Ref&amp;quot;: &amp;quot;ApplicationPort&amp;quot; }
          TargetGroupArn: { &amp;quot;Ref&amp;quot;: &amp;quot;IntakeAcceleratorServiceTargetGroup&amp;quot; }
      Role: { &amp;quot;Ref&amp;quot;: &amp;quot;EcsServiceRole&amp;quot; }
  EcsServiceRole:
    Type: &amp;quot;AWS::IAM::Role&amp;quot;
    Properties:
      AssumeRolePolicyDocument:
        Version: &amp;quot;2012-10-17&amp;quot;
        Statement:
          - Effect: &amp;quot;Allow&amp;quot;
            Principal: 
              Service: [ &amp;quot;ecs.amazonaws.com&amp;quot; ]
            Action: [ &amp;quot;sts:AssumeRole&amp;quot; ]
      Path: &amp;quot;/&amp;quot;
      ManagedPolicyArns:
        - &amp;quot;arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole&amp;quot;
  DmesgLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/dmesg
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  DockerLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/docker
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  EcsAgentLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/ecs/ecs-agent
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  EcsInitLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/ecs/ecs-init
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  MessagesLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/messages
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  IntakeAcceleratorServiceLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/IntakeAcceleratorService/intake
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
  IntakeAcceleratorNginxLogGroup:
    Type: &amp;quot;AWS::Logs::LogGroup&amp;quot;
    DeletionPolicy: &amp;quot;Delete&amp;quot;
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/IntakeAcceleratorService/nginx
      RetentionInDays: { &amp;quot;Ref&amp;quot;: &amp;quot;LogRetention&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. Once the playbook execution completes successfully, login to the &lt;strong&gt;demo-resources&lt;/strong&gt; account in the AWS console.  You should see a new CloudFormation stack called &lt;strong&gt;intake-accelerator-demo&lt;/strong&gt; in the &lt;strong&gt;CloudFormation&lt;/strong&gt; dashboard:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/intake-accelerator-demo-stack.png&#34; alt=&#34;Intake Accelerator Demo Stack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5. If you navigate to &lt;strong&gt;ECS &amp;gt; Clusters&lt;/strong&gt; you should be able to see the ECS cluster for the Intake Accelerator application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/intake-accelerator-ecs-cluster.png&#34; alt=&#34;Intake Accelerator ECS Cluster&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6. You can verify the Intake Accelerator is functional by browsing to &lt;code&gt;https://demo-intake.demo.cloudhotspot.co/&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://casecommons.github.io/aws-docs/images/intake-accelerator.png&#34; alt=&#34;Browsing to Intake Accelerator&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;We first published a Docker image required for the Intake Accelerator stack to the ECR repository created earlier in this tutotial. We then created a new environment in the Intake Accelerator playbook, learned how to encrypt secrets using the AWS KMS key created earlier in the CloudFormation resources stack, and finally successully deployed the Intake Accelerator stack.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Infrastructure Accelerator Tutorial</title>
      <link>https://casecommons.github.io/aws-docs/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>https://casecommons.github.io/aws-docs/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This tutorial provides a walkthrough of the Case Commons Infrastructure
Accelerator.   It provide a reusable, open source AWS CloudFormation deployment
framework for provisioning cloud infrastructure and deploying application stacks
to it.&lt;/p&gt;

&lt;p&gt;The Infrastructure Accelerator is based on a modern Infrastructure as Code
design pattern, using Ansible as an automation framework to provision all of the
AWS resources needed for one or more application stacks.    It assumes that
application images are packaged using Docker.&lt;/p&gt;

&lt;p&gt;This tutorial was initially developed for Case Commons in support of the
California Child Welfare Digital Services Intake project.   The  Intake
Accelerator and Intake API stacks can be used as examples of how to set up your
application stack.
You will create a completely fresh account topology, implementing two AWS accounts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Users Account&lt;/strong&gt; - a central users account where all user accounts and credentials are located.  Users must authenticate to this account and assume a role in a given resource account to manage resources in the target resource account.  In this tutorial the users account is called &lt;strong&gt;demo-users&lt;/strong&gt; and has an account ID of &lt;strong&gt;094411466117&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Resource Account&lt;/strong&gt; - account where AWS resources for one or more applications will be created.  The deployment framework can support multiple resource accounts based upon the needs of your organization and product teams.  In this tutorial the resources account is called &lt;strong&gt;demo-resources&lt;/strong&gt; and has an account ID of &lt;strong&gt;160775127577&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this tutorial you will be configuring a number of AWS resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/security-resources/&#34;&gt;Security Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/cloudformation-resources/&#34;&gt;CloudFormation Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/network-resources/&#34;&gt;Network Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/ecr-resources/&#34;&gt;EC2 Container Registry (ECR) Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/web-proxy/&#34;&gt;Web Proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-api/&#34;&gt;Intake API Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://casecommons.github.io/aws-docs/intake-accelerator/&#34;&gt;Intake Accelerator Application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of the above consists of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ansible playbook&lt;/li&gt;
&lt;li&gt;CloudFormation template that defines all AWS resources&lt;/li&gt;
&lt;li&gt;One or more environments, each environment ultimately implemented as a CloudFormation stack&lt;/li&gt;
&lt;li&gt;Git repository&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;This tutorial assumes you are starting from two empty AWS accounts and have access to the root account for each.&lt;/p&gt;

&lt;p&gt;You will also need to ensure your &lt;a href=&#34;https://casecommons.github.io/aws-docs/local-setup/&#34;&gt;local machine&lt;/a&gt; is setup correctly.&lt;/p&gt;

&lt;h2 id=&#34;cloning-the-starter-repository&#34;&gt;Cloning the Starter Repository&lt;/h2&gt;

&lt;p&gt;Although each of the playbooks described in the &lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt; are already defined as existing Git repositories, it is useful to understand how to create a playbook from scratch that implements the AWS deployment framework and methodology described in this tutorial.&lt;/p&gt;

&lt;p&gt;A starter repository is published at &lt;a href=&#34;https://github.com/casecommons/aws-starter.git&#34;&gt;https://github.com/casecommons/aws-starter.git&lt;/a&gt;, which you can use to clone a new repository, and follow the instructions in the &lt;a href=&#34;https://github.com/casecommons/aws-starter/README.md&#34;&gt;README&lt;/a&gt; to setup your playbook correctly.&lt;/p&gt;

&lt;h2 id=&#34;demo-playbooks&#34;&gt;Demo Playbooks&lt;/h2&gt;

&lt;p&gt;Examples of the playbooks that are created in this tutorial are located in the &lt;a href=&#34;https://github.com/casecommons/aws-docs/tree/master/playbooks&#34;&gt;playbooks&lt;/a&gt; folder of the repository that hosts this documentation.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>